public final class jdk.internal.module.ModulePatcher extends java.lang.Object
{
    private static final jdk.internal.access.JavaLangModuleAccess JLMA;
    private final java.util.Map map;

    public void <init>(java.util.Map)
    {
        jdk.internal.module.ModulePatcher r0;
        java.util.Map r1, $r19;
        boolean $z0, $z1;
        java.util.HashMap $r2;
        java.util.Set $r4;
        java.util.Iterator r5;
        java.lang.Object $r6, $r8, $r10, $r16;
        java.util.Map$Entry r7;
        java.lang.String r9;
        java.util.List $r11, r17;
        java.util.stream.Stream $r12, $r14;
        java.util.function.Function $r13;
        java.util.stream.Collector $r15;

        r0 := @this: jdk.internal.module.ModulePatcher;

        r1 := @parameter0: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $z0 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $r19 = staticinvoke <java.util.Map: java.util.Map of()>();

        r0.<jdk.internal.module.ModulePatcher: java.util.Map map> = $r19;

        goto label4;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        $r4 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label3;

        $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r7 = (java.util.Map$Entry) $r6;

        $r8 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>();

        r9 = (java.lang.String) $r8;

        $r10 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.util.List) $r10;

        $r12 = interfaceinvoke $r11.<java.util.List: java.util.stream.Stream stream()>();

        $r13 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_new_0__42: java.util.function.Function bootstrap$()>();

        $r14 = interfaceinvoke $r12.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r13);

        $r15 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r16 = interfaceinvoke $r14.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r15);

        r17 = (java.util.List) $r16;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, r17);

        goto label2;

     label3:
        r0.<jdk.internal.module.ModulePatcher: java.util.Map map> = $r2;

     label4:
        return;
    }

    public java.lang.module.ModuleReference patchIfNeeded(java.lang.module.ModuleReference)
    {
        java.lang.module.ModuleReference r0;
        java.lang.String r1, $r13, $r57;
        jdk.internal.module.ModulePatcher r2;
        java.util.Map $r3;
        java.lang.Object $r4, $r42, $r81;
        java.util.List r5;
        java.util.HashSet $r6;
        boolean z0, $z1, $z3, $z4, $z5, $z6, $z7;
        java.util.Set $r8, $r14, $r15, $r24, $r27, $r30, $r33, $r36;
        jdk.internal.module.ModuleReferenceImpl $r9, r11;
        java.util.function.Supplier $r10;
        jdk.internal.access.JavaLangModuleAccess $r12;
        java.util.function.Consumer $r17, $r20, $r23, $r29, $r32, $r35, $r38, $r55, $r66;
        java.util.Optional $r18, $r21, $r80;
        java.nio.file.LinkOption[] $r43, $r44;
        java.util.function.BiPredicate $r45;
        java.nio.file.FileVisitOption[] $r46;
        java.util.stream.Stream $r47, $r49, $r51, $r53, $r58, $r60, $r62, $r64;
        java.util.function.Predicate $r48, $r52, $r59, $r63;
        java.util.function.Function $r50, $r61;
        java.util.jar.JarFile $r56;
        java.io.IOException $r67;
        java.io.UncheckedIOException $r68;
        java.lang.Throwable $r69, $r70;
        java.lang.module.ModuleDescriptor r71;
        java.util.Iterator r72;
        java.nio.file.Path r73;
        java.lang.module.ModuleDescriptor$Builder r79;
        java.net.URI r82;
        jdk.internal.module.ModuleTarget r83;
        jdk.internal.module.ModuleHashes r84;
        jdk.internal.module.ModuleHashes$HashSupplier r85;
        jdk.internal.module.ModuleResolution r86;

        r2 := @this: jdk.internal.module.ModulePatcher;

        r0 := @parameter0: java.lang.module.ModuleReference;

        r71 = virtualinvoke r0.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        r1 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r3 = r2.<jdk.internal.module.ModulePatcher: java.util.Map map>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.List) $r4;

        if r5 != null goto label01;

        return r0;

     label01:
        $r6 = new java.util.HashSet;

        specialinvoke $r6.<java.util.HashSet: void <init>()>();

        z0 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: boolean isAutomatic()>();

     label02:
        r72 = interfaceinvoke r5.<java.util.List: java.util.Iterator iterator()>();

     label03:
        $z1 = interfaceinvoke r72.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label14;

        $r42 = interfaceinvoke r72.<java.util.Iterator: java.lang.Object next()>();

        r73 = (java.nio.file.Path) $r42;

        $r43 = newarray (java.nio.file.LinkOption)[0];

        $z5 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(r73, $r43);

        if $z5 == 0 goto label12;

        $r56 = new java.util.jar.JarFile;

        $r57 = interfaceinvoke r73.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r56.<java.util.jar.JarFile: void <init>(java.lang.String)>($r57);

     label04:
        $r58 = virtualinvoke $r56.<java.util.jar.JarFile: java.util.stream.Stream stream()>();

        $r59 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_patchIfNeeded_1__56: java.util.function.Predicate bootstrap$(boolean)>(z0);

        $r60 = interfaceinvoke $r58.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r59);

        $r61 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_patchIfNeeded_2__57: java.util.function.Function bootstrap$(java.nio.file.Path)>(r73);

        $r62 = interfaceinvoke $r60.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r61);

        $r63 = staticinvoke <jdk.internal.module.ModulePatcher$isPackageName__58: java.util.function.Predicate bootstrap$()>();

        $r64 = interfaceinvoke $r62.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r63);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        $r66 = staticinvoke <jdk.internal.module.ModulePatcher$add__59: java.util.function.Consumer bootstrap$(java.util.Set)>($r6);

        interfaceinvoke $r64.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r66);

     label05:
        virtualinvoke $r56.<java.util.jar.JarFile: void close()>();

        goto label11;

     label06:
        $r70 := @caughtexception;

     label07:
        virtualinvoke $r56.<java.util.jar.JarFile: void close()>();

     label08:
        goto label10;

     label09:
        $r69 := @caughtexception;

        virtualinvoke $r70.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>($r69);

     label10:
        throw $r70;

     label11:
        goto label13;

     label12:
        $r44 = newarray (java.nio.file.LinkOption)[0];

        $z6 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r73, $r44);

        if $z6 == 0 goto label13;

        $r45 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_patchIfNeeded_3__51: java.util.function.BiPredicate bootstrap$()>();

        $r46 = newarray (java.nio.file.FileVisitOption)[0];

        $r47 = staticinvoke <java.nio.file.Files: java.util.stream.Stream find(java.nio.file.Path,int,java.util.function.BiPredicate,java.nio.file.FileVisitOption[])>(r73, 2147483647, $r45, $r46);

        $r48 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_patchIfNeeded_4__52: java.util.function.Predicate bootstrap$(jdk.internal.module.ModulePatcher,boolean)>(r2, z0);

        $r49 = interfaceinvoke $r47.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r48);

        $r50 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_patchIfNeeded_5__53: java.util.function.Function bootstrap$(java.nio.file.Path)>(r73);

        $r51 = interfaceinvoke $r49.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r50);

        $r52 = staticinvoke <jdk.internal.module.ModulePatcher$isPackageName__54: java.util.function.Predicate bootstrap$()>();

        $r53 = interfaceinvoke $r51.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r52);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>($r6);

        $r55 = staticinvoke <jdk.internal.module.ModulePatcher$add__55: java.util.function.Consumer bootstrap$(java.util.Set)>($r6);

        interfaceinvoke $r53.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r55);

     label13:
        goto label03;

     label14:
        goto label16;

     label15:
        $r67 := @caughtexception;

        $r68 = new java.io.UncheckedIOException;

        specialinvoke $r68.<java.io.UncheckedIOException: void <init>(java.io.IOException)>($r67);

        throw $r68;

     label16:
        $r8 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set packages()>();

        interfaceinvoke $r6.<java.util.Set: boolean removeAll(java.util.Collection)>($r8);

        $z3 = interfaceinvoke $r6.<java.util.Set: boolean isEmpty()>();

        if $z3 != 0 goto label18;

        $r12 = <jdk.internal.module.ModulePatcher: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r13 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r14 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set modifiers()>();

        r79 = interfaceinvoke $r12.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Builder newModuleBuilder(java.lang.String,boolean,java.util.Set)>($r13, 0, $r14);

        $z4 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: boolean isAutomatic()>();

        if $z4 != 0 goto label17;

        $r27 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set requires()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r29 = staticinvoke <jdk.internal.module.ModulePatcher$requires__47: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        interfaceinvoke $r27.<java.util.Set: void forEach(java.util.function.Consumer)>($r29);

        $r30 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set exports()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r32 = staticinvoke <jdk.internal.module.ModulePatcher$exports__48: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        interfaceinvoke $r30.<java.util.Set: void forEach(java.util.function.Consumer)>($r32);

        $r33 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set opens()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r35 = staticinvoke <jdk.internal.module.ModulePatcher$opens__49: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        interfaceinvoke $r33.<java.util.Set: void forEach(java.util.function.Consumer)>($r35);

        $r36 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set uses()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r38 = staticinvoke <jdk.internal.module.ModulePatcher$uses__50: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        interfaceinvoke $r36.<java.util.Set: void forEach(java.util.function.Consumer)>($r38);

     label17:
        $r15 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set provides()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r17 = staticinvoke <jdk.internal.module.ModulePatcher$provides__44: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        interfaceinvoke $r15.<java.util.Set: void forEach(java.util.function.Consumer)>($r17);

        $r18 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Optional version()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r20 = staticinvoke <jdk.internal.module.ModulePatcher$version__45: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        virtualinvoke $r18.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r20);

        $r21 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Optional mainClass()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r79);

        $r23 = staticinvoke <jdk.internal.module.ModulePatcher$mainClass__46: java.util.function.Consumer bootstrap$(java.lang.module.ModuleDescriptor$Builder)>(r79);

        virtualinvoke $r21.<java.util.Optional: void ifPresent(java.util.function.Consumer)>($r23);

        $r24 = virtualinvoke r71.<java.lang.module.ModuleDescriptor: java.util.Set packages()>();

        virtualinvoke r79.<java.lang.module.ModuleDescriptor$Builder: java.lang.module.ModuleDescriptor$Builder packages(java.util.Set)>($r24);

        virtualinvoke r79.<java.lang.module.ModuleDescriptor$Builder: java.lang.module.ModuleDescriptor$Builder packages(java.util.Set)>($r6);

        r71 = virtualinvoke r79.<java.lang.module.ModuleDescriptor$Builder: java.lang.module.ModuleDescriptor build()>();

     label18:
        $r80 = virtualinvoke r0.<java.lang.module.ModuleReference: java.util.Optional location()>();

        $r81 = virtualinvoke $r80.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        r82 = (java.net.URI) $r81;

        r83 = null;

        r84 = null;

        r85 = null;

        r86 = null;

        $z7 = r0 instanceof jdk.internal.module.ModuleReferenceImpl;

        if $z7 == 0 goto label19;

        r11 = (jdk.internal.module.ModuleReferenceImpl) r0;

        r83 = virtualinvoke r11.<jdk.internal.module.ModuleReferenceImpl: jdk.internal.module.ModuleTarget moduleTarget()>();

        r84 = virtualinvoke r11.<jdk.internal.module.ModuleReferenceImpl: jdk.internal.module.ModuleHashes recordedHashes()>();

        r85 = virtualinvoke r11.<jdk.internal.module.ModuleReferenceImpl: jdk.internal.module.ModuleHashes$HashSupplier hasher()>();

        r86 = virtualinvoke r11.<jdk.internal.module.ModuleReferenceImpl: jdk.internal.module.ModuleResolution moduleResolution()>();

     label19:
        $r9 = new jdk.internal.module.ModuleReferenceImpl;

        $r10 = staticinvoke <jdk.internal.module.ModulePatcher$lambda_patchIfNeeded_6__43: java.util.function.Supplier bootstrap$(java.util.List,java.lang.module.ModuleReference)>(r5, r0);

        specialinvoke $r9.<jdk.internal.module.ModuleReferenceImpl: void <init>(java.lang.module.ModuleDescriptor,java.net.URI,java.util.function.Supplier,jdk.internal.module.ModulePatcher,jdk.internal.module.ModuleTarget,jdk.internal.module.ModuleHashes,jdk.internal.module.ModuleHashes$HashSupplier,jdk.internal.module.ModuleResolution)>(r71, r82, $r10, r2, r83, r84, r85, r86);

        return $r9;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label07 to label08 with label09;
        catch java.io.IOException from label02 to label14 with label15;
    }

    public boolean hasPatches()
    {
        jdk.internal.module.ModulePatcher r0;
        java.util.Map $r1;
        boolean $z0, $z1;

        r0 := @this: jdk.internal.module.ModulePatcher;

        $r1 = r0.<jdk.internal.module.ModulePatcher: java.util.Map map>;

        $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    java.util.Set patchedModules()
    {
        jdk.internal.module.ModulePatcher r0;
        java.util.Map $r1;
        java.util.Set $r2;

        r0 := @this: jdk.internal.module.ModulePatcher;

        $r1 = r0.<jdk.internal.module.ModulePatcher: java.util.Map map>;

        $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>();

        return $r2;
    }

    private static java.lang.String toPackageName(java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.Path r0, r1, r2, r3;
        java.lang.String $r4, $r5, $r6, $r7;
        char $c0;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.file.Path;

        r2 = interfaceinvoke r0.<java.nio.file.Path: java.nio.file.Path relativize(java.nio.file.Path)>(r1);

        r3 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.Path getParent()>();

        if r3 != null goto label1;

        $r6 = interfaceinvoke r2.<java.nio.file.Path: java.lang.String toString()>();

        $r7 = staticinvoke <jdk.internal.module.ModulePatcher: java.lang.String warnIfModuleInfo(java.nio.file.Path,java.lang.String)>(r0, $r6);

        return $r7;

     label1:
        $r4 = interfaceinvoke r3.<java.nio.file.Path: java.lang.String toString()>();

        $c0 = <java.io.File: char separatorChar>;

        $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String replace(char,char)>($c0, 46);

        return $r5;
    }

    private boolean isHidden(java.nio.file.Path)
    {
        java.nio.file.Path r0;
        boolean $z0;
        java.io.IOException $r1;
        jdk.internal.module.ModulePatcher r3;

        r3 := @this: jdk.internal.module.ModulePatcher;

        r0 := @parameter0: java.nio.file.Path;

     label1:
        $z0 = staticinvoke <java.nio.file.Files: boolean isHidden(java.nio.file.Path)>(r0);

     label2:
        return $z0;

     label3:
        $r1 := @caughtexception;

        return 0;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private static java.lang.String toPackageName(java.nio.file.Path, java.util.jar.JarEntry)
    {
        java.util.jar.JarEntry r0;
        java.lang.String r1, $r2, $r3, $r5;
        int i0;
        java.nio.file.Path r4;

        r4 := @parameter0: java.nio.file.Path;

        r0 := @parameter1: java.util.jar.JarEntry;

        r1 = virtualinvoke r0.<java.util.jar.JarEntry: java.lang.String getName()>();

        i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(java.lang.String)>("/");

        if i0 != -1 goto label1;

        $r5 = staticinvoke <jdk.internal.module.ModulePatcher: java.lang.String warnIfModuleInfo(java.nio.file.Path,java.lang.String)>(r4, r1);

        return $r5;

     label1:
        $r2 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r3;
    }

    private static java.lang.String warnIfModuleInfo(java.nio.file.Path, java.lang.String)
    {
        java.lang.String r0, $r8;
        boolean $z0;
        java.lang.StringBuilder $r1, $r3, $r4, $r5, $r7;
        java.io.PrintStream $r2;
        java.nio.file.Path r6;

        r6 := @parameter0: java.nio.file.Path;

        r0 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("module-info.class");

        if $z0 == 0 goto label1;

        $r2 = <java.lang.System: java.io.PrintStream err>;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: ");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ignored in patch: ");

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r8);

     label1:
        return "";
    }

    public static java.lang.module.ModuleReader lambda$patchIfNeeded$6(java.util.List, java.lang.module.ModuleReference)
    {
        jdk.internal.module.ModulePatcher$PatchedModuleReader $r0;
        java.util.List r1;
        java.lang.module.ModuleReference r2;

        r1 := @parameter0: java.util.List;

        r2 := @parameter1: java.lang.module.ModuleReference;

        $r0 = new jdk.internal.module.ModulePatcher$PatchedModuleReader;

        specialinvoke $r0.<jdk.internal.module.ModulePatcher$PatchedModuleReader: void <init>(java.util.List,java.lang.module.ModuleReference)>(r1, r2);

        return $r0;
    }

    public static java.lang.String lambda$patchIfNeeded$5(java.nio.file.Path, java.nio.file.Path)
    {
        java.nio.file.Path r0, r1;
        java.lang.String $r2;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.nio.file.Path;

        $r2 = staticinvoke <jdk.internal.module.ModulePatcher: java.lang.String toPackageName(java.nio.file.Path,java.nio.file.Path)>(r0, r1);

        return $r2;
    }

    public boolean lambda$patchIfNeeded$4(boolean, java.nio.file.Path)
    {
        boolean z0, $z1, $z2, $z3;
        jdk.internal.module.ModulePatcher r0;
        java.nio.file.Path r1;
        java.lang.String $r2;

        r0 := @this: jdk.internal.module.ModulePatcher;

        z0 := @parameter0: boolean;

        r1 := @parameter1: java.nio.file.Path;

        if z0 == 0 goto label1;

        $r2 = interfaceinvoke r1.<java.nio.file.Path: java.lang.String toString()>();

        $z2 = virtualinvoke $r2.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z2 == 0 goto label2;

     label1:
        $z1 = virtualinvoke r0.<jdk.internal.module.ModulePatcher: boolean isHidden(java.nio.file.Path)>(r1);

        if $z1 != 0 goto label2;

        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static boolean lambda$patchIfNeeded$3(java.nio.file.Path, java.nio.file.attribute.BasicFileAttributes)
    {
        java.nio.file.attribute.BasicFileAttributes r0;
        boolean $z0;
        java.nio.file.Path r1;

        r1 := @parameter0: java.nio.file.Path;

        r0 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        $z0 = interfaceinvoke r0.<java.nio.file.attribute.BasicFileAttributes: boolean isRegularFile()>();

        return $z0;
    }

    public static java.lang.String lambda$patchIfNeeded$2(java.nio.file.Path, java.util.jar.JarEntry)
    {
        java.nio.file.Path r0;
        java.util.jar.JarEntry r1;
        java.lang.String $r2;

        r0 := @parameter0: java.nio.file.Path;

        r1 := @parameter1: java.util.jar.JarEntry;

        $r2 = staticinvoke <jdk.internal.module.ModulePatcher: java.lang.String toPackageName(java.nio.file.Path,java.util.jar.JarEntry)>(r0, r1);

        return $r2;
    }

    public static boolean lambda$patchIfNeeded$1(boolean, java.util.jar.JarEntry)
    {
        java.util.jar.JarEntry r0;
        boolean $z0, z1, $z2, $z3;
        java.lang.String $r1;

        z1 := @parameter0: boolean;

        r0 := @parameter1: java.util.jar.JarEntry;

        $z0 = virtualinvoke r0.<java.util.jar.JarEntry: boolean isDirectory()>();

        if $z0 != 0 goto label2;

        if z1 == 0 goto label1;

        $r1 = virtualinvoke r0.<java.util.jar.JarEntry: java.lang.String getName()>();

        $z2 = virtualinvoke $r1.<java.lang.String: boolean endsWith(java.lang.String)>(".class");

        if $z2 == 0 goto label2;

     label1:
        $z3 = 1;

        goto label3;

     label2:
        $z3 = 0;

     label3:
        return $z3;
    }

    public static java.nio.file.Path lambda$new$0(java.lang.String)
    {
        java.lang.String r0;
        java.lang.String[] $r1;
        java.nio.file.Path $r2;

        r0 := @parameter0: java.lang.String;

        $r1 = newarray (java.lang.String)[0];

        $r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>(r0, $r1);

        return $r2;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaLangModuleAccess $r0;

        $r0 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess getJavaLangModuleAccess()>();

        <jdk.internal.module.ModulePatcher: jdk.internal.access.JavaLangModuleAccess JLMA> = $r0;

        return;
    }
}
