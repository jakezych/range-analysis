public final class jdk.internal.module.SystemModuleFinders extends java.lang.Object
{
    private static final jdk.internal.access.JavaNetUriAccess JNUA;
    private static final boolean USE_FAST_PATH;
    private static volatile java.lang.module.ModuleFinder cachedSystemModuleFinder;

    private void <init>()
    {
        jdk.internal.module.SystemModuleFinders r0;

        r0 := @this: jdk.internal.module.SystemModuleFinders;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static jdk.internal.module.SystemModules allSystemModules()
    {
        boolean $z0;
        jdk.internal.module.SystemModules $r0;

        $z0 = <jdk.internal.module.SystemModuleFinders: boolean USE_FAST_PATH>;

        if $z0 == 0 goto label1;

        $r0 = staticinvoke <jdk.internal.module.SystemModulesMap: jdk.internal.module.SystemModules allSystemModules()>();

        return $r0;

     label1:
        return null;
    }

    static jdk.internal.module.SystemModules systemModules(java.lang.String)
    {
        boolean $z0, $z1;
        java.lang.String r0, r2, r4;
        java.lang.String[] r1, $r3;
        int $i0, i1;
        java.lang.Class $r5;
        java.lang.Class[] $r6;
        java.lang.Object[] $r7;
        java.lang.Object $r8;
        jdk.internal.module.SystemModules $r9, $r10;
        java.lang.Exception $r11;
        java.lang.InternalError $r12;
        java.lang.reflect.Constructor r13;

        r0 := @parameter0: java.lang.String;

        $z0 = <jdk.internal.module.SystemModuleFinders: boolean USE_FAST_PATH>;

        if $z0 == 0 goto label7;

        if r0 != null goto label1;

        $r10 = staticinvoke <jdk.internal.module.SystemModulesMap: jdk.internal.module.SystemModules defaultSystemModules()>();

        return $r10;

     label1:
        r1 = staticinvoke <jdk.internal.module.SystemModulesMap: java.lang.String[] moduleNames()>();

        i1 = 0;

     label2:
        $i0 = lengthof r1;

        if i1 >= $i0 goto label7;

        r2 = r1[i1];

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r2);

        if $z1 == 0 goto label6;

        $r3 = staticinvoke <jdk.internal.module.SystemModulesMap: java.lang.String[] classNames()>();

        r4 = $r3[i1];

     label3:
        $r5 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r4);

        $r6 = newarray (java.lang.Class)[0];

        r13 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r6);

        $r7 = newarray (java.lang.Object)[0];

        $r8 = virtualinvoke r13.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r7);

        $r9 = (jdk.internal.module.SystemModules) $r8;

     label4:
        return $r9;

     label5:
        $r11 := @caughtexception;

        $r12 = new java.lang.InternalError;

        specialinvoke $r12.<java.lang.InternalError: void <init>(java.lang.Throwable)>($r11);

        throw $r12;

     label6:
        i1 = i1 + 1;

        goto label2;

     label7:
        return null;

        catch java.lang.Exception from label3 to label4 with label5;
    }

    static java.lang.module.ModuleFinder of(jdk.internal.module.SystemModules)
    {
        jdk.internal.module.SystemModules r0;
        java.lang.module.ModuleDescriptor[] r1;
        jdk.internal.module.ModuleTarget[] r2;
        jdk.internal.module.ModuleHashes[] r3;
        jdk.internal.module.ModuleResolution[] r4;
        int i0, i1;
        java.lang.module.ModuleReference[] r5;
        java.util.Map$Entry[] r6;
        java.util.Map r7;
        jdk.internal.module.SystemModuleFinders$SystemModuleFinder $r8;
        java.lang.module.ModuleDescriptor $r9, $r15;
        java.lang.String r10;
        jdk.internal.module.ModuleHashes$HashSupplier r11;
        jdk.internal.module.ModuleResolution $r12;
        jdk.internal.module.ModuleHashes $r13;
        jdk.internal.module.ModuleTarget $r14;
        java.lang.module.ModuleReference r16;
        java.util.Map$Entry $r17;

        r0 := @parameter0: jdk.internal.module.SystemModules;

        r1 = interfaceinvoke r0.<jdk.internal.module.SystemModules: java.lang.module.ModuleDescriptor[] moduleDescriptors()>();

        r2 = interfaceinvoke r0.<jdk.internal.module.SystemModules: jdk.internal.module.ModuleTarget[] moduleTargets()>();

        r3 = interfaceinvoke r0.<jdk.internal.module.SystemModules: jdk.internal.module.ModuleHashes[] moduleHashes()>();

        r4 = interfaceinvoke r0.<jdk.internal.module.SystemModules: jdk.internal.module.ModuleResolution[] moduleResolutions()>();

        i0 = lengthof r1;

        r5 = newarray (java.lang.module.ModuleReference)[i0];

        r6 = newarray (java.util.Map$Entry)[i0];

        r7 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.util.Map generateNameToHash(jdk.internal.module.ModuleHashes[])>(r3);

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        $r9 = r1[i1];

        r10 = virtualinvoke $r9.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        r11 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.ModuleHashes$HashSupplier hashSupplier(java.util.Map,java.lang.String)>(r7, r10);

        $r15 = r1[i1];

        $r14 = r2[i1];

        $r13 = r3[i1];

        $r12 = r4[i1];

        r16 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleReference toModuleReference(java.lang.module.ModuleDescriptor,jdk.internal.module.ModuleTarget,jdk.internal.module.ModuleHashes,jdk.internal.module.ModuleHashes$HashSupplier,jdk.internal.module.ModuleResolution)>($r15, $r14, $r13, r11, $r12);

        r5[i1] = r16;

        $r17 = staticinvoke <java.util.Map: java.util.Map$Entry entry(java.lang.Object,java.lang.Object)>(r10, r16);

        r6[i1] = $r17;

        i1 = i1 + 1;

        goto label1;

     label2:
        $r8 = new jdk.internal.module.SystemModuleFinders$SystemModuleFinder;

        specialinvoke $r8.<jdk.internal.module.SystemModuleFinders$SystemModuleFinder: void <init>(java.lang.module.ModuleReference[],java.util.Map$Entry[])>(r5, r6);

        return $r8;
    }

    public static java.lang.module.ModuleFinder ofSystem()
    {
        java.lang.String r0;
        java.lang.String[] $r1, $r4;
        java.nio.file.Path r2, r13;
        java.nio.file.LinkOption[] $r3, $r5;
        boolean $z0, $z1, $z2;
        jdk.internal.module.ModulePatcher $r6;
        java.nio.file.Path[] $r7;
        java.lang.module.ModuleFinder r8, r11;
        jdk.internal.module.SystemModuleFinders$1 $r9;
        java.lang.InternalError $r10;
        jdk.internal.module.SystemModules r12;

        r11 = <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder cachedSystemModuleFinder>;

        if r11 == null goto label1;

        return r11;

     label1:
        r0 = staticinvoke <jdk.internal.util.StaticProperty: java.lang.String javaHome()>();

        $r1 = newarray (java.lang.String)[2];

        $r1[0] = "lib";

        $r1[1] = "modules";

        r2 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.lang.String,java.lang.String[])>(r0, $r1);

        $r3 = newarray (java.nio.file.LinkOption)[0];

        $z0 = staticinvoke <java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])>(r2, $r3);

        if $z0 == 0 goto label4;

        $z2 = <jdk.internal.module.SystemModuleFinders: boolean USE_FAST_PATH>;

        if $z2 == 0 goto label2;

        r12 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.SystemModules allSystemModules()>();

        if r12 == null goto label2;

        r11 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder of(jdk.internal.module.SystemModules)>(r12);

     label2:
        if r11 != null goto label3;

        r11 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder ofModuleInfos()>();

     label3:
        <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder cachedSystemModuleFinder> = r11;

        return r11;

     label4:
        $r4 = newarray (java.lang.String)[1];

        $r4[0] = "modules";

        r13 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.lang.String,java.lang.String[])>(r0, $r4);

        $r5 = newarray (java.nio.file.LinkOption)[0];

        $z1 = staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r13, $r5);

        if $z1 != 0 goto label5;

        $r10 = new java.lang.InternalError;

        specialinvoke $r10.<java.lang.InternalError: void <init>(java.lang.String)>("Unable to detect the run-time image");

        throw $r10;

     label5:
        $r6 = staticinvoke <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher()>();

        $r7 = newarray (java.nio.file.Path)[1];

        $r7[0] = r13;

        r8 = staticinvoke <jdk.internal.module.ModulePath: java.lang.module.ModuleFinder of(jdk.internal.module.ModulePatcher,java.nio.file.Path[])>($r6, $r7);

        $r9 = new jdk.internal.module.SystemModuleFinders$1;

        specialinvoke $r9.<jdk.internal.module.SystemModuleFinders$1: void <init>(java.lang.module.ModuleFinder)>(r8);

        return $r9;
    }

    private static java.lang.module.ModuleFinder ofModuleInfos()
    {
        java.util.HashMap $r0, $r2, $r6;
        jdk.internal.jimage.ImageReader r4;
        java.util.HashSet $r5;
        java.util.Set $r7, $r19;
        boolean $z0, $z2;
        jdk.internal.module.SystemModuleFinders$SystemModuleFinder $r8;
        java.lang.Object $r9, $r10, $r11, $r20;
        java.lang.module.ModuleDescriptor $r12;
        jdk.internal.module.ModuleTarget $r13;
        jdk.internal.module.ModuleHashes $r14, r28;
        jdk.internal.module.ModuleResolution $r15;
        java.nio.ByteBuffer $r17;
        java.lang.String r21, r25, r34;
        java.util.function.Function $r22;
        java.lang.String[] r24;
        int i0, i1;
        jdk.internal.jimage.ImageLocation r26;
        jdk.internal.module.ModuleInfo$Attributes r27, r35;
        java.util.Iterator r29, r32;
        java.util.Map$Entry r33;
        jdk.internal.module.ModuleHashes$HashSupplier r36;
        java.lang.module.ModuleReference r37;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r4 = staticinvoke <jdk.internal.module.SystemModuleFinders$SystemImage: jdk.internal.jimage.ImageReader reader()>();

        r24 = virtualinvoke r4.<jdk.internal.jimage.ImageReader: java.lang.String[] getModuleNames()>();

        i0 = lengthof r24;

        i1 = 0;

     label1:
        if i1 >= i0 goto label4;

        r25 = r24[i1];

        r26 = virtualinvoke r4.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageLocation findLocation(java.lang.String,java.lang.String)>(r25, "module-info.class");

        $r17 = virtualinvoke r4.<jdk.internal.jimage.ImageReader: java.nio.ByteBuffer getResourceBuffer(jdk.internal.jimage.ImageLocation)>(r26);

        r27 = staticinvoke <jdk.internal.module.ModuleInfo: jdk.internal.module.ModuleInfo$Attributes read(java.nio.ByteBuffer,java.util.function.Supplier)>($r17, null);

        interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, r27);

        r28 = virtualinvoke r27.<jdk.internal.module.ModuleInfo$Attributes: jdk.internal.module.ModuleHashes recordedHashes()>();

        if r28 == null goto label3;

        $r19 = virtualinvoke r28.<jdk.internal.module.ModuleHashes: java.util.Set names()>();

        r29 = interfaceinvoke $r19.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z2 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label3;

        $r20 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r20;

        $r22 = staticinvoke <jdk.internal.module.SystemModuleFinders$lambda_ofModuleInfos_0__89: java.util.function.Function bootstrap$(jdk.internal.module.ModuleHashes,java.lang.String)>(r28, r21);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(r21, $r22);

        goto label2;

     label3:
        i1 = i1 + 1;

        goto label1;

     label4:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r7 = interfaceinvoke $r0.<java.util.Map: java.util.Set entrySet()>();

        r32 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>();

     label5:
        $z0 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r9 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>();

        r33 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getKey()>();

        r34 = (java.lang.String) $r10;

        $r11 = interfaceinvoke r33.<java.util.Map$Entry: java.lang.Object getValue()>();

        r35 = (jdk.internal.module.ModuleInfo$Attributes) $r11;

        r36 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.ModuleHashes$HashSupplier hashSupplier(java.util.Map,java.lang.String)>($r2, r34);

        $r12 = virtualinvoke r35.<jdk.internal.module.ModuleInfo$Attributes: java.lang.module.ModuleDescriptor descriptor()>();

        $r13 = virtualinvoke r35.<jdk.internal.module.ModuleInfo$Attributes: jdk.internal.module.ModuleTarget target()>();

        $r14 = virtualinvoke r35.<jdk.internal.module.ModuleInfo$Attributes: jdk.internal.module.ModuleHashes recordedHashes()>();

        $r15 = virtualinvoke r35.<jdk.internal.module.ModuleInfo$Attributes: jdk.internal.module.ModuleResolution moduleResolution()>();

        r37 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleReference toModuleReference(java.lang.module.ModuleDescriptor,jdk.internal.module.ModuleTarget,jdk.internal.module.ModuleHashes,jdk.internal.module.ModuleHashes$HashSupplier,jdk.internal.module.ModuleResolution)>($r12, $r13, $r14, r36, $r15);

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r37);

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r34, r37);

        goto label5;

     label6:
        $r8 = new jdk.internal.module.SystemModuleFinders$SystemModuleFinder;

        specialinvoke $r8.<jdk.internal.module.SystemModuleFinders$SystemModuleFinder: void <init>(java.util.Set,java.util.Map)>($r5, $r6);

        return $r8;
    }

    static java.lang.module.ModuleReference toModuleReference(java.lang.module.ModuleDescriptor, jdk.internal.module.ModuleTarget, jdk.internal.module.ModuleHashes, jdk.internal.module.ModuleHashes$HashSupplier, jdk.internal.module.ModuleResolution)
    {
        java.lang.module.ModuleDescriptor r0;
        java.lang.String r1, $r2, $r4;
        jdk.internal.access.JavaNetUriAccess $r3;
        java.net.URI r5;
        jdk.internal.module.SystemModuleFinders$2 $r6;
        jdk.internal.module.ModuleReferenceImpl $r8;
        jdk.internal.module.ModuleTarget r9;
        jdk.internal.module.ModuleHashes r10;
        jdk.internal.module.ModuleHashes$HashSupplier r11;
        jdk.internal.module.ModuleResolution r12;
        jdk.internal.module.ModulePatcher $r13;
        java.lang.module.ModuleReference r15;

        r0 := @parameter0: java.lang.module.ModuleDescriptor;

        r9 := @parameter1: jdk.internal.module.ModuleTarget;

        r10 := @parameter2: jdk.internal.module.ModuleHashes;

        r11 := @parameter3: jdk.internal.module.ModuleHashes$HashSupplier;

        r12 := @parameter4: jdk.internal.module.ModuleResolution;

        r1 = virtualinvoke r0.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r3 = <jdk.internal.module.SystemModuleFinders: jdk.internal.access.JavaNetUriAccess JNUA>;

        $r2 = "/";

        $r4 = virtualinvoke $r2.<java.lang.String: java.lang.String concat(java.lang.String)>(r1);

        r5 = interfaceinvoke $r3.<jdk.internal.access.JavaNetUriAccess: java.net.URI create(java.lang.String,java.lang.String)>("jrt", $r4);

        $r6 = new jdk.internal.module.SystemModuleFinders$2;

        specialinvoke $r6.<jdk.internal.module.SystemModuleFinders$2: void <init>(java.lang.String,java.net.URI)>(r1, r5);

        $r8 = new jdk.internal.module.ModuleReferenceImpl;

        specialinvoke $r8.<jdk.internal.module.ModuleReferenceImpl: void <init>(java.lang.module.ModuleDescriptor,java.net.URI,java.util.function.Supplier,jdk.internal.module.ModulePatcher,jdk.internal.module.ModuleTarget,jdk.internal.module.ModuleHashes,jdk.internal.module.ModuleHashes$HashSupplier,jdk.internal.module.ModuleResolution)>(r0, r5, $r6, null, r9, r10, r11, r12);

        $r13 = staticinvoke <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher()>();

        r15 = virtualinvoke $r13.<jdk.internal.module.ModulePatcher: java.lang.module.ModuleReference patchIfNeeded(java.lang.module.ModuleReference)>($r8);

        return r15;
    }

    static java.util.Map generateNameToHash(jdk.internal.module.ModuleHashes[])
    {
        jdk.internal.module.ModuleHashes[] r0;
        int i0, i1;
        jdk.internal.module.ModuleHashes r2;
        java.util.Map $r3, r5, $r6;
        java.util.HashMap $r4;
        boolean z0;

        r0 := @parameter0: jdk.internal.module.ModuleHashes[];

        r5 = null;

        z0 = 0;

        i0 = lengthof r0;

        i1 = 0;

     label1:
        if i1 >= i0 goto label5;

        r2 = r0[i1];

        if r2 == null goto label4;

        if r5 != null goto label2;

        r5 = virtualinvoke r2.<jdk.internal.module.ModuleHashes: java.util.Map hashes()>();

        goto label4;

     label2:
        if z0 != 0 goto label3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>(java.util.Map)>(r5);

        r5 = $r4;

        z0 = 1;

     label3:
        $r3 = virtualinvoke r2.<jdk.internal.module.ModuleHashes: java.util.Map hashes()>();

        interfaceinvoke r5.<java.util.Map: void putAll(java.util.Map)>($r3);

     label4:
        i1 = i1 + 1;

        goto label1;

     label5:
        if r5 == null goto label6;

        $r6 = r5;

        goto label7;

     label6:
        $r6 = staticinvoke <java.util.Map: java.util.Map of()>();

     label7:
        return $r6;
    }

    static jdk.internal.module.ModuleHashes$HashSupplier hashSupplier(java.util.Map, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1;
        java.lang.Object $r2;
        byte[] r3;
        jdk.internal.module.SystemModuleFinders$3 $r4;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (byte[]) $r2;

        if r3 == null goto label1;

        $r4 = new jdk.internal.module.SystemModuleFinders$3;

        specialinvoke $r4.<jdk.internal.module.SystemModuleFinders$3: void <init>(byte[])>(r3);

        return $r4;

     label1:
        return null;
    }

    public static byte[] lambda$ofModuleInfos$0(jdk.internal.module.ModuleHashes, java.lang.String, java.lang.String)
    {
        jdk.internal.module.ModuleHashes r0;
        java.lang.String r1, r3;
        byte[] $r2;

        r0 := @parameter0: jdk.internal.module.ModuleHashes;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r2 = virtualinvoke r0.<jdk.internal.module.ModuleHashes: byte[] hashFor(java.lang.String)>(r1);

        return $r2;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaNetUriAccess $r0;
        java.lang.String r1;
        boolean $z0, $z1, $z2;

        $r0 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetUriAccess getJavaNetUriAccess()>();

        <jdk.internal.module.SystemModuleFinders: jdk.internal.access.JavaNetUriAccess JNUA> = $r0;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jdk.system.module.finder.disableFastPath");

        if r1 != null goto label1;

        <jdk.internal.module.SystemModuleFinders: boolean USE_FAST_PATH> = 1;

        goto label4;

     label1:
        $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label2;

        $z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        <jdk.internal.module.SystemModuleFinders: boolean USE_FAST_PATH> = $z2;

     label4:
        return;
    }
}
