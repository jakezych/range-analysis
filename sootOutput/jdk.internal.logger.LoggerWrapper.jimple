public class jdk.internal.logger.LoggerWrapper extends jdk.internal.logger.AbstractLoggerWrapper
{
    final java.lang.System$Logger wrapped;
    final sun.util.logging.PlatformLogger$Bridge platformProxy;

    public void <init>(java.lang.System$Logger)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger r1, $r4;
        java.lang.Object $r2;
        java.lang.Void $r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger;

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (java.lang.System$Logger) $r2;

        $r3 = (java.lang.Void) null;

        specialinvoke r0.<jdk.internal.logger.LoggerWrapper: void <init>(java.lang.System$Logger,java.lang.Void)>($r4, $r3);

        return;
    }

    void <init>(java.lang.System$Logger, java.lang.Void)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger r1;
        boolean $z0;
        java.lang.Void r3;
        sun.util.logging.PlatformLogger$Bridge $r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger;

        r3 := @parameter1: java.lang.Void;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void <init>()>();

        r0.<jdk.internal.logger.LoggerWrapper: java.lang.System$Logger wrapped> = r1;

        $z0 = r1 instanceof sun.util.logging.PlatformLogger$Bridge;

        if $z0 == 0 goto label1;

        $r4 = (sun.util.logging.PlatformLogger$Bridge) r1;

        goto label2;

     label1:
        $r4 = null;

     label2:
        r0.<jdk.internal.logger.LoggerWrapper: sun.util.logging.PlatformLogger$Bridge platformProxy> = $r4;

        return;
    }

    public final java.lang.System$Logger wrapped()
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger $r1;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        $r1 = r0.<jdk.internal.logger.LoggerWrapper: java.lang.System$Logger wrapped>;

        return $r1;
    }

    public final sun.util.logging.PlatformLogger$Bridge platformProxy()
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Bridge $r1;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        $r1 = r0.<jdk.internal.logger.LoggerWrapper: sun.util.logging.PlatformLogger$Bridge platformProxy>;

        return $r1;
    }

    public volatile sun.util.logging.PlatformLogger$ConfigurableBridge$LoggerConfiguration getLoggerConfiguration()
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$ConfigurableBridge$LoggerConfiguration $r1;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        $r1 = specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: sun.util.logging.PlatformLogger$ConfigurableBridge$LoggerConfiguration getLoggerConfiguration()>();

        return $r1;
    }

    public volatile void logrb(sun.util.logging.PlatformLogger$Level, java.util.ResourceBundle, java.lang.String, java.lang.Object[])
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.util.ResourceBundle r2;
        java.lang.String r3;
        java.lang.Object[] r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.util.ResourceBundle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logrb(sun.util.logging.PlatformLogger$Level,java.util.ResourceBundle,java.lang.String,java.lang.Object[])>(r1, r2, r3, r4);

        return;
    }

    public volatile void logrb(sun.util.logging.PlatformLogger$Level, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.util.ResourceBundle r2;
        java.lang.String r3;
        java.lang.Throwable r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.util.ResourceBundle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logrb(sun.util.logging.PlatformLogger$Level,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)>(r1, r2, r3, r4);

        return;
    }

    public volatile void logrb(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3, r5;
        java.util.ResourceBundle r4;
        java.lang.Throwable r6;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.ResourceBundle;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logrb(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)>(r1, r2, r3, r4, r5, r6);

        return;
    }

    public volatile void logrb(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.util.ResourceBundle, java.lang.String, java.lang.Object[])
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3, r5;
        java.util.ResourceBundle r4;
        java.lang.Object[] r6;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.ResourceBundle;

        r5 := @parameter4: java.lang.String;

        r6 := @parameter5: java.lang.Object[];

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logrb(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.util.ResourceBundle,java.lang.String,java.lang.Object[])>(r1, r2, r3, r4, r5, r6);

        return;
    }

    public volatile void logp(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.lang.Throwable, java.util.function.Supplier)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3;
        java.lang.Throwable r4;
        java.util.function.Supplier r5;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Throwable;

        r5 := @parameter4: java.util.function.Supplier;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logp(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.lang.Throwable,java.util.function.Supplier)>(r1, r2, r3, r4, r5);

        return;
    }

    public volatile void logp(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3, r4;
        java.lang.Throwable r5;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logp(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>(r1, r2, r3, r4, r5);

        return;
    }

    public volatile void logp(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.lang.String, java.lang.Object[])
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3, r4;
        java.lang.Object[] r5;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        r5 := @parameter4: java.lang.Object[];

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logp(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.lang.String,java.lang.Object[])>(r1, r2, r3, r4, r5);

        return;
    }

    public volatile void logp(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.util.function.Supplier)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3;
        java.util.function.Supplier r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.util.function.Supplier;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logp(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.util.function.Supplier)>(r1, r2, r3, r4);

        return;
    }

    public volatile void logp(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.String, java.lang.String)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2, r3, r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.String;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void logp(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, r4);

        return;
    }

    public volatile void log(sun.util.logging.PlatformLogger$Level, java.lang.Throwable, java.util.function.Supplier)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.Throwable r2;
        java.util.function.Supplier r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.Throwable;

        r3 := @parameter2: java.util.function.Supplier;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(sun.util.logging.PlatformLogger$Level,java.lang.Throwable,java.util.function.Supplier)>(r1, r2, r3);

        return;
    }

    public volatile void log(sun.util.logging.PlatformLogger$Level, java.util.function.Supplier)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.util.function.Supplier r2;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.util.function.Supplier;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(sun.util.logging.PlatformLogger$Level,java.util.function.Supplier)>(r1, r2);

        return;
    }

    public volatile void log(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Object[])
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2;
        java.lang.Object[] r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    public volatile void log(sun.util.logging.PlatformLogger$Level, java.lang.String, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2;
        java.lang.Throwable r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(sun.util.logging.PlatformLogger$Level,java.lang.String,java.lang.Throwable)>(r1, r2, r3);

        return;
    }

    public volatile void log(sun.util.logging.PlatformLogger$Level, java.lang.String)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        java.lang.String r2;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(sun.util.logging.PlatformLogger$Level,java.lang.String)>(r1, r2);

        return;
    }

    public volatile boolean isEnabled()
    {
        jdk.internal.logger.LoggerWrapper r0;
        boolean $z0;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        $z0 = specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: boolean isEnabled()>();

        return $z0;
    }

    public volatile boolean isLoggable(sun.util.logging.PlatformLogger$Level)
    {
        jdk.internal.logger.LoggerWrapper r0;
        sun.util.logging.PlatformLogger$Level r1;
        boolean $z0;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: sun.util.logging.PlatformLogger$Level;

        $z0 = specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: boolean isLoggable(sun.util.logging.PlatformLogger$Level)>(r1);

        return $z0;
    }

    public volatile void log(java.lang.System$Logger$Level, java.util.ResourceBundle, java.lang.String, java.lang.Object[])
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.util.ResourceBundle r2;
        java.lang.String r3;
        java.lang.Object[] r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.util.ResourceBundle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Object[];

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.util.ResourceBundle,java.lang.String,java.lang.Object[])>(r1, r2, r3, r4);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.util.ResourceBundle, java.lang.String, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.util.ResourceBundle r2;
        java.lang.String r3;
        java.lang.Throwable r4;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.util.ResourceBundle;

        r3 := @parameter2: java.lang.String;

        r4 := @parameter3: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.util.ResourceBundle,java.lang.String,java.lang.Throwable)>(r1, r2, r3, r4);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.lang.String, java.lang.Object[])
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.lang.String r2;
        java.lang.Object[] r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Object[];

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.lang.String,java.lang.Object[])>(r1, r2, r3);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.util.function.Supplier, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.util.function.Supplier r2;
        java.lang.Throwable r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.util.function.Supplier;

        r3 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.util.function.Supplier,java.lang.Throwable)>(r1, r2, r3);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.lang.String, java.lang.Throwable)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.lang.String r2;
        java.lang.Throwable r3;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Throwable;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.lang.String,java.lang.Throwable)>(r1, r2, r3);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.lang.Object)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.lang.Object r2;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.lang.Object;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.lang.Object)>(r1, r2);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.util.function.Supplier)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.util.function.Supplier r2;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.util.function.Supplier;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.util.function.Supplier)>(r1, r2);

        return;
    }

    public volatile void log(java.lang.System$Logger$Level, java.lang.String)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        java.lang.String r2;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: void log(java.lang.System$Logger$Level,java.lang.String)>(r1, r2);

        return;
    }

    public volatile boolean isLoggable(java.lang.System$Logger$Level)
    {
        jdk.internal.logger.LoggerWrapper r0;
        java.lang.System$Logger$Level r1;
        boolean $z0;

        r0 := @this: jdk.internal.logger.LoggerWrapper;

        r1 := @parameter0: java.lang.System$Logger$Level;

        $z0 = specialinvoke r0.<jdk.internal.logger.AbstractLoggerWrapper: boolean isLoggable(java.lang.System$Logger$Level)>(r1);

        return $z0;
    }
}
