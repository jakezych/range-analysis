public class jdk.internal.loader.URLClassPath extends java.lang.Object
{
    private static final java.lang.String USER_AGENT_JAVA_VERSION;
    private static final java.lang.String JAVA_VERSION;
    private static final boolean DEBUG;
    private static final boolean DISABLE_JAR_CHECKING;
    private static final boolean DISABLE_ACC_CHECKING;
    private static final boolean DISABLE_CP_URL_CHECK;
    private static final boolean DEBUG_CP_URL_CHECK;
    private final java.util.ArrayList path;
    private final java.util.ArrayDeque unopenedUrls;
    private final java.util.ArrayList loaders;
    private final java.util.HashMap lmap;
    private final java.net.URLStreamHandler jarHandler;
    private boolean closed;
    private final java.security.AccessControlContext acc;
    private static final jdk.internal.access.JavaNetURLAccess JNUA;

    public void <init>(java.net.URL[], java.net.URLStreamHandlerFactory, java.security.AccessControlContext)
    {
        jdk.internal.loader.URLClassPath r0;
        java.util.ArrayList $r1, $r3;
        java.util.HashMap $r2;
        java.net.URL[] r4;
        int $i0, $i1, i2, i3;
        java.util.ArrayDeque $r6;
        java.net.URLStreamHandlerFactory r9;
        boolean $z0;
        java.security.AccessControlContext r10;
        java.net.URLStreamHandler $r11;
        java.net.URL r12;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r4 := @parameter0: java.net.URL[];

        r9 := @parameter1: java.net.URLStreamHandlerFactory;

        r10 := @parameter2: java.security.AccessControlContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList loaders> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<jdk.internal.loader.URLClassPath: java.util.HashMap lmap> = $r2;

        r0.<jdk.internal.loader.URLClassPath: boolean closed> = 0;

        $r3 = new java.util.ArrayList;

        $i0 = lengthof r4;

        specialinvoke $r3.<java.util.ArrayList: void <init>(int)>($i0);

        $r6 = new java.util.ArrayDeque;

        $i1 = lengthof r4;

        specialinvoke $r6.<java.util.ArrayDeque: void <init>(int)>($i1);

        i2 = lengthof r4;

        i3 = 0;

     label1:
        if i3 >= i2 goto label2;

        r12 = r4[i3];

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r12);

        virtualinvoke $r6.<java.util.ArrayDeque: boolean add(java.lang.Object)>(r12);

        i3 = i3 + 1;

        goto label1;

     label2:
        r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList path> = $r3;

        r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls> = $r6;

        if r9 == null goto label3;

        $r11 = interfaceinvoke r9.<java.net.URLStreamHandlerFactory: java.net.URLStreamHandler createURLStreamHandler(java.lang.String)>("jar");

        r0.<jdk.internal.loader.URLClassPath: java.net.URLStreamHandler jarHandler> = $r11;

        goto label4;

     label3:
        r0.<jdk.internal.loader.URLClassPath: java.net.URLStreamHandler jarHandler> = null;

     label4:
        $z0 = <jdk.internal.loader.URLClassPath: boolean DISABLE_ACC_CHECKING>;

        if $z0 == 0 goto label5;

        r0.<jdk.internal.loader.URLClassPath: java.security.AccessControlContext acc> = null;

        goto label6;

     label5:
        r0.<jdk.internal.loader.URLClassPath: java.security.AccessControlContext acc> = r10;

     label6:
        return;
    }

    public void <init>(java.net.URL[], java.security.AccessControlContext)
    {
        jdk.internal.loader.URLClassPath r0;
        java.net.URL[] r1;
        java.security.AccessControlContext r2;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r1 := @parameter0: java.net.URL[];

        r2 := @parameter1: java.security.AccessControlContext;

        specialinvoke r0.<jdk.internal.loader.URLClassPath: void <init>(java.net.URL[],java.net.URLStreamHandlerFactory,java.security.AccessControlContext)>(r1, null, r2);

        return;
    }

    void <init>(java.lang.String, boolean)
    {
        jdk.internal.loader.URLClassPath r0;
        java.util.ArrayList $r1, $r3;
        java.util.HashMap $r2;
        java.lang.String r5, $r9, $r11, r12;
        java.util.ArrayDeque $r6;
        java.lang.Object $r7;
        java.net.URL $r8, r10;
        boolean $z1, z3;
        int i0, i1, i2, i3;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r5 := @parameter0: java.lang.String;

        z3 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList loaders> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<jdk.internal.loader.URLClassPath: java.util.HashMap lmap> = $r2;

        r0.<jdk.internal.loader.URLClassPath: boolean closed> = 0;

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        if r5 == null goto label6;

        i0 = 0;

     label1:
        $r9 = <java.io.File: java.lang.String pathSeparator>;

        i1 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String,int)>($r9, i0);

        if i1 != -1 goto label2;

        $r11 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>(i0);

        goto label3;

     label2:
        $r11 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(i0, i1);

     label3:
        r12 = $r11;

        $z1 = virtualinvoke $r11.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label4;

        if z3 != 0 goto label5;

     label4:
        r10 = staticinvoke <jdk.internal.loader.URLClassPath: java.net.URL toFileURL(java.lang.String)>(r12);

        if r10 == null goto label5;

        virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r10);

     label5:
        i0 = i1 + 1;

        if i1 != -1 goto label1;

     label6:
        i2 = virtualinvoke $r3.<java.util.ArrayList: int size()>();

        $r6 = new java.util.ArrayDeque;

        specialinvoke $r6.<java.util.ArrayDeque: void <init>(int)>(i2);

        i3 = 0;

     label7:
        if i3 >= i2 goto label8;

        $r7 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i3);

        $r8 = (java.net.URL) $r7;

        virtualinvoke $r6.<java.util.ArrayDeque: boolean add(java.lang.Object)>($r8);

        i3 = i3 + 1;

        goto label7;

     label8:
        r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls> = $r6;

        r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList path> = $r3;

        r0.<jdk.internal.loader.URLClassPath: java.net.URLStreamHandler jarHandler> = null;

        r0.<jdk.internal.loader.URLClassPath: java.security.AccessControlContext acc> = null;

        return;
    }

    public synchronized java.util.List closeLoaders()
    {
        jdk.internal.loader.URLClassPath r0;
        boolean $z0, $z1;
        java.util.LinkedList $r1;
        java.util.ArrayList $r3;
        java.util.Iterator r4;
        java.lang.Object $r5;
        jdk.internal.loader.URLClassPath$Loader r6;
        java.util.List $r7;
        java.io.IOException $r8;

        r0 := @this: jdk.internal.loader.URLClassPath;

        $z0 = r0.<jdk.internal.loader.URLClassPath: boolean closed>;

        if $z0 == 0 goto label1;

        $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>();

        return $r7;

     label1:
        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        $r3 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList loaders>;

        r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label7;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (jdk.internal.loader.URLClassPath$Loader) $r5;

     label3:
        virtualinvoke r6.<jdk.internal.loader.URLClassPath$Loader: void close()>();

     label4:
        goto label6;

     label5:
        $r8 := @caughtexception;

        interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8);

     label6:
        goto label2;

     label7:
        r0.<jdk.internal.loader.URLClassPath: boolean closed> = 1;

        return $r1;

        catch java.io.IOException from label3 to label4 with label5;
    }

    public synchronized void addURL(java.net.URL)
    {
        jdk.internal.loader.URLClassPath r0;
        boolean $z0, $z1;
        java.net.URL r1;
        java.util.ArrayDeque $r2, $r5;
        java.util.ArrayList $r4, $r6;
        java.lang.Throwable $r7;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r1 := @parameter0: java.net.URL;

        $z0 = r0.<jdk.internal.loader.URLClassPath: boolean closed>;

        if $z0 != 0 goto label1;

        if r1 != null goto label2;

     label1:
        return;

     label2:
        $r2 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        entermonitor $r2;

     label3:
        $r4 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList path>;

        $z1 = virtualinvoke $r4.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1);

        if $z1 != 0 goto label4;

        $r5 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        virtualinvoke $r5.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r1);

        $r6 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList path>;

        virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r1);

     label4:
        exitmonitor $r2;

     label5:
        goto label8;

     label6:
        $r7 := @caughtexception;

        exitmonitor $r2;

     label7:
        throw $r7;

     label8:
        return;

        catch java.lang.Throwable from label3 to label5 with label6;
        catch java.lang.Throwable from label6 to label7 with label6;
    }

    public void addFile(java.lang.String)
    {
        java.lang.String r0;
        java.net.URL r1;
        jdk.internal.loader.URLClassPath r2;

        r2 := @this: jdk.internal.loader.URLClassPath;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <jdk.internal.loader.URLClassPath: java.net.URL toFileURL(java.lang.String)>(r0);

        if r1 == null goto label1;

        virtualinvoke r2.<jdk.internal.loader.URLClassPath: void addURL(java.net.URL)>(r1);

     label1:
        return;
    }

    private static java.net.URL toFileURL(java.lang.String)
    {
        java.io.File $r0, r4;
        java.lang.String r1;
        java.net.URL $r2;
        java.io.IOException $r3;

        r1 := @parameter0: java.lang.String;

     label1:
        $r0 = new java.io.File;

        specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1);

        r4 = virtualinvoke $r0.<java.io.File: java.io.File getCanonicalFile()>();

        $r2 = staticinvoke <sun.net.www.ParseUtil: java.net.URL fileToEncodedURL(java.io.File)>(r4);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        return null;

        catch java.io.IOException from label1 to label2 with label3;
    }

    public java.net.URL[] getURLs()
    {
        jdk.internal.loader.URLClassPath r0;
        java.util.ArrayDeque $r1;
        java.net.URL[] $r3, $r6;
        java.util.ArrayList $r4;
        java.lang.Object[] $r5;
        java.lang.Throwable $r7;

        r0 := @this: jdk.internal.loader.URLClassPath;

        $r1 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        entermonitor $r1;

     label1:
        $r4 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList path>;

        $r3 = newarray (java.net.URL)[0];

        $r5 = virtualinvoke $r4.<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>($r3);

        $r6 = (java.net.URL[]) $r5;

        exitmonitor $r1;

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        exitmonitor $r1;

     label4:
        throw $r7;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.net.URL findResource(java.lang.String, boolean)
    {
        jdk.internal.loader.URLClassPath r0;
        jdk.internal.loader.URLClassPath$Loader $r1;
        java.lang.String r3;
        boolean z0;
        java.net.URL r4;
        int i0;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r3 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        i0 = 0;

     label1:
        $r1 = virtualinvoke r0.<jdk.internal.loader.URLClassPath: jdk.internal.loader.URLClassPath$Loader getLoader(int)>(i0);

        if $r1 == null goto label3;

        r4 = virtualinvoke $r1.<jdk.internal.loader.URLClassPath$Loader: java.net.URL findResource(java.lang.String,boolean)>(r3, z0);

        if r4 == null goto label2;

        return r4;

     label2:
        i0 = i0 + 1;

        goto label1;

     label3:
        return null;
    }

    public jdk.internal.loader.Resource getResource(java.lang.String, boolean)
    {
        boolean $z0, z1;
        jdk.internal.loader.URLClassPath r0;
        java.lang.String r2, $r9;
        jdk.internal.loader.Resource r3;
        java.lang.StringBuilder $r4, $r6, $r7, $r8;
        java.io.PrintStream $r5;
        int i0;
        jdk.internal.loader.URLClassPath$Loader $r10;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r2 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        $z0 = <jdk.internal.loader.URLClassPath: boolean DEBUG>;

        if $z0 == 0 goto label1;

        $r5 = <java.lang.System: java.io.PrintStream err>;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("URLClassPath.getResource(\"");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\")");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9);

     label1:
        i0 = 0;

     label2:
        $r10 = virtualinvoke r0.<jdk.internal.loader.URLClassPath: jdk.internal.loader.URLClassPath$Loader getLoader(int)>(i0);

        if $r10 == null goto label4;

        r3 = virtualinvoke $r10.<jdk.internal.loader.URLClassPath$Loader: jdk.internal.loader.Resource getResource(java.lang.String,boolean)>(r2, z1);

        if r3 == null goto label3;

        return r3;

     label3:
        i0 = i0 + 1;

        goto label2;

     label4:
        return null;
    }

    public java.util.Enumeration findResources(java.lang.String, boolean)
    {
        jdk.internal.loader.URLClassPath$1 $r0;
        jdk.internal.loader.URLClassPath r1;
        java.lang.String r2;
        boolean z0;

        r1 := @this: jdk.internal.loader.URLClassPath;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new jdk.internal.loader.URLClassPath$1;

        specialinvoke $r0.<jdk.internal.loader.URLClassPath$1: void <init>(jdk.internal.loader.URLClassPath,java.lang.String,boolean)>(r1, r2, z0);

        return $r0;
    }

    public jdk.internal.loader.Resource getResource(java.lang.String)
    {
        jdk.internal.loader.URLClassPath r0;
        java.lang.String r1;
        jdk.internal.loader.Resource $r2;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jdk.internal.loader.URLClassPath: jdk.internal.loader.Resource getResource(java.lang.String,boolean)>(r1, 1);

        return $r2;
    }

    public java.util.Enumeration getResources(java.lang.String, boolean)
    {
        jdk.internal.loader.URLClassPath$2 $r0;
        jdk.internal.loader.URLClassPath r1;
        java.lang.String r2;
        boolean z0;

        r1 := @this: jdk.internal.loader.URLClassPath;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        $r0 = new jdk.internal.loader.URLClassPath$2;

        specialinvoke $r0.<jdk.internal.loader.URLClassPath$2: void <init>(jdk.internal.loader.URLClassPath,java.lang.String,boolean)>(r1, r2, z0);

        return $r0;
    }

    public java.util.Enumeration getResources(java.lang.String)
    {
        jdk.internal.loader.URLClassPath r0;
        java.lang.String r1;
        java.util.Enumeration $r2;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jdk.internal.loader.URLClassPath: java.util.Enumeration getResources(java.lang.String,boolean)>(r1, 1);

        return $r2;
    }

    private synchronized jdk.internal.loader.URLClassPath$Loader getLoader(int)
    {
        jdk.internal.loader.URLClassPath r0;
        boolean $z0, $z1, $z3;
        int i0, $i1, $i2;
        java.util.ArrayList $r1, $r9, $r22;
        java.lang.Object $r2, $r6;
        jdk.internal.loader.URLClassPath$Loader $r3, r26;
        java.util.ArrayDeque $r4, $r5;
        java.net.URL r7;
        java.util.HashMap $r8, $r10;
        java.lang.SecurityException $r12;
        java.lang.StringBuilder $r13, $r15, $r16, $r17, $r18;
        java.io.PrintStream $r14;
        java.lang.String $r19, r25;
        java.io.IOException $r20;
        java.lang.Throwable $r21;
        java.net.URL[] r27;

        r0 := @this: jdk.internal.loader.URLClassPath;

        i0 := @parameter0: int;

        $z0 = r0.<jdk.internal.loader.URLClassPath: boolean closed>;

        if $z0 == 0 goto label01;

        return null;

     label01:
        $r22 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList loaders>;

        $i1 = virtualinvoke $r22.<java.util.ArrayList: int size()>();

        $i2 = i0 + 1;

        if $i1 >= $i2 goto label15;

        $r4 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        entermonitor $r4;

     label02:
        $r5 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        $r6 = virtualinvoke $r5.<java.util.ArrayDeque: java.lang.Object pollFirst()>();

        r7 = (java.net.URL) $r6;

        if r7 != null goto label04;

        exitmonitor $r4;

     label03:
        return null;

     label04:
        exitmonitor $r4;

     label05:
        goto label08;

     label06:
        $r21 := @caughtexception;

        exitmonitor $r4;

     label07:
        throw $r21;

     label08:
        r25 = staticinvoke <sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>(r7);

        $r8 = r0.<jdk.internal.loader.URLClassPath: java.util.HashMap lmap>;

        $z1 = virtualinvoke $r8.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r25);

        if $z1 == 0 goto label09;

        goto label01;

     label09:
        r26 = virtualinvoke r0.<jdk.internal.loader.URLClassPath: jdk.internal.loader.URLClassPath$Loader getLoader(java.net.URL)>(r7);

        r27 = virtualinvoke r26.<jdk.internal.loader.URLClassPath$Loader: java.net.URL[] getClassPath()>();

        if r27 == null goto label10;

        virtualinvoke r0.<jdk.internal.loader.URLClassPath: void push(java.net.URL[])>(r27);

     label10:
        goto label14;

     label11:
        $r20 := @caughtexception;

        goto label01;

     label12:
        $r12 := @caughtexception;

        $z3 = <jdk.internal.loader.URLClassPath: boolean DEBUG>;

        if $z3 == 0 goto label13;

        $r14 = <java.lang.System: java.io.PrintStream err>;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Failed to access ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r19);

     label13:
        goto label01;

     label14:
        $r9 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList loaders>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r26);

        $r10 = r0.<jdk.internal.loader.URLClassPath: java.util.HashMap lmap>;

        virtualinvoke $r10.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r25, r26);

        goto label01;

     label15:
        $r1 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayList loaders>;

        $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0);

        $r3 = (jdk.internal.loader.URLClassPath$Loader) $r2;

        return $r3;

        catch java.lang.Throwable from label02 to label03 with label06;
        catch java.lang.Throwable from label04 to label05 with label06;
        catch java.lang.Throwable from label06 to label07 with label06;
        catch java.io.IOException from label09 to label10 with label11;
        catch java.lang.SecurityException from label09 to label10 with label12;
    }

    private jdk.internal.loader.URLClassPath$Loader getLoader(java.net.URL) throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$3 $r0;
        jdk.internal.loader.URLClassPath r1;
        java.net.URL r2;
        java.security.AccessControlContext $r3;
        java.lang.Object $r4;
        jdk.internal.loader.URLClassPath$Loader $r5;
        java.security.PrivilegedActionException $r6;
        java.lang.Exception $r8;
        java.io.IOException $r9;

        r1 := @this: jdk.internal.loader.URLClassPath;

        r2 := @parameter0: java.net.URL;

     label1:
        $r0 = new jdk.internal.loader.URLClassPath$3;

        specialinvoke $r0.<jdk.internal.loader.URLClassPath$3: void <init>(jdk.internal.loader.URLClassPath,java.net.URL)>(r1, r2);

        $r3 = r1.<jdk.internal.loader.URLClassPath: java.security.AccessControlContext acc>;

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r0, $r3);

        $r5 = (jdk.internal.loader.URLClassPath$Loader) $r4;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        $r8 = virtualinvoke $r6.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        $r9 = (java.io.IOException) $r8;

        throw $r9;

        catch java.security.PrivilegedActionException from label1 to label2 with label3;
    }

    private static boolean isDefaultJarHandler(java.net.URL)
    {
        java.net.URL r0;
        jdk.internal.access.JavaNetURLAccess $r1;
        java.net.URLStreamHandler r2;
        boolean $z0;

        r0 := @parameter0: java.net.URL;

        $r1 = <jdk.internal.loader.URLClassPath: jdk.internal.access.JavaNetURLAccess JNUA>;

        r2 = interfaceinvoke $r1.<jdk.internal.access.JavaNetURLAccess: java.net.URLStreamHandler getHandler(java.net.URL)>(r0);

        $z0 = r2 instanceof sun.net.www.protocol.jar.Handler;

        return $z0;
    }

    private void push(java.net.URL[])
    {
        jdk.internal.loader.URLClassPath r0;
        java.util.ArrayDeque $r1, $r5;
        java.net.URL[] r3;
        int $i0, i1;
        java.net.URL $r4;
        java.lang.Throwable $r6;

        r0 := @this: jdk.internal.loader.URLClassPath;

        r3 := @parameter0: java.net.URL[];

        $r1 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        entermonitor $r1;

     label1:
        $i0 = lengthof r3;

        i1 = $i0 - 1;

     label2:
        if i1 < 0 goto label3;

        $r5 = r0.<jdk.internal.loader.URLClassPath: java.util.ArrayDeque unopenedUrls>;

        $r4 = r3[i1];

        virtualinvoke $r5.<java.util.ArrayDeque: void addFirst(java.lang.Object)>($r4);

        i1 = i1 + -1;

        goto label2;

     label3:
        exitmonitor $r1;

     label4:
        goto label7;

     label5:
        $r6 := @caughtexception;

        exitmonitor $r1;

     label6:
        throw $r6;

     label7:
        return;

        catch java.lang.Throwable from label1 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    public static java.net.URL checkURL(java.net.URL)
    {
        java.net.URL r0;
        java.lang.Exception $r1;

        r0 := @parameter0: java.net.URL;

        if r0 == null goto label4;

     label1:
        staticinvoke <jdk.internal.loader.URLClassPath: void check(java.net.URL)>(r0);

     label2:
        goto label4;

     label3:
        $r1 := @caughtexception;

        return null;

     label4:
        return r0;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void check(java.net.URL) throws java.io.IOException
    {
        java.lang.SecurityManager r0;
        java.net.URL r1, r11;
        java.net.URLConnection r2;
        java.security.Permission r3;
        java.lang.SecurityException $r4;
        boolean $z0, $z1, $z2;
        java.lang.String $r6, $r7, $r9, $r10;
        int $i0, $i1, $i2;
        java.net.JarURLConnection $r8;

        r1 := @parameter0: java.net.URL;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label7;

        r2 = virtualinvoke r1.<java.net.URL: java.net.URLConnection openConnection()>();

        r3 = virtualinvoke r2.<java.net.URLConnection: java.security.Permission getPermission()>();

        if r3 == null goto label7;

     label1:
        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>(r3);

     label2:
        goto label7;

     label3:
        $r4 := @caughtexception;

        $z0 = r3 instanceof java.io.FilePermission;

        if $z0 == 0 goto label4;

        $r9 = virtualinvoke r3.<java.security.Permission: java.lang.String getActions()>();

        $i2 = virtualinvoke $r9.<java.lang.String: int indexOf(java.lang.String)>("read");

        if $i2 == -1 goto label4;

        $r10 = virtualinvoke r3.<java.security.Permission: java.lang.String getName()>();

        virtualinvoke r0.<java.lang.SecurityManager: void checkRead(java.lang.String)>($r10);

        goto label7;

     label4:
        $z1 = r3 instanceof java.net.SocketPermission;

        if $z1 == 0 goto label6;

        $r6 = virtualinvoke r3.<java.security.Permission: java.lang.String getActions()>();

        $i0 = virtualinvoke $r6.<java.lang.String: int indexOf(java.lang.String)>("connect");

        if $i0 == -1 goto label6;

        r11 = r1;

        $z2 = r2 instanceof java.net.JarURLConnection;

        if $z2 == 0 goto label5;

        $r8 = (java.net.JarURLConnection) r2;

        r11 = virtualinvoke $r8.<java.net.JarURLConnection: java.net.URL getJarFileURL()>();

     label5:
        $r7 = virtualinvoke r11.<java.net.URL: java.lang.String getHost()>();

        $i1 = virtualinvoke r11.<java.net.URL: int getPort()>();

        virtualinvoke r0.<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>($r7, $i1);

        goto label7;

     label6:
        throw $r4;

     label7:
        return;

        catch java.lang.SecurityException from label1 to label2 with label3;
    }

    static void <clinit>()
    {
        java.util.Properties r0;
        java.lang.String $r1, $r2, r3, r4, r5, r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        jdk.internal.access.JavaNetURLAccess $r7;

        <jdk.internal.loader.URLClassPath: java.lang.String USER_AGENT_JAVA_VERSION> = "UA-Java-Version";

        r0 = staticinvoke <sun.security.action.GetPropertyAction: java.util.Properties privilegedGetProperties()>();

        $r1 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("java.version");

        <jdk.internal.loader.URLClassPath: java.lang.String JAVA_VERSION> = $r1;

        $r2 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("sun.misc.URLClassPath.debug");

        if $r2 == null goto label01;

        $z8 = 1;

        goto label02;

     label01:
        $z8 = 0;

     label02:
        <jdk.internal.loader.URLClassPath: boolean DEBUG> = $z8;

        r3 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("sun.misc.URLClassPath.disableJarChecking");

        if r3 == null goto label05;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z6 != 0 goto label03;

        $z7 = virtualinvoke r3.<java.lang.String: boolean isEmpty()>();

        if $z7 == 0 goto label04;

     label03:
        $z9 = 1;

        goto label06;

     label04:
        $z9 = 0;

        goto label06;

     label05:
        $z9 = 0;

     label06:
        <jdk.internal.loader.URLClassPath: boolean DISABLE_JAR_CHECKING> = $z9;

        r4 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("jdk.net.URLClassPath.disableRestrictedPermissions");

        if r4 == null goto label09;

        $z4 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z4 != 0 goto label07;

        $z5 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label08;

     label07:
        $z10 = 1;

        goto label10;

     label08:
        $z10 = 0;

        goto label10;

     label09:
        $z10 = 0;

     label10:
        <jdk.internal.loader.URLClassPath: boolean DISABLE_ACC_CHECKING> = $z10;

        r5 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("jdk.net.URLClassPath.disableClassPathURLCheck");

        if r5 == null goto label13;

        $z2 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z2 != 0 goto label11;

        $z3 = virtualinvoke r5.<java.lang.String: boolean isEmpty()>();

        if $z3 == 0 goto label12;

     label11:
        $z11 = 1;

        goto label14;

     label12:
        $z11 = 0;

        goto label14;

     label13:
        $z11 = 0;

     label14:
        <jdk.internal.loader.URLClassPath: boolean DISABLE_CP_URL_CHECK> = $z11;

        r6 = virtualinvoke r0.<java.util.Properties: java.lang.String getProperty(java.lang.String)>("jdk.net.URLClassPath.showIgnoredClassPathEntries");

        if r6 == null goto label17;

        $z0 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("true");

        if $z0 != 0 goto label15;

        $z1 = virtualinvoke r6.<java.lang.String: boolean isEmpty()>();

        if $z1 == 0 goto label16;

     label15:
        $z12 = 1;

        goto label18;

     label16:
        $z12 = 0;

        goto label18;

     label17:
        $z12 = 0;

     label18:
        <jdk.internal.loader.URLClassPath: boolean DEBUG_CP_URL_CHECK> = $z12;

        $r7 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaNetURLAccess getJavaNetURLAccess()>();

        <jdk.internal.loader.URLClassPath: jdk.internal.access.JavaNetURLAccess JNUA> = $r7;

        return;
    }
}
