class jdk.internal.module.SystemModuleFinders$SystemModuleReader extends java.lang.Object implements java.lang.module.ModuleReader
{
    private final java.lang.String module;
    private volatile boolean closed;

    private static void checkPermissionToConnect(java.net.URI)
    {
        java.lang.SecurityManager r0;
        java.net.URI r1;
        java.net.URL $r2;
        java.security.Permission $r3;
        java.io.IOException $r4;
        java.io.UncheckedIOException $r5;
        java.net.URLConnection r6;

        r1 := @parameter0: java.net.URI;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label4;

     label1:
        $r2 = virtualinvoke r1.<java.net.URI: java.net.URL toURL()>();

        r6 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r3 = virtualinvoke r6.<java.net.URLConnection: java.security.Permission getPermission()>();

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r3);

     label2:
        goto label4;

     label3:
        $r4 := @caughtexception;

        $r5 = new java.io.UncheckedIOException;

        specialinvoke $r5.<java.io.UncheckedIOException: void <init>(java.io.IOException)>($r4);

        throw $r5;

     label4:
        return;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void <init>(java.lang.String, java.net.URI)
    {
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r0;
        java.net.URI r1;
        java.lang.String r2;

        r0 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.net.URI;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        staticinvoke <jdk.internal.module.SystemModuleFinders$SystemModuleReader: void checkPermissionToConnect(java.net.URI)>(r1);

        r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: java.lang.String module> = r2;

        return;
    }

    private jdk.internal.jimage.ImageLocation findImageLocation(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0, $r4;
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r2;
        boolean $z0;
        jdk.internal.jimage.ImageReader r3;
        jdk.internal.jimage.ImageLocation $r5;
        java.io.IOException $r6;

        r2 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $z0 = r2.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r6 = new java.io.IOException;

        specialinvoke $r6.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $r6;

     label1:
        r3 = staticinvoke <jdk.internal.module.SystemModuleFinders$SystemImage: jdk.internal.jimage.ImageReader reader()>();

        if r3 == null goto label2;

        $r4 = r2.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: java.lang.String module>;

        $r5 = virtualinvoke r3.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageLocation findLocation(java.lang.String,java.lang.String)>($r4, r0);

        return $r5;

     label2:
        return null;
    }

    public java.util.Optional find(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r0;
        java.lang.String r1, $r6, $r10;
        jdk.internal.jimage.ImageLocation r2;
        java.util.Optional $r3, $r12;
        java.lang.StringBuilder $r4, $r5, $r7, $r8, $r9;
        java.net.URI r11;

        r0 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: jdk.internal.jimage.ImageLocation findImageLocation(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jrt:/");

        $r6 = r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: java.lang.String module>;

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        r11 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r10);

        $r12 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>(r11);

        return $r12;

     label1:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    public java.util.Optional open(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r0;
        java.lang.String r1;
        java.util.Optional $r2, $r4;
        java.util.function.Function $r3;

        r0 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: java.util.Optional read(java.lang.String)>(r1);

        $r3 = staticinvoke <jdk.internal.module.SystemModuleFinders$SystemModuleReader$toInputStream__145: java.util.function.Function bootstrap$(jdk.internal.module.SystemModuleFinders$SystemModuleReader)>(r0);

        $r4 = virtualinvoke $r2.<java.util.Optional: java.util.Optional map(java.util.function.Function)>($r3);

        return $r4;
    }

    public java.io.InputStream toInputStream(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int i0;
        byte[] r1;
        java.io.ByteArrayInputStream $r3;
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r5;
        java.lang.Throwable $r6;

        r5 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r0 := @parameter0: java.nio.ByteBuffer;

     label1:
        i0 = virtualinvoke r0.<java.nio.ByteBuffer: int remaining()>();

        r1 = newarray (byte)[i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r1);

        $r3 = new java.io.ByteArrayInputStream;

        specialinvoke $r3.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1);

     label2:
        virtualinvoke r5.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: void release(java.nio.ByteBuffer)>(r0);

        return $r3;

     label3:
        $r6 := @caughtexception;

     label4:
        virtualinvoke r5.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: void release(java.nio.ByteBuffer)>(r0);

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    public java.util.Optional read(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r0;
        java.lang.String r1;
        jdk.internal.jimage.ImageLocation r2;
        java.util.Optional $r3, $r6;
        jdk.internal.jimage.ImageReader $r4;
        java.nio.ByteBuffer $r5;

        r0 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: jdk.internal.jimage.ImageLocation findImageLocation(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r4 = staticinvoke <jdk.internal.module.SystemModuleFinders$SystemImage: jdk.internal.jimage.ImageReader reader()>();

        $r5 = virtualinvoke $r4.<jdk.internal.jimage.ImageReader: java.nio.ByteBuffer getResourceBuffer(jdk.internal.jimage.ImageLocation)>(r2);

        $r6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r5);

        return $r6;

     label1:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    public void release(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r2;

        r2 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <jdk.internal.jimage.ImageReader: void releaseByteBuffer(java.nio.ByteBuffer)>(r0);

        return;
    }

    public java.util.stream.Stream list() throws java.io.IOException
    {
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r0;
        boolean $z0;
        jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator $r1;
        java.lang.String $r2;
        java.util.stream.Stream $r4;
        java.io.IOException $r5;

        r0 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        $z0 = r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r5 = new java.io.IOException;

        specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $r5;

     label1:
        $r1 = new jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator;

        $r2 = r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: java.lang.String module>;

        specialinvoke $r1.<jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator: void <init>(java.lang.String)>($r2);

        $r4 = staticinvoke <java.util.stream.StreamSupport: java.util.stream.Stream stream(java.util.Spliterator,boolean)>($r1, 0);

        return $r4;
    }

    public void close()
    {
        jdk.internal.module.SystemModuleFinders$SystemModuleReader r0;

        r0 := @this: jdk.internal.module.SystemModuleFinders$SystemModuleReader;

        r0.<jdk.internal.module.SystemModuleFinders$SystemModuleReader: boolean closed> = 1;

        return;
    }
}
