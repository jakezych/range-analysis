public class jdk.internal.math.FloatingDecimal extends java.lang.Object
{
    static final int EXP_SHIFT;
    static final long FRACT_HOB;
    static final long EXP_ONE;
    static final int MAX_SMALL_BIN_EXP;
    static final int MIN_SMALL_BIN_EXP;
    static final int MAX_DECIMAL_DIGITS;
    static final int MAX_DECIMAL_EXPONENT;
    static final int MIN_DECIMAL_EXPONENT;
    static final int BIG_DECIMAL_EXPONENT;
    static final int MAX_NDIGITS;
    static final int SINGLE_EXP_SHIFT;
    static final int SINGLE_FRACT_HOB;
    static final int SINGLE_MAX_DECIMAL_DIGITS;
    static final int SINGLE_MAX_DECIMAL_EXPONENT;
    static final int SINGLE_MIN_DECIMAL_EXPONENT;
    static final int SINGLE_MAX_NDIGITS;
    static final int INT_DECIMAL_DIGITS;
    private static final java.lang.String INFINITY_REP;
    private static final int INFINITY_LENGTH;
    private static final java.lang.String NAN_REP;
    private static final int NAN_LENGTH;
    private static final jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_INFINITY;
    private static final jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_INFINITY;
    private static final jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NOT_A_NUMBER;
    private static final jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_ZERO;
    private static final jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_ZERO;
    private static final java.lang.ThreadLocal threadLocalBinaryToASCIIBuffer;
    static final jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_INFINITY;
    static final jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_INFINITY;
    static final jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NOT_A_NUMBER;
    static final jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_ZERO;
    static final jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_ZERO;
    static final boolean $assertionsDisabled;

    public void <init>()
    {
        jdk.internal.math.FloatingDecimal r0;

        r0 := @this: jdk.internal.math.FloatingDecimal;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String toJavaFormatString(double)
    {
        double d0;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0;
        java.lang.String $r1;

        d0 := @parameter0: double;

        $r0 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(double)>(d0);

        $r1 = interfaceinvoke $r0.<jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter: java.lang.String toJavaFormatString()>();

        return $r1;
    }

    public static java.lang.String toJavaFormatString(float)
    {
        float f0;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0;
        java.lang.String $r1;

        f0 := @parameter0: float;

        $r0 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(float)>(f0);

        $r1 = interfaceinvoke $r0.<jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter: java.lang.String toJavaFormatString()>();

        return $r1;
    }

    public static void appendTo(double, java.lang.Appendable)
    {
        double d0;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0;
        java.lang.Appendable r1;

        d0 := @parameter0: double;

        r1 := @parameter1: java.lang.Appendable;

        $r0 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(double)>(d0);

        interfaceinvoke $r0.<jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter: void appendTo(java.lang.Appendable)>(r1);

        return;
    }

    public static void appendTo(float, java.lang.Appendable)
    {
        float f0;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0;
        java.lang.Appendable r1;

        f0 := @parameter0: float;

        r1 := @parameter1: java.lang.Appendable;

        $r0 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(float)>(f0);

        interfaceinvoke $r0.<jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter: void appendTo(java.lang.Appendable)>(r1);

        return;
    }

    public static double parseDouble(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter $r1;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>(r0);

        $d0 = interfaceinvoke $r1.<jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter: double doubleValue()>();

        return $d0;
    }

    public static float parseFloat(java.lang.String) throws java.lang.NumberFormatException
    {
        java.lang.String r0;
        jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter $r1;
        float $f0;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String)>(r0);

        $f0 = interfaceinvoke $r1.<jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter: float floatValue()>();

        return $f0;
    }

    private static jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer getBinaryToASCIIBuffer()
    {
        java.lang.ThreadLocal $r0;
        java.lang.Object $r1;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer $r2;

        $r0 = <jdk.internal.math.FloatingDecimal: java.lang.ThreadLocal threadLocalBinaryToASCIIBuffer>;

        $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>();

        $r2 = (jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer) $r1;

        return $r2;
    }

    public static jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(double)
    {
        double d0;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0;

        d0 := @parameter0: double;

        $r0 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(double,boolean)>(d0, 1);

        return $r0;
    }

    static jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(double, boolean)
    {
        double d0;
        long l0, $l1, $l3, $l4, l8, l11;
        byte $b2, $b5, $b7;
        boolean z0, z1, $z2;
        int i6, i9, i10, i12, i13;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0, $r1, $r2;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer r3;

        d0 := @parameter0: double;

        z1 := @parameter1: boolean;

        l0 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l1 = l0 & -9223372036854775808L;

        $b2 = $l1 cmp 0L;

        if $b2 == 0 goto label01;

        $z2 = 1;

        goto label02;

     label01:
        $z2 = 0;

     label02:
        z0 = $z2;

        l8 = l0 & 4503599627370495L;

        $l3 = l0 & 9218868437227405312L;

        $l4 = $l3 >> 52;

        i9 = (int) $l4;

        if i9 != 2047 goto label06;

        $b7 = l8 cmp 0L;

        if $b7 != 0 goto label05;

        if $z2 == 0 goto label03;

        $r1 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_INFINITY>;

        goto label04;

     label03:
        $r1 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_INFINITY>;

     label04:
        return $r1;

     label05:
        $r0 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NOT_A_NUMBER>;

        return $r0;

     label06:
        if i9 != 0 goto label10;

        $b5 = l8 cmp 0L;

        if $b5 != 0 goto label09;

        if $z2 == 0 goto label07;

        $r2 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_ZERO>;

        goto label08;

     label07:
        $r2 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_ZERO>;

     label08:
        return $r2;

     label09:
        i10 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l8);

        i6 = i10 - 11;

        l11 = l8 << i6;

        i9 = 1 - i6;

        i12 = 64 - i10;

        goto label11;

     label10:
        l11 = l8 | 4503599627370496L;

        i12 = 53;

     label11:
        i13 = i9 + -1023;

        r3 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer getBinaryToASCIIBuffer()>();

        virtualinvoke r3.<jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer: void setSign(boolean)>(z0);

        virtualinvoke r3.<jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer: void dtoa(int,long,int,boolean)>(i13, l11, i12, z1);

        return r3;
    }

    private static jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter getBinaryToASCIIConverter(float)
    {
        float f0;
        int i0, $i1, $i2, i5, i8, i9, i10, i11, i12, i13;
        boolean z0, $z1;
        long $l3, $l4, $l6;
        byte $b7;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter $r0, $r1, $r2;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer r3;

        f0 := @parameter0: float;

        i0 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i1 = i0 & -2147483648;

        if $i1 == 0 goto label01;

        $z1 = 1;

        goto label02;

     label01:
        $z1 = 0;

     label02:
        z0 = $z1;

        i8 = i0 & 8388607;

        $i2 = i0 & 2139095040;

        i9 = $i2 >> 23;

        if i9 != 255 goto label06;

        $l6 = (long) i8;

        $b7 = $l6 cmp 0L;

        if $b7 != 0 goto label05;

        if $z1 == 0 goto label03;

        $r1 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_INFINITY>;

        goto label04;

     label03:
        $r1 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_INFINITY>;

     label04:
        return $r1;

     label05:
        $r0 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NOT_A_NUMBER>;

        return $r0;

     label06:
        if i9 != 0 goto label10;

        if i8 != 0 goto label09;

        if $z1 == 0 goto label07;

        $r2 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_ZERO>;

        goto label08;

     label07:
        $r2 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_ZERO>;

     label08:
        return $r2;

     label09:
        i10 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i8);

        i5 = i10 - 8;

        i11 = i8 << i5;

        i9 = 1 - i5;

        i12 = 32 - i10;

        goto label11;

     label10:
        i11 = i8 | 8388608;

        i12 = 24;

     label11:
        i13 = i9 + -127;

        r3 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer getBinaryToASCIIBuffer()>();

        virtualinvoke r3.<jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer: void setSign(boolean)>(z0);

        $l3 = (long) i11;

        $l4 = $l3 << 29;

        virtualinvoke r3.<jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer: void dtoa(int,long,int,boolean)>(i13, $l4, i12, 1);

        return r3;
    }

    static jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter readJavaFormatString(java.lang.String) throws java.lang.NumberFormatException
    {
        char $c0, $c2, $c3, $c4, $c5, $c6, $c8, c29, c30, c35, c36, c42;
        boolean z0, z1, z2, z3, $z4, z5;
        jdk.internal.math.FloatingDecimal$ASCIIToBinaryBuffer $r0;
        int $i1, i9, $i10, i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i31, i32, i33, i34, i37, i38, i41;
        java.lang.NumberFormatException $r1, $r2, $r5, $r12;
        jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter $r3, $r4, $r8, $r10;
        java.lang.StringIndexOutOfBoundsException $r6;
        java.lang.String r7, $r17;
        char[] r9;
        byte b40;
        java.lang.StringBuilder $r13, $r14, $r15, $r16;

        r7 := @parameter0: java.lang.String;

        z1 = 0;

        z2 = 0;

     label01:
        r7 = virtualinvoke r7.<java.lang.String: java.lang.String trim()>();

        i27 = virtualinvoke r7.<java.lang.String: int length()>();

        if i27 != 0 goto label02;

        $r5 = new java.lang.NumberFormatException;

        specialinvoke $r5.<java.lang.NumberFormatException: void <init>(java.lang.String)>("empty String");

        throw $r5;

     label02:
        i28 = 0;

        $c0 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0);

        lookupswitch($c0)
        {
            case 43: goto label04;
            case 45: goto label03;
            default: goto label05;
        };

     label03:
        z1 = 1;

     label04:
        i28 = 0 + 1;

        z2 = 1;

     label05:
        c29 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if c29 != 78 goto label08;

        $i25 = i27 - i28;

        $i24 = <jdk.internal.math.FloatingDecimal: int NAN_LENGTH>;

        if $i25 != $i24 goto label07;

        $i26 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String,int)>("NaN", i28);

        if $i26 != i28 goto label07;

        $r4 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NOT_A_NUMBER>;

     label06:
        return $r4;

     label07:
        goto label55;

     label08:
        if c29 != 73 goto label12;

        $i22 = i27 - i28;

        $i21 = <jdk.internal.math.FloatingDecimal: int INFINITY_LENGTH>;

        if $i22 != $i21 goto label11;

        $i23 = virtualinvoke r7.<java.lang.String: int indexOf(java.lang.String,int)>("Infinity", i28);

        if $i23 != i28 goto label11;

        if z1 == 0 goto label09;

        $r8 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_INFINITY>;

        goto label10;

     label09:
        $r8 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_INFINITY>;

     label10:
        return $r8;

     label11:
        goto label55;

     label12:
        if c29 != 48 goto label15;

        $i19 = i28 + 1;

        if i27 <= $i19 goto label15;

        $i20 = i28 + 1;

        c30 = virtualinvoke r7.<java.lang.String: char charAt(int)>($i20);

        if c30 == 120 goto label13;

        if c30 != 88 goto label15;

     label13:
        $r3 = staticinvoke <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)>(r7);

     label14:
        return $r3;

     label15:
        r9 = newarray (char)[i27];

        z3 = 0;

        i31 = 0;

        i32 = 0;

        i33 = 0;

        i34 = 0;

     label16:
        if i28 >= i27 goto label21;

        c35 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if c35 != 48 goto label17;

        i33 = i33 + 1;

        goto label20;

     label17:
        if c35 != 46 goto label21;

        if z3 == 0 goto label18;

        $r2 = new java.lang.NumberFormatException;

        specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>("multiple points");

        throw $r2;

     label18:
        i32 = i28;

        if z2 == 0 goto label19;

        i32 = i28 + -1;

     label19:
        z3 = 1;

     label20:
        i28 = i28 + 1;

        goto label16;

     label21:
        if i28 >= i27 goto label27;

        c36 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if c36 < 49 goto label22;

        if c36 > 57 goto label22;

        $i18 = i31;

        i31 = i31 + 1;

        r9[$i18] = c36;

        i34 = 0;

        goto label26;

     label22:
        if c36 != 48 goto label23;

        $i17 = i31;

        i31 = i31 + 1;

        r9[$i17] = c36;

        i34 = i34 + 1;

        goto label26;

     label23:
        if c36 != 46 goto label27;

        if z3 == 0 goto label24;

        $r1 = new java.lang.NumberFormatException;

        specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>("multiple points");

        throw $r1;

     label24:
        i32 = i28;

        if z2 == 0 goto label25;

        i32 = i28 + -1;

     label25:
        z3 = 1;

     label26:
        i28 = i28 + 1;

        goto label21;

     label27:
        i37 = i31 - i34;

        if i37 != 0 goto label28;

        $z4 = 1;

        goto label29;

     label28:
        $z4 = 0;

     label29:
        z0 = $z4;

        if $z4 == 0 goto label31;

        if i33 != 0 goto label31;

     label30:
        goto label55;

     label31:
        if z3 == 0 goto label32;

        i38 = i32 - i33;

        goto label33;

     label32:
        i38 = i37 + i34;

     label33:
        if i28 >= i27 goto label47;

        $c6 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if $c6 == 101 goto label34;

        if $c6 != 69 goto label47;

     label34:
        b40 = 1;

        i41 = 0;

        z5 = 0;

        i28 = i28 + 1;

        $c8 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        lookupswitch($c8)
        {
            case 43: goto label36;
            case 45: goto label35;
            default: goto label37;
        };

     label35:
        b40 = -1;

     label36:
        i28 = i28 + 1;

     label37:
        i9 = i28;

     label38:
        if i28 >= i27 goto label41;

        if i41 < 214748364 goto label39;

        z5 = 1;

     label39:
        $i14 = i28;

        i28 = i28 + 1;

        c42 = virtualinvoke r7.<java.lang.String: char charAt(int)>($i14);

        if c42 < 48 goto label40;

        if c42 > 57 goto label40;

        $i16 = i41 * 10;

        $i15 = c42 - 48;

        i41 = $i16 + $i15;

        goto label38;

     label40:
        i28 = i28 + -1;

        goto label41;

     label41:
        $i10 = 324 + i37;

        i11 = $i10 + i34;

        if z5 != 0 goto label42;

        if i41 <= i11 goto label44;

     label42:
        if z5 != 0 goto label43;

        if b40 != 1 goto label43;

        if i38 >= 0 goto label43;

        $i12 = i41 + i38;

        if $i12 >= i11 goto label43;

        i38 = i38 + i41;

        goto label45;

     label43:
        i38 = b40 * i11;

        goto label45;

     label44:
        $i13 = b40 * i41;

        i38 = i38 + $i13;

     label45:
        if i28 != i9 goto label47;

     label46:
        goto label55;

     label47:
        if i28 >= i27 goto label49;

        $i1 = i27 - 1;

        if i28 != $i1 goto label48;

        $c2 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if $c2 == 102 goto label49;

        $c3 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if $c3 == 70 goto label49;

        $c4 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if $c4 == 100 goto label49;

        $c5 = virtualinvoke r7.<java.lang.String: char charAt(int)>(i28);

        if $c5 == 68 goto label49;

     label48:
        goto label55;

     label49:
        if z0 == 0 goto label52;

        if z1 == 0 goto label50;

        $r10 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_ZERO>;

        goto label51;

     label50:
        $r10 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_ZERO>;

     label51:
        return $r10;

     label52:
        $r0 = new jdk.internal.math.FloatingDecimal$ASCIIToBinaryBuffer;

        specialinvoke $r0.<jdk.internal.math.FloatingDecimal$ASCIIToBinaryBuffer: void <init>(boolean,int,char[],int)>(z1, i38, r9, i37);

     label53:
        return $r0;

     label54:
        $r6 := @caughtexception;

     label55:
        $r12 = new java.lang.NumberFormatException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("For input string: \"");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r17);

        throw $r12;

        catch java.lang.StringIndexOutOfBoundsException from label01 to label06 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label08 to label10 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label12 to label14 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label15 to label30 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label31 to label46 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label47 to label48 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label49 to label51 with label54;
        catch java.lang.StringIndexOutOfBoundsException from label52 to label53 with label54;
    }

    static jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter parseHexString(java.lang.String)
    {
        java.lang.String r0, r3, $r4, r5, $r9, $r21, $r23, r25, r26, $r27, r28, r30;
        java.util.regex.Pattern $r1;
        java.util.regex.Matcher r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z9, z10, z11, z12, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z24, $z26, $z28, $z29, $z30, z31;
        java.lang.StringBuilder $r6, $r7, $r8, $r17, $r18, $r19, $r20;
        int i0, $i1, $i2, $i3, $i5, $i20, $i23, $i24, $i25, $i26, $i31, $i46, $i47, $i52, $i70, $i75, i76, i77, i78, i85, i86, i89, $i91, i92, i94, $i95, $i96, $i97, $i98, $i99, i100, i101, $i102, i105;
        long $l4, l6, $l11, $l14, $l15, $l16, $l17, $l19, $l27, $l28, $l30, $l32, $l33, $l36, $l37, $l38, $l39, $l41, $l42, $l43, $l45, $l48, $l49, $l50, $l54, $l55, $l56, $l58, $l60, $l61, $l62, $l64, $l66, $l68, $l71, $l72, $l73, $l74, l79, $l80, l81, l82, l84, l87, l88, l90, l104, l106, l107, $l108, $l109;
        byte $b7, $b8, $b9, $b10, $b12, $b13, $b18, $b21, $b22, $b29, $b34, $b35, $b40, $b44, $b51, $b53, $b57, $b59, $b63, $b65, $b67, $b69, $b103, $b110;
        java.lang.AssertionError $r10, $r12, $r13, $r14, $r15;
        jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer $r11;
        java.lang.NumberFormatException $r16, $r22;
        jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter $r29, $r32, $r33, $r34;
        float f0;
        double $d0;

        r0 := @parameter0: java.lang.String;

        $r1 = <jdk.internal.math.FloatingDecimal$HexFloatPattern: java.util.regex.Pattern VALUE>;

        r2 = virtualinvoke $r1.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0);

        z0 = virtualinvoke r2.<java.util.regex.Matcher: boolean matches()>();

        if z0 != 0 goto label001;

        $r16 = new java.lang.NumberFormatException;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("For input string: \"");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r16.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r21);

        throw $r16;

     label001:
        r3 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(1);

        if r3 == null goto label002;

        $z6 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("-");

        if $z6 == 0 goto label002;

        $z7 = 1;

        goto label003;

     label002:
        $z7 = 0;

     label003:
        z1 = $z7;

        i76 = 0;

        $r23 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(4);

        if $r23 == null goto label004;

        r25 = staticinvoke <jdk.internal.math.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>($r23);

        i77 = virtualinvoke r25.<java.lang.String: int length()>();

        goto label007;

     label004:
        $r4 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(6);

        r5 = staticinvoke <jdk.internal.math.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>($r4);

        i77 = virtualinvoke r5.<java.lang.String: int length()>();

        r26 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(7);

        i76 = virtualinvoke r26.<java.lang.String: int length()>();

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        if r5 != null goto label005;

        $r27 = "";

        goto label006;

     label005:
        $r27 = r5;

     label006:
        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        r25 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label007:
        r28 = staticinvoke <jdk.internal.math.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>(r25);

        i0 = virtualinvoke r28.<java.lang.String: int length()>();

        if i77 < 1 goto label008;

        $i75 = i77 - 1;

        i78 = 4 * $i75;

        goto label009;

     label008:
        $i1 = i76 - i0;

        $i2 = $i1 + 1;

        i78 = -4 * $i2;

     label009:
        if i0 != 0 goto label012;

        if z1 == 0 goto label010;

        $r29 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_ZERO>;

        goto label011;

     label010:
        $r29 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_ZERO>;

     label011:
        return $r29;

     label012:
        r30 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(8);

        if r30 == null goto label013;

        $z5 = virtualinvoke r30.<java.lang.String: boolean equals(java.lang.Object)>("+");

        if $z5 == 0 goto label014;

     label013:
        $z9 = 1;

        goto label015;

     label014:
        $z9 = 0;

     label015:
        z10 = $z9;

     label016:
        $r9 = virtualinvoke r2.<java.util.regex.Matcher: java.lang.String group(int)>(9);

        $i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9);

        l79 = (long) $i3;

     label017:
        goto label023;

     label018:
        $r22 := @caughtexception;

        if z1 == 0 goto label020;

        if z10 == 0 goto label019;

        $r32 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_INFINITY>;

        goto label022;

     label019:
        $r32 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_ZERO>;

        goto label022;

     label020:
        if z10 == 0 goto label021;

        $r32 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_INFINITY>;

        goto label022;

     label021:
        $r32 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_ZERO>;

     label022:
        return $r32;

     label023:
        if $z9 == 0 goto label024;

        $l80 = 1L;

        goto label025;

     label024:
        $l80 = -1L;

     label025:
        l81 = $l80 * l79;

        $l4 = (long) i78;

        l82 = l81 + $l4;

        z11 = 0;

        z12 = 0;

        $i5 = staticinvoke <jdk.internal.math.FloatingDecimal: int getHexDigit(java.lang.String,int)>(r28, 0);

        l6 = (long) $i5;

        $b7 = l6 cmp 1L;

        if $b7 != 0 goto label026;

        $l74 = l6 << 52;

        l84 = 0L | $l74;

        i85 = 48;

        goto label030;

     label026:
        $b8 = l6 cmp 3L;

        if $b8 > 0 goto label027;

        $l73 = l6 << 51;

        l84 = 0L | $l73;

        i85 = 47;

        l82 = l82 + 1L;

        goto label030;

     label027:
        $b9 = l6 cmp 7L;

        if $b9 > 0 goto label028;

        $l72 = l6 << 50;

        l84 = 0L | $l72;

        i85 = 46;

        l82 = l82 + 2L;

        goto label030;

     label028:
        $b10 = l6 cmp 15L;

        if $b10 > 0 goto label029;

        $l11 = l6 << 49;

        l84 = 0L | $l11;

        i85 = 45;

        l82 = l82 + 3L;

        goto label030;

     label029:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>(java.lang.Object)>("Result from digit conversion too large!");

        throw $r10;

     label030:
        i86 = 1;

     label031:
        if i86 >= i0 goto label032;

        if i85 < 0 goto label032;

        $i70 = staticinvoke <jdk.internal.math.FloatingDecimal: int getHexDigit(java.lang.String,int)>(r28, i86);

        l87 = (long) $i70;

        $l71 = l87 << i85;

        l84 = l84 | $l71;

        i85 = i85 + -4;

        i86 = i86 + 1;

        goto label031;

     label032:
        if i86 >= i0 goto label057;

        $i47 = staticinvoke <jdk.internal.math.FloatingDecimal: int getHexDigit(java.lang.String,int)>(r28, i86);

        l88 = (long) $i47;

        tableswitch(i85)
        {
            case -4: goto label046;
            case -3: goto label041;
            case -2: goto label036;
            case -1: goto label033;
            default: goto label051;
        };

     label033:
        $l48 = l88 & 14L;

        $l49 = $l48 >> 1;

        l84 = l84 | $l49;

        $l50 = l88 & 1L;

        $b51 = $l50 cmp 0L;

        if $b51 == 0 goto label034;

        $z14 = 1;

        goto label035;

     label034:
        $z14 = 0;

     label035:
        z11 = $z14;

        goto label052;

     label036:
        $l54 = l88 & 12L;

        $l55 = $l54 >> 2;

        l84 = l84 | $l55;

        $l56 = l88 & 2L;

        $b57 = $l56 cmp 0L;

        if $b57 == 0 goto label037;

        $z15 = 1;

        goto label038;

     label037:
        $z15 = 0;

     label038:
        z11 = $z15;

        $l58 = l88 & 1L;

        $b59 = $l58 cmp 0L;

        if $b59 == 0 goto label039;

        $z16 = 1;

        goto label040;

     label039:
        $z16 = 0;

     label040:
        z12 = $z16;

        goto label052;

     label041:
        $l60 = l88 & 8L;

        $l61 = $l60 >> 3;

        l84 = l84 | $l61;

        $l62 = l88 & 4L;

        $b63 = $l62 cmp 0L;

        if $b63 == 0 goto label042;

        $z17 = 1;

        goto label043;

     label042:
        $z17 = 0;

     label043:
        z11 = $z17;

        $l64 = l88 & 3L;

        $b65 = $l64 cmp 0L;

        if $b65 == 0 goto label044;

        $z18 = 1;

        goto label045;

     label044:
        $z18 = 0;

     label045:
        z12 = $z18;

        goto label052;

     label046:
        $l66 = l88 & 8L;

        $b67 = $l66 cmp 0L;

        if $b67 == 0 goto label047;

        $z19 = 1;

        goto label048;

     label047:
        $z19 = 0;

     label048:
        z11 = $z19;

        $l68 = l88 & 7L;

        $b69 = $l68 cmp 0L;

        if $b69 == 0 goto label049;

        $z20 = 1;

        goto label050;

     label049:
        $z20 = 0;

     label050:
        z12 = $z20;

        goto label052;

     label051:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(java.lang.Object)>("Unexpected shift distance remainder.");

        throw $r15;

     label052:
        i89 = i86 + 1;

     label053:
        if i89 >= i0 goto label057;

        if z12 != 0 goto label057;

        $i52 = staticinvoke <jdk.internal.math.FloatingDecimal: int getHexDigit(java.lang.String,int)>(r28, i89);

        l90 = (long) $i52;

        if z12 != 0 goto label054;

        $b53 = l90 cmp 0L;

        if $b53 == 0 goto label055;

     label054:
        $z21 = 1;

        goto label056;

     label055:
        $z21 = 0;

     label056:
        z12 = $z21;

        i89 = i89 + 1;

        goto label053;

     label057:
        if z1 == 0 goto label058;

        $i91 = -2147483648;

        goto label059;

     label058:
        $i91 = 0;

     label059:
        i92 = $i91;

        $b12 = l82 cmp -126L;

        if $b12 < 0 goto label066;

        $b40 = l82 cmp 127L;

        if $b40 <= 0 goto label060;

        i92 = $i91 | 2139095040;

        goto label075;

     label060:
        $l41 = 1L << 28;

        $l42 = $l41 - 1L;

        $l43 = l84 & $l42;

        $b44 = $l43 cmp 0L;

        if $b44 != 0 goto label061;

        if z11 != 0 goto label061;

        if z12 == 0 goto label062;

     label061:
        $z22 = 1;

        goto label063;

     label062:
        $z22 = 0;

     label063:
        $l45 = l84 >>> 28;

        i94 = (int) $l45;

        $i46 = i94 & 3;

        if $i46 != 1 goto label064;

        if $z22 == 0 goto label065;

     label064:
        i94 = i94 + 1;

     label065:
        $i95 = (int) l82;

        $i96 = $i95 + 126;

        $i97 = $i96 << 23;

        $i98 = i94 >> 1;

        $i99 = $i97 + $i98;

        i92 = i92 | $i99;

        goto label075;

     label066:
        $b13 = l82 cmp -150L;

        if $b13 >= 0 goto label067;

        goto label075;

     label067:
        $l14 = -98L - l82;

        i100 = (int) $l14;

        $z2 = <jdk.internal.math.FloatingDecimal: boolean $assertionsDisabled>;

        if $z2 != 0 goto label068;

        if i100 >= 29 goto label068;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label068:
        $z3 = <jdk.internal.math.FloatingDecimal: boolean $assertionsDisabled>;

        if $z3 != 0 goto label069;

        if i100 < 53 goto label069;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label069:
        $l15 = 1L << i100;

        $l16 = $l15 - 1L;

        $l17 = l84 & $l16;

        $b18 = $l17 cmp 0L;

        if $b18 != 0 goto label070;

        if z11 != 0 goto label070;

        if z12 == 0 goto label071;

     label070:
        $z24 = 1;

        goto label072;

     label071:
        $z24 = 0;

     label072:
        $l19 = l84 >>> i100;

        i101 = (int) $l19;

        $i20 = i101 & 3;

        if $i20 != 1 goto label073;

        if $z24 == 0 goto label074;

     label073:
        i101 = i101 + 1;

     label074:
        $i102 = i101 >> 1;

        i92 = i92 | $i102;

     label075:
        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i92);

        $b103 = l82 cmp 1023L;

        if $b103 <= 0 goto label078;

        if z1 == 0 goto label076;

        $r33 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_INFINITY>;

        goto label077;

     label076:
        $r33 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_INFINITY>;

     label077:
        return $r33;

     label078:
        $b21 = l82 cmp 1023L;

        if $b21 > 0 goto label079;

        $b35 = l82 cmp -1022L;

        if $b35 < 0 goto label079;

        $l36 = l82 + 1023L;

        $l37 = $l36 << 52;

        $l39 = $l37 & 9218868437227405312L;

        $l38 = 4503599627370495L & l84;

        l104 = $l39 | $l38;

        goto label094;

     label079:
        $b22 = l82 cmp -1075L;

        if $b22 >= 0 goto label082;

        if z1 == 0 goto label080;

        $r34 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_ZERO>;

        goto label081;

     label080:
        $r34 = <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_ZERO>;

     label081:
        return $r34;

     label082:
        if z12 != 0 goto label083;

        if z11 == 0 goto label084;

     label083:
        $z26 = 1;

        goto label085;

     label084:
        $z26 = 0;

     label085:
        z12 = $z26;

        $i23 = (int) l82;

        $i24 = $i23 - -1074;

        $i25 = $i24 + 1;

        i105 = 53 - $i25;

        $z4 = <jdk.internal.math.FloatingDecimal: boolean $assertionsDisabled>;

        if $z4 != 0 goto label087;

        if i105 < 1 goto label086;

        if i105 <= 53 goto label087;

     label086:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label087:
        $i26 = i105 - 1;

        $l27 = 1L << $i26;

        $l28 = l84 & $l27;

        $b29 = $l28 cmp 0L;

        if $b29 == 0 goto label088;

        $z28 = 1;

        goto label089;

     label088:
        $z28 = 0;

     label089:
        z11 = $z28;

        if i105 <= 1 goto label093;

        $i31 = i105 - 1;

        $l32 = -1L << $i31;

        l106 = $l32 ^ -1L;

        if z12 != 0 goto label090;

        $l33 = l84 & l106;

        $b34 = $l33 cmp 0L;

        if $b34 == 0 goto label091;

     label090:
        $z29 = 1;

        goto label092;

     label091:
        $z29 = 0;

     label092:
        z12 = $z29;

     label093:
        l107 = l84 >> i105;

        $l108 = 4503599627370495L & l107;

        l104 = 0L | $l108;

     label094:
        $l109 = l104 & 1L;

        $b110 = $l109 cmp 0L;

        if $b110 != 0 goto label095;

        $z30 = 1;

        goto label096;

     label095:
        $z30 = 0;

     label096:
        z31 = $z30;

        if $z30 == 0 goto label097;

        if z11 == 0 goto label097;

        if z12 != 0 goto label098;

     label097:
        if z31 != 0 goto label099;

        if z11 == 0 goto label099;

     label098:
        l104 = l104 + 1L;

     label099:
        if z1 == 0 goto label100;

        $l30 = l104 | -9223372036854775808L;

        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>($l30);

        goto label101;

     label100:
        $d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l104);

     label101:
        $r11 = new jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer;

        specialinvoke $r11.<jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer: void <init>(double,float)>($d0, f0);

        return $r11;

        catch java.lang.NumberFormatException from label016 to label017 with label018;
    }

    static java.lang.String stripLeadingZeros(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        char $c0, $c2;
        int $i1, i3;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c0 != 48 goto label4;

        i3 = 1;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i3 >= $i1 goto label3;

        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3);

        if $c2 == 48 goto label2;

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i3);

        return $r1;

     label2:
        i3 = i3 + 1;

        goto label1;

     label3:
        return "";

     label4:
        return r0;
    }

    static int getHexDigit(java.lang.String, int)
    {
        java.lang.String r0, $r5;
        int i0, i2;
        char $c1, $c3;
        java.lang.AssertionError $r1;
        java.lang.StringBuilder $r2, $r3, $r4;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        i2 = staticinvoke <java.lang.Character: int digit(char,int)>($c1, 16);

        if i2 <= -1 goto label1;

        if i2 < 16 goto label2;

     label1:
        $r1 = new java.lang.AssertionError;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected failure of digit conversion of ");

        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.AssertionError: void <init>(java.lang.Object)>($r5);

        throw $r1;

     label2:
        return i2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.String $r1, $r2;
        int $i0, $i1;
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer $r3, $r4, $r5;
        jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer $r6, $r8;
        char[] $r7, $r9;
        jdk.internal.math.FloatingDecimal$1 $r10;
        jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer $r11, $r12, $r13, $r14, $r15;

        <jdk.internal.math.FloatingDecimal: java.lang.String NAN_REP> = "NaN";

        <jdk.internal.math.FloatingDecimal: java.lang.String INFINITY_REP> = "Infinity";

        <jdk.internal.math.FloatingDecimal: int INT_DECIMAL_DIGITS> = 9;

        <jdk.internal.math.FloatingDecimal: int SINGLE_MAX_NDIGITS> = 200;

        <jdk.internal.math.FloatingDecimal: int SINGLE_MIN_DECIMAL_EXPONENT> = -45;

        <jdk.internal.math.FloatingDecimal: int SINGLE_MAX_DECIMAL_EXPONENT> = 38;

        <jdk.internal.math.FloatingDecimal: int SINGLE_MAX_DECIMAL_DIGITS> = 7;

        <jdk.internal.math.FloatingDecimal: int SINGLE_FRACT_HOB> = 8388608;

        <jdk.internal.math.FloatingDecimal: int SINGLE_EXP_SHIFT> = 23;

        <jdk.internal.math.FloatingDecimal: int MAX_NDIGITS> = 1100;

        <jdk.internal.math.FloatingDecimal: int BIG_DECIMAL_EXPONENT> = 324;

        <jdk.internal.math.FloatingDecimal: int MIN_DECIMAL_EXPONENT> = -324;

        <jdk.internal.math.FloatingDecimal: int MAX_DECIMAL_EXPONENT> = 308;

        <jdk.internal.math.FloatingDecimal: int MAX_DECIMAL_DIGITS> = 15;

        <jdk.internal.math.FloatingDecimal: int MIN_SMALL_BIN_EXP> = -21;

        <jdk.internal.math.FloatingDecimal: int MAX_SMALL_BIN_EXP> = 62;

        <jdk.internal.math.FloatingDecimal: long EXP_ONE> = 4607182418800017408L;

        <jdk.internal.math.FloatingDecimal: long FRACT_HOB> = 4503599627370496L;

        <jdk.internal.math.FloatingDecimal: int EXP_SHIFT> = 52;

        $r0 = class "Ljdk/internal/math/FloatingDecimal;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <jdk.internal.math.FloatingDecimal: boolean $assertionsDisabled> = $z1;

        $r1 = "Infinity";

        $i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        <jdk.internal.math.FloatingDecimal: int INFINITY_LENGTH> = $i0;

        $r2 = "NaN";

        $i1 = virtualinvoke $r2.<java.lang.String: int length()>();

        <jdk.internal.math.FloatingDecimal: int NAN_LENGTH> = $i1;

        $r3 = new jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        specialinvoke $r3.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: void <init>(java.lang.String,boolean)>("Infinity", 0);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_INFINITY> = $r3;

        $r4 = new jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        specialinvoke $r4.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: void <init>(java.lang.String,boolean)>("-Infinity", 1);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_INFINITY> = $r4;

        $r5 = new jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        specialinvoke $r5.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: void <init>(java.lang.String,boolean)>("NaN", 0);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NOT_A_NUMBER> = $r5;

        $r6 = new jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer;

        $r7 = newarray (char)[1];

        $r7[0] = 48;

        specialinvoke $r6.<jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer: void <init>(boolean,char[])>(0, $r7);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_POSITIVE_ZERO> = $r6;

        $r8 = new jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer;

        $r9 = newarray (char)[1];

        $r9[0] = 48;

        specialinvoke $r8.<jdk.internal.math.FloatingDecimal$BinaryToASCIIBuffer: void <init>(boolean,char[])>(1, $r9);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter B2AC_NEGATIVE_ZERO> = $r8;

        $r10 = new jdk.internal.math.FloatingDecimal$1;

        specialinvoke $r10.<jdk.internal.math.FloatingDecimal$1: void <init>()>();

        <jdk.internal.math.FloatingDecimal: java.lang.ThreadLocal threadLocalBinaryToASCIIBuffer> = $r10;

        $r11 = new jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer;

        specialinvoke $r11.<jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer: void <init>(double,float)>(#Infinity, #InfinityF);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_INFINITY> = $r11;

        $r12 = new jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer;

        specialinvoke $r12.<jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer: void <init>(double,float)>(#-Infinity, #-InfinityF);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_INFINITY> = $r12;

        $r13 = new jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer;

        specialinvoke $r13.<jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer: void <init>(double,float)>(#NaN, #NaNF);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NOT_A_NUMBER> = $r13;

        $r14 = new jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer;

        specialinvoke $r14.<jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer: void <init>(double,float)>(0.0, 0.0F);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_POSITIVE_ZERO> = $r14;

        $r15 = new jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer;

        specialinvoke $r15.<jdk.internal.math.FloatingDecimal$PreparedASCIIToBinaryBuffer: void <init>(double,float)>(-0.0, -0.0F);

        <jdk.internal.math.FloatingDecimal: jdk.internal.math.FloatingDecimal$ASCIIToBinaryConverter A2BC_NEGATIVE_ZERO> = $r15;

        return;
    }
}
