public abstract class jdk.internal.loader.AbstractClassLoaderValue extends java.lang.Object
{
    private static final jdk.internal.access.JavaLangAccess JLA;

    void <init>()
    {
        jdk.internal.loader.AbstractClassLoaderValue r0;

        r0 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public abstract java.lang.Object key();

    public jdk.internal.loader.AbstractClassLoaderValue$Sub sub(java.lang.Object)
    {
        jdk.internal.loader.AbstractClassLoaderValue$Sub $r0;
        jdk.internal.loader.AbstractClassLoaderValue r1;
        java.lang.Object r2;

        r1 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r2 := @parameter0: java.lang.Object;

        $r0 = new jdk.internal.loader.AbstractClassLoaderValue$Sub;

        specialinvoke $r0.<jdk.internal.loader.AbstractClassLoaderValue$Sub: void <init>(jdk.internal.loader.AbstractClassLoaderValue,java.lang.Object)>(r1, r2);

        return $r0;
    }

    public abstract boolean isEqualOrDescendantOf(jdk.internal.loader.AbstractClassLoaderValue);

    public java.lang.Object get(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        jdk.internal.loader.AbstractClassLoaderValue r2;
        java.lang.Object r3, $r4;
        java.lang.Throwable $r5;
        jdk.internal.loader.AbstractClassLoaderValue$Memoizer$RecursiveInvocationException $r6;

        r2 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r0 := @parameter0: java.lang.ClassLoader;

        $r1 = staticinvoke <jdk.internal.loader.AbstractClassLoaderValue: java.util.concurrent.ConcurrentHashMap map(java.lang.ClassLoader)>(r0);

        r3 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

     label1:
        $r4 = virtualinvoke r2.<jdk.internal.loader.AbstractClassLoaderValue: java.lang.Object extractValue(java.lang.Object)>(r3);

     label2:
        return $r4;

     label3:
        $r6 := @caughtexception;

        throw $r6;

     label4:
        $r5 := @caughtexception;

        return null;

        catch jdk.internal.loader.AbstractClassLoaderValue$Memoizer$RecursiveInvocationException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public java.lang.Object putIfAbsent(java.lang.ClassLoader, java.lang.Object)
    {
        java.lang.ClassLoader r0;
        java.util.concurrent.ConcurrentHashMap r1;
        jdk.internal.loader.AbstractClassLoaderValue r2;
        java.lang.Object r4, $r5, r8;
        java.lang.Throwable $r6;
        jdk.internal.loader.AbstractClassLoaderValue$Memoizer$RecursiveInvocationException $r7;

        r2 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r0 := @parameter0: java.lang.ClassLoader;

        r4 := @parameter1: java.lang.Object;

        r1 = staticinvoke <jdk.internal.loader.AbstractClassLoaderValue: java.util.concurrent.ConcurrentHashMap map(java.lang.ClassLoader)>(r0);

     label1:
        r8 = virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r4);

        $r5 = virtualinvoke r2.<jdk.internal.loader.AbstractClassLoaderValue: java.lang.Object extractValue(java.lang.Object)>(r8);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        throw $r7;

     label4:
        $r6 := @caughtexception;

        goto label1;

        catch jdk.internal.loader.AbstractClassLoaderValue$Memoizer$RecursiveInvocationException from label1 to label2 with label3;
        catch java.lang.Throwable from label1 to label2 with label4;
    }

    public boolean remove(java.lang.ClassLoader, java.lang.Object)
    {
        java.lang.ClassLoader r0;
        java.util.concurrent.ConcurrentHashMap $r1;
        jdk.internal.loader.AbstractClassLoaderValue r2;
        java.lang.Object r3;
        boolean $z0;

        r2 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r0 := @parameter0: java.lang.ClassLoader;

        r3 := @parameter1: java.lang.Object;

        $r1 = staticinvoke <jdk.internal.loader.AbstractClassLoaderValue: java.util.concurrent.ConcurrentHashMap map(java.lang.ClassLoader)>(r0);

        $z0 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r3);

        return $z0;
    }

    public java.lang.Object computeIfAbsent(java.lang.ClassLoader, java.util.function.BiFunction) throws java.lang.IllegalStateException
    {
        java.lang.ClassLoader r0;
        java.util.concurrent.ConcurrentHashMap r1;
        jdk.internal.loader.AbstractClassLoaderValue r2;
        java.lang.Object $r5, $r12, r13;
        jdk.internal.loader.AbstractClassLoaderValue$Memoizer $r6, r11;
        java.util.function.BiFunction r7;
        java.lang.Throwable $r8, $r10;
        jdk.internal.loader.AbstractClassLoaderValue$Memoizer$RecursiveInvocationException $r9;

        r2 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r0 := @parameter0: java.lang.ClassLoader;

        r7 := @parameter1: java.util.function.BiFunction;

        r1 = staticinvoke <jdk.internal.loader.AbstractClassLoaderValue: java.util.concurrent.ConcurrentHashMap map(java.lang.ClassLoader)>(r0);

        r11 = null;

     label01:
        if r11 != null goto label02;

        $r12 = virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2);

        goto label03;

     label02:
        $r12 = virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r2, r11);

     label03:
        if $r12 != null goto label07;

        if r11 != null goto label04;

        $r6 = new jdk.internal.loader.AbstractClassLoaderValue$Memoizer;

        specialinvoke $r6.<jdk.internal.loader.AbstractClassLoaderValue$Memoizer: void <init>(java.lang.ClassLoader,jdk.internal.loader.AbstractClassLoaderValue,java.util.function.BiFunction)>(r0, r2, r7);

        r11 = $r6;

        goto label01;

     label04:
        r13 = virtualinvoke r11.<jdk.internal.loader.AbstractClassLoaderValue$Memoizer: java.lang.Object get()>();

        virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>(r2, r11, r13);

     label05:
        return r13;

     label06:
        $r10 := @caughtexception;

        virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: boolean remove(java.lang.Object,java.lang.Object)>(r2, r11);

        throw $r10;

     label07:
        $r5 = virtualinvoke r2.<jdk.internal.loader.AbstractClassLoaderValue: java.lang.Object extractValue(java.lang.Object)>($r12);

     label08:
        return $r5;

     label09:
        $r9 := @caughtexception;

        throw $r9;

     label10:
        $r8 := @caughtexception;

        goto label01;

        catch java.lang.Throwable from label04 to label05 with label06;
        catch jdk.internal.loader.AbstractClassLoaderValue$Memoizer$RecursiveInvocationException from label07 to label08 with label09;
        catch java.lang.Throwable from label07 to label08 with label10;
    }

    public void removeAll(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        java.util.concurrent.ConcurrentHashMap r1;
        java.util.concurrent.ConcurrentHashMap$KeySetView $r2;
        java.util.Iterator r3;
        java.lang.Object $r4;
        jdk.internal.loader.AbstractClassLoaderValue r5, $r6;
        boolean $z0, $z1;

        r5 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 = staticinvoke <jdk.internal.loader.AbstractClassLoaderValue: java.util.concurrent.ConcurrentHashMap map(java.lang.ClassLoader)>(r0);

        $r2 = virtualinvoke r1.<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$KeySetView keySet()>();

        r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap$KeySetView: java.util.Iterator iterator()>();

     label1:
        $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label2;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        $r6 = (jdk.internal.loader.AbstractClassLoaderValue) $r4;

        $z0 = virtualinvoke $r6.<jdk.internal.loader.AbstractClassLoaderValue: boolean isEqualOrDescendantOf(jdk.internal.loader.AbstractClassLoaderValue)>(r5);

        if $z0 == 0 goto label1;

        interfaceinvoke r3.<java.util.Iterator: void remove()>();

        goto label1;

     label2:
        return;
    }

    private static java.util.concurrent.ConcurrentHashMap map(java.lang.ClassLoader)
    {
        java.lang.ClassLoader r0;
        jdk.internal.access.JavaLangAccess $r1;
        java.util.concurrent.ConcurrentHashMap $r2;

        r0 := @parameter0: java.lang.ClassLoader;

        if r0 != null goto label1;

        $r2 = staticinvoke <jdk.internal.loader.BootLoader: java.util.concurrent.ConcurrentHashMap getClassLoaderValueMap()>();

        goto label2;

     label1:
        $r1 = <jdk.internal.loader.AbstractClassLoaderValue: jdk.internal.access.JavaLangAccess JLA>;

        $r2 = interfaceinvoke $r1.<jdk.internal.access.JavaLangAccess: java.util.concurrent.ConcurrentHashMap createOrGetClassLoaderValueMap(java.lang.ClassLoader)>(r0);

     label2:
        return $r2;
    }

    private java.lang.Object extractValue(java.lang.Object)
    {
        java.lang.Object r0, $r2;
        boolean $z0;
        jdk.internal.loader.AbstractClassLoaderValue$Memoizer $r1;
        jdk.internal.loader.AbstractClassLoaderValue r3;

        r3 := @this: jdk.internal.loader.AbstractClassLoaderValue;

        r0 := @parameter0: java.lang.Object;

        $z0 = r0 instanceof jdk.internal.loader.AbstractClassLoaderValue$Memoizer;

        if $z0 == 0 goto label1;

        $r1 = (jdk.internal.loader.AbstractClassLoaderValue$Memoizer) r0;

        $r2 = virtualinvoke $r1.<jdk.internal.loader.AbstractClassLoaderValue$Memoizer: java.lang.Object get()>();

        return $r2;

     label1:
        return r0;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaLangAccess $r0;

        $r0 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangAccess getJavaLangAccess()>();

        <jdk.internal.loader.AbstractClassLoaderValue: jdk.internal.access.JavaLangAccess JLA> = $r0;

        return;
    }
}
