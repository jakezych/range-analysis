class jdk.internal.jimage.ImageReader$LinkNode extends jdk.internal.jimage.ImageReader$Node
{
    private final jdk.internal.jimage.ImageReader$Node link;

    private void <init>(java.lang.String, jdk.internal.jimage.ImageReader$Node)
    {
        jdk.internal.jimage.ImageReader$LinkNode r0;
        java.lang.String r1;
        jdk.internal.jimage.ImageReader$Node r2;
        java.nio.file.attribute.BasicFileAttributes $r3;

        r0 := @this: jdk.internal.jimage.ImageReader$LinkNode;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: jdk.internal.jimage.ImageReader$Node;

        $r3 = virtualinvoke r2.<jdk.internal.jimage.ImageReader$Node: java.nio.file.attribute.BasicFileAttributes getFileAttributes()>();

        specialinvoke r0.<jdk.internal.jimage.ImageReader$Node: void <init>(java.lang.String,java.nio.file.attribute.BasicFileAttributes)>(r1, $r3);

        r0.<jdk.internal.jimage.ImageReader$LinkNode: jdk.internal.jimage.ImageReader$Node link> = r2;

        return;
    }

    static jdk.internal.jimage.ImageReader$LinkNode create(jdk.internal.jimage.ImageReader$Directory, java.lang.String, jdk.internal.jimage.ImageReader$Node)
    {
        jdk.internal.jimage.ImageReader$LinkNode $r0;
        java.lang.String r1;
        jdk.internal.jimage.ImageReader$Node r2;
        jdk.internal.jimage.ImageReader$Directory r4;

        r4 := @parameter0: jdk.internal.jimage.ImageReader$Directory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: jdk.internal.jimage.ImageReader$Node;

        $r0 = new jdk.internal.jimage.ImageReader$LinkNode;

        specialinvoke $r0.<jdk.internal.jimage.ImageReader$LinkNode: void <init>(java.lang.String,jdk.internal.jimage.ImageReader$Node)>(r1, r2);

        virtualinvoke r4.<jdk.internal.jimage.ImageReader$Directory: void addChild(jdk.internal.jimage.ImageReader$Node)>($r0);

        return $r0;
    }

    public boolean isCompleted()
    {
        jdk.internal.jimage.ImageReader$LinkNode r0;

        r0 := @this: jdk.internal.jimage.ImageReader$LinkNode;

        return 1;
    }

    public jdk.internal.jimage.ImageReader$Node resolveLink(boolean)
    {
        boolean z0, $z1;
        jdk.internal.jimage.ImageReader$LinkNode r0, $r3;
        jdk.internal.jimage.ImageReader$Node $r1, $r2, $r4;

        r0 := @this: jdk.internal.jimage.ImageReader$LinkNode;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $r1 = r0.<jdk.internal.jimage.ImageReader$LinkNode: jdk.internal.jimage.ImageReader$Node link>;

        $z1 = $r1 instanceof jdk.internal.jimage.ImageReader$LinkNode;

        if $z1 == 0 goto label1;

        $r2 = r0.<jdk.internal.jimage.ImageReader$LinkNode: jdk.internal.jimage.ImageReader$Node link>;

        $r3 = (jdk.internal.jimage.ImageReader$LinkNode) $r2;

        $r4 = virtualinvoke $r3.<jdk.internal.jimage.ImageReader$LinkNode: jdk.internal.jimage.ImageReader$Node resolveLink(boolean)>(1);

        goto label2;

     label1:
        $r4 = r0.<jdk.internal.jimage.ImageReader$LinkNode: jdk.internal.jimage.ImageReader$Node link>;

     label2:
        return $r4;
    }

    public boolean isLink()
    {
        jdk.internal.jimage.ImageReader$LinkNode r0;

        r0 := @this: jdk.internal.jimage.ImageReader$LinkNode;

        return 1;
    }
}
