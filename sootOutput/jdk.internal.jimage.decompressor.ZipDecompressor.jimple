final class jdk.internal.jimage.decompressor.ZipDecompressor extends java.lang.Object implements jdk.internal.jimage.decompressor.ResourceDecompressor
{

    void <init>()
    {
        jdk.internal.jimage.decompressor.ZipDecompressor r0;

        r0 := @this: jdk.internal.jimage.decompressor.ZipDecompressor;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.String getName()
    {
        jdk.internal.jimage.decompressor.ZipDecompressor r0;

        r0 := @this: jdk.internal.jimage.decompressor.ZipDecompressor;

        return "zip";
    }

    static byte[] decompress(byte[], int) throws java.lang.Exception
    {
        java.util.zip.Inflater $r0;
        byte[] r2, r5, r6;
        int i0, $i1, $i2, $i3, $i4, i5;
        java.io.ByteArrayOutputStream $r3;
        boolean $z0;

        r2 := @parameter0: byte[];

        i0 := @parameter1: int;

        $r0 = new java.util.zip.Inflater;

        specialinvoke $r0.<java.util.zip.Inflater: void <init>()>();

        $i1 = lengthof r2;

        $i2 = $i1 - i0;

        virtualinvoke $r0.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r2, i0, $i2);

        $r3 = new java.io.ByteArrayOutputStream;

        $i3 = lengthof r2;

        $i4 = $i3 - i0;

        specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>(int)>($i4);

        r5 = newarray (byte)[1024];

     label1:
        $z0 = virtualinvoke $r0.<java.util.zip.Inflater: boolean finished()>();

        if $z0 != 0 goto label2;

        i5 = virtualinvoke $r0.<java.util.zip.Inflater: int inflate(byte[])>(r5);

        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r5, 0, i5);

        goto label1;

     label2:
        virtualinvoke $r3.<java.io.ByteArrayOutputStream: void close()>();

        r6 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>();

        virtualinvoke $r0.<java.util.zip.Inflater: void end()>();

        return r6;
    }

    public byte[] decompress(jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider, byte[], int, long) throws java.lang.Exception
    {
        byte[] r0, r1;
        int i0;
        jdk.internal.jimage.decompressor.ZipDecompressor r2;
        jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider r3;
        long l1;

        r2 := @this: jdk.internal.jimage.decompressor.ZipDecompressor;

        r3 := @parameter0: jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider;

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        l1 := @parameter3: long;

        r1 = staticinvoke <jdk.internal.jimage.decompressor.ZipDecompressor: byte[] decompress(byte[],int)>(r0, i0);

        return r1;
    }
}
