public final class jdk.internal.module.Checks extends java.lang.Object
{
    private static final java.util.Set RESERVED;

    private void <init>()
    {
        jdk.internal.module.Checks r0;

        r0 := @this: jdk.internal.module.Checks;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.String requireModuleName(java.lang.String)
    {
        java.lang.String r0, $r7, $r14, r16, r17;
        int $i0, i2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1, $r8, $r15;
        java.lang.StringBuilder $r2, $r3, $r4, $r5, $r6, $r9, $r10, $r11, $r12, $r13;

        r0 := @parameter0: java.lang.String;

        if r0 != null goto label1;

        $r15 = new java.lang.IllegalArgumentException;

        specialinvoke $r15.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Null module name");

        throw $r15;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(46, i2);

        if $i0 == -1 goto label4;

        r16 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i0);

        $z1 = staticinvoke <jdk.internal.module.Checks: boolean isJavaIdentifier(java.lang.String)>(r16);

        if $z1 != 0 goto label3;

        $r8 = new java.lang.IllegalArgumentException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Invalid module name: \'");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Java identifier");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        throw $r8;

     label3:
        i2 = $i0 + 1;

        goto label2;

     label4:
        r17 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        $z0 = staticinvoke <jdk.internal.module.Checks: boolean isJavaIdentifier(java.lang.String)>(r17);

        if $z0 != 0 goto label5;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Invalid module name: \'");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Java identifier");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r1;

     label5:
        return r0;
    }

    public static java.lang.String requirePackageName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <jdk.internal.module.Checks: java.lang.String requireTypeName(java.lang.String,java.lang.String)>("package name", r0);

        return $r1;
    }

    public static boolean isPackageName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <jdk.internal.module.Checks: boolean isTypeName(java.lang.String)>(r0);

        return $z0;
    }

    public static java.lang.String requireServiceTypeName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <jdk.internal.module.Checks: java.lang.String requireQualifiedClassName(java.lang.String,java.lang.String)>("service type name", r0);

        return $r1;
    }

    public static java.lang.String requireServiceProviderName(java.lang.String)
    {
        java.lang.String r0, $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <jdk.internal.module.Checks: java.lang.String requireQualifiedClassName(java.lang.String,java.lang.String)>("service provider name", r0);

        return $r1;
    }

    public static java.lang.String requireQualifiedClassName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1, $r7;
        int $i0;
        java.lang.IllegalArgumentException $r3;
        java.lang.StringBuilder $r4, $r5, $r6;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        staticinvoke <jdk.internal.module.Checks: java.lang.String requireTypeName(java.lang.String,java.lang.String)>(r0, r1);

        $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46);

        if $i0 != -1 goto label1;

        $r3 = new java.lang.IllegalArgumentException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": is not a qualified name of a Java class in a named package");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label1:
        return r1;
    }

    public static boolean isClassName(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $z0 = staticinvoke <jdk.internal.module.Checks: boolean isTypeName(java.lang.String)>(r0);

        return $z0;
    }

    private static boolean isTypeName(java.lang.String)
    {
        java.lang.String r0, r1, r2;
        int $i0, i2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        i2 = 0;

     label1:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(46, i2);

        if $i0 == -1 goto label3;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i0);

        $z1 = staticinvoke <jdk.internal.module.Checks: boolean isJavaIdentifier(java.lang.String)>(r1);

        if $z1 != 0 goto label2;

        return 0;

     label2:
        i2 = $i0 + 1;

        goto label1;

     label3:
        r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        $z0 = staticinvoke <jdk.internal.module.Checks: boolean isJavaIdentifier(java.lang.String)>(r2);

        return $z0;
    }

    private static java.lang.String requireTypeName(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r5, $r10, $r19, $r24, r25, r26;
        int $i0, i2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r1, $r11, $r20;
        java.lang.StringBuilder $r2, $r3, $r4, $r6, $r7, $r8, $r9, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r22, $r23;

        r5 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.String;

        if r0 != null goto label1;

        $r20 = new java.lang.IllegalArgumentException;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Null ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r20.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24);

        throw $r20;

     label1:
        i2 = 0;

     label2:
        $i0 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(46, i2);

        if $i0 == -1 goto label4;

        r25 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i2, $i0);

        $z1 = staticinvoke <jdk.internal.module.Checks: boolean isJavaIdentifier(java.lang.String)>(r25);

        if $z1 != 0 goto label3;

        $r11 = new java.lang.IllegalArgumentException;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Invalid ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \'");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Java identifier");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19);

        throw $r11;

     label3:
        i2 = $i0 + 1;

        goto label2;

     label4:
        r26 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>(i2);

        $z0 = staticinvoke <jdk.internal.module.Checks: boolean isJavaIdentifier(java.lang.String)>(r26);

        if $z0 != 0 goto label5;

        $r1 = new java.lang.IllegalArgumentException;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": Invalid ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": \'");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is not a Java identifier");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r1;

     label5:
        return r0;
    }

    private static boolean isJavaIdentifier(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2, $z3;
        java.util.Set $r1;
        int i0, $i1, i2, $i3, i4;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r1 = <jdk.internal.module.Checks: java.util.Set RESERVED>;

        $z1 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>(r0);

        if $z1 == 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, 0);

        $z2 = staticinvoke <java.lang.Character: boolean isJavaIdentifierStart(int)>(i0);

        if $z2 != 0 goto label3;

        return 0;

     label3:
        i4 = staticinvoke <java.lang.Character: int charCount(int)>(i0);

     label4:
        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        if i4 >= $i1 goto label6;

        i2 = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(r0, i4);

        $z3 = staticinvoke <java.lang.Character: boolean isJavaIdentifierPart(int)>(i2);

        if $z3 != 0 goto label5;

        return 0;

     label5:
        $i3 = staticinvoke <java.lang.Character: int charCount(int)>(i2);

        i4 = i4 + $i3;

        goto label4;

     label6:
        return 1;
    }

    static void <clinit>()
    {
        java.lang.String[] $r0;
        java.util.Set $r1;

        $r0 = newarray (java.lang.String)[54];

        $r0[0] = "abstract";

        $r0[1] = "assert";

        $r0[2] = "boolean";

        $r0[3] = "break";

        $r0[4] = "byte";

        $r0[5] = "case";

        $r0[6] = "catch";

        $r0[7] = "char";

        $r0[8] = "class";

        $r0[9] = "const";

        $r0[10] = "continue";

        $r0[11] = "default";

        $r0[12] = "do";

        $r0[13] = "double";

        $r0[14] = "else";

        $r0[15] = "enum";

        $r0[16] = "extends";

        $r0[17] = "final";

        $r0[18] = "finally";

        $r0[19] = "float";

        $r0[20] = "for";

        $r0[21] = "goto";

        $r0[22] = "if";

        $r0[23] = "implements";

        $r0[24] = "import";

        $r0[25] = "instanceof";

        $r0[26] = "int";

        $r0[27] = "interface";

        $r0[28] = "long";

        $r0[29] = "native";

        $r0[30] = "new";

        $r0[31] = "package";

        $r0[32] = "private";

        $r0[33] = "protected";

        $r0[34] = "public";

        $r0[35] = "return";

        $r0[36] = "short";

        $r0[37] = "static";

        $r0[38] = "strictfp";

        $r0[39] = "super";

        $r0[40] = "switch";

        $r0[41] = "synchronized";

        $r0[42] = "this";

        $r0[43] = "throw";

        $r0[44] = "throws";

        $r0[45] = "transient";

        $r0[46] = "try";

        $r0[47] = "void";

        $r0[48] = "volatile";

        $r0[49] = "while";

        $r0[50] = "true";

        $r0[51] = "false";

        $r0[52] = "null";

        $r0[53] = "_";

        $r1 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>($r0);

        <jdk.internal.module.Checks: java.util.Set RESERVED> = $r1;

        return;
    }
}
