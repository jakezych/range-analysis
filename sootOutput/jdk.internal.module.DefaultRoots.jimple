public final class jdk.internal.module.DefaultRoots extends java.lang.Object
{

    private void <init>()
    {
        jdk.internal.module.DefaultRoots r0;

        r0 := @this: jdk.internal.module.DefaultRoots;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    static java.util.Set compute(java.lang.module.ModuleFinder, java.lang.module.ModuleFinder)
    {
        java.lang.module.ModuleFinder r0, r7;
        java.util.Set $r1, $r14;
        java.util.stream.Stream $r2, $r4, $r6, $r9, $r11;
        java.util.function.Predicate $r3, $r8;
        java.util.function.Function $r5, $r10;
        java.util.stream.Collector $r12;
        java.lang.Object $r13;

        r0 := @parameter0: java.lang.module.ModuleFinder;

        r7 := @parameter1: java.lang.module.ModuleFinder;

        $r1 = interfaceinvoke r0.<java.lang.module.ModuleFinder: java.util.Set findAll()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <jdk.internal.module.DefaultRoots$lambda_compute_0__60: java.util.function.Predicate bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);

        $r5 = staticinvoke <jdk.internal.module.DefaultRoots$descriptor__61: java.util.function.Function bootstrap$()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r5);

        $r8 = staticinvoke <jdk.internal.module.DefaultRoots$lambda_compute_1__62: java.util.function.Predicate bootstrap$(java.lang.module.ModuleFinder)>(r7);

        $r9 = interfaceinvoke $r6.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r8);

        $r10 = staticinvoke <jdk.internal.module.DefaultRoots$name__63: java.util.function.Function bootstrap$()>();

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r10);

        $r12 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toSet()>();

        $r13 = interfaceinvoke $r11.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r12);

        $r14 = (java.util.Set) $r13;

        return $r14;
    }

    public static java.util.Set compute(java.lang.module.ModuleFinder)
    {
        java.lang.module.ModuleFinder r0;
        java.util.Set $r1;

        r0 := @parameter0: java.lang.module.ModuleFinder;

        $r1 = staticinvoke <jdk.internal.module.DefaultRoots: java.util.Set compute(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder)>(r0, r0);

        return $r1;
    }

    private static boolean exportsAPI(java.lang.module.ModuleDescriptor)
    {
        java.lang.module.ModuleDescriptor r0;
        java.util.Set $r1;
        java.util.stream.Stream $r2, $r4;
        java.util.function.Predicate $r3;
        java.util.Optional $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.module.ModuleDescriptor;

        $r1 = virtualinvoke r0.<java.lang.module.ModuleDescriptor: java.util.Set exports()>();

        $r2 = interfaceinvoke $r1.<java.util.Set: java.util.stream.Stream stream()>();

        $r3 = staticinvoke <jdk.internal.module.DefaultRoots$lambda_exportsAPI_2__64: java.util.function.Predicate bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r3);

        $r5 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.Optional findAny()>();

        $z0 = virtualinvoke $r5.<java.util.Optional: boolean isPresent()>();

        return $z0;
    }

    public static boolean lambda$exportsAPI$2(java.lang.module.ModuleDescriptor$Exports)
    {
        java.lang.module.ModuleDescriptor$Exports r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.module.ModuleDescriptor$Exports;

        $z0 = virtualinvoke r0.<java.lang.module.ModuleDescriptor$Exports: boolean isQualified()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static boolean lambda$compute$1(java.lang.module.ModuleFinder, java.lang.module.ModuleDescriptor)
    {
        java.lang.module.ModuleFinder r0;
        java.lang.module.ModuleDescriptor r1;
        java.lang.String $r2;
        java.util.Optional $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0: java.lang.module.ModuleFinder;

        r1 := @parameter1: java.lang.module.ModuleDescriptor;

        $r2 = virtualinvoke r1.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r3 = interfaceinvoke r0.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>($r2);

        $z0 = virtualinvoke $r3.<java.util.Optional: boolean isPresent()>();

        if $z0 == 0 goto label1;

        $z1 = staticinvoke <jdk.internal.module.DefaultRoots: boolean exportsAPI(java.lang.module.ModuleDescriptor)>(r1);

        if $z1 == 0 goto label1;

        $z2 = 1;

        goto label2;

     label1:
        $z2 = 0;

     label2:
        return $z2;
    }

    public static boolean lambda$compute$0(java.lang.module.ModuleReference)
    {
        java.lang.module.ModuleReference r0;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.module.ModuleReference;

        $z0 = staticinvoke <jdk.internal.module.ModuleResolution: boolean doNotResolveByDefault(java.lang.module.ModuleReference)>(r0);

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }
}
