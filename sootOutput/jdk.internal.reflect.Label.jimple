class jdk.internal.reflect.Label extends java.lang.Object
{
    private final java.util.List patches;

    public void <init>()
    {
        jdk.internal.reflect.Label r0;
        java.util.ArrayList $r1;

        r0 := @this: jdk.internal.reflect.Label;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<java.util.ArrayList: void <init>()>();

        r0.<jdk.internal.reflect.Label: java.util.List patches> = $r1;

        return;
    }

    void add(jdk.internal.reflect.ClassFileAssembler, short, short, int)
    {
        jdk.internal.reflect.Label r0;
        jdk.internal.reflect.Label$PatchInfo $r1;
        jdk.internal.reflect.ClassFileAssembler r2;
        short s0, s1;
        int i2;
        java.util.List $r3;

        r0 := @this: jdk.internal.reflect.Label;

        r2 := @parameter0: jdk.internal.reflect.ClassFileAssembler;

        s0 := @parameter1: short;

        s1 := @parameter2: short;

        i2 := @parameter3: int;

        $r3 = r0.<jdk.internal.reflect.Label: java.util.List patches>;

        $r1 = new jdk.internal.reflect.Label$PatchInfo;

        specialinvoke $r1.<jdk.internal.reflect.Label$PatchInfo: void <init>(jdk.internal.reflect.ClassFileAssembler,short,short,int)>(r2, s0, s1, i2);

        interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r1);

        return;
    }

    public void bind()
    {
        jdk.internal.reflect.Label r0;
        java.util.List $r1;
        java.util.Iterator r2;
        boolean $z0;
        java.lang.Object $r3;
        jdk.internal.reflect.Label$PatchInfo r4;
        jdk.internal.reflect.ClassFileAssembler $r5, $r6, $r7;
        short s0, $s1, s3, $s4;
        int $i2, $i5;

        r0 := @this: jdk.internal.reflect.Label;

        $r1 = r0.<jdk.internal.reflect.Label: java.util.List patches>;

        r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (jdk.internal.reflect.Label$PatchInfo) $r3;

        $r5 = r4.<jdk.internal.reflect.Label$PatchInfo: jdk.internal.reflect.ClassFileAssembler asm>;

        s0 = virtualinvoke $r5.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        $s1 = r4.<jdk.internal.reflect.Label$PatchInfo: short instrBCI>;

        $i2 = s0 - $s1;

        s3 = (short) $i2;

        $r6 = r4.<jdk.internal.reflect.Label$PatchInfo: jdk.internal.reflect.ClassFileAssembler asm>;

        $s4 = r4.<jdk.internal.reflect.Label$PatchInfo: short patchBCI>;

        virtualinvoke $r6.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short,short)>($s4, s3);

        $r7 = r4.<jdk.internal.reflect.Label$PatchInfo: jdk.internal.reflect.ClassFileAssembler asm>;

        $i5 = r4.<jdk.internal.reflect.Label$PatchInfo: int stackDepth>;

        virtualinvoke $r7.<jdk.internal.reflect.ClassFileAssembler: void setStack(int)>($i5);

        goto label1;

     label2:
        return;
    }
}
