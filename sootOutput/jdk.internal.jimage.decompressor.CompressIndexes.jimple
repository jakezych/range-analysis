public class jdk.internal.jimage.decompressor.CompressIndexes extends java.lang.Object
{
    private static final int COMPRESSED_FLAG;
    private static final int HEADER_WIDTH;
    private static final int HEADER_SHIFT;

    public void <init>()
    {
        jdk.internal.jimage.decompressor.CompressIndexes r0;

        r0 := @this: jdk.internal.jimage.decompressor.CompressIndexes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.util.List decompressFlow(byte[])
    {
        java.util.ArrayList $r0;
        byte[] r2;
        int $i0, i1, $i3, i4;
        java.lang.Integer $r3;
        byte $b2;

        r2 := @parameter0: byte[];

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        i4 = 0;

     label1:
        $i0 = lengthof r2;

        if i4 >= $i0 goto label2;

        i1 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: int decompress(byte[],int)>(r2, i4);

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r3);

        $b2 = r2[i4];

        $i3 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: int getHeaderLength(byte)>($b2);

        i4 = i4 + $i3;

        goto label1;

     label2:
        return $r0;
    }

    public static int readInt(java.io.DataInputStream) throws java.io.IOException
    {
        java.io.DataInputStream r0;
        byte b0, $b2;
        int i1, $i3, i4, i5, i6;

        r0 := @parameter0: java.io.DataInputStream;

        b0 = virtualinvoke r0.<java.io.DataInputStream: byte readByte()>();

        i1 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: int getHeaderLength(byte)>(b0);

        i4 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: int getHeaderValue(byte)>(b0);

        i5 = 1;

     label1:
        if i5 >= i1 goto label2;

        i6 = i4 << 8;

        $b2 = virtualinvoke r0.<java.io.DataInputStream: byte readByte()>();

        $i3 = $b2 & 255;

        i4 = i6 | $i3;

        i5 = i5 + 1;

        goto label1;

     label2:
        return i4;
    }

    private static boolean isCompressed(byte)
    {
        byte b0;
        int $i1;
        boolean $z0;

        b0 := @parameter0: byte;

        $i1 = b0 & 128;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private static int getHeaderLength(byte)
    {
        byte b0;
        boolean $z0;
        int $i1, $i2;

        b0 := @parameter0: byte;

        $z0 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: boolean isCompressed(byte)>(b0);

        if $z0 == 0 goto label1;

        $i1 = b0 >> 5;

        $i2 = $i1 & 3;

        goto label2;

     label1:
        $i2 = 4;

     label2:
        return $i2;
    }

    private static int getHeaderValue(byte)
    {
        byte b0;
        boolean $z0;
        int $i1;

        b0 := @parameter0: byte;

        $z0 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: boolean isCompressed(byte)>(b0);

        if $z0 == 0 goto label1;

        $i1 = b0 & 31;

        goto label2;

     label1:
        $i1 = b0;

     label2:
        return $i1;
    }

    public static int decompress(byte[], int)
    {
        byte[] r0;
        int i0, i2, $i3, $i5, i6, i7, i8;
        byte b1, $b4;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        b1 = r0[i0];

        i2 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: int getHeaderLength(byte)>(b1);

        i6 = staticinvoke <jdk.internal.jimage.decompressor.CompressIndexes: int getHeaderValue(byte)>(b1);

        i7 = 1;

     label1:
        if i7 >= i2 goto label2;

        i8 = i6 << 8;

        $i3 = i0 + i7;

        $b4 = r0[$i3];

        $i5 = $b4 & 255;

        i6 = i8 | $i5;

        i7 = i7 + 1;

        goto label1;

     label2:
        return i6;
    }

    public static byte[] compress(int)
    {
        int i0, $i1, i2, $i3, $i4, $i5, $i6, i7, $i8, $i9, $i12, $i14, $i15, $i16, $i17, i19;
        byte[] r0;
        byte $b10, $b11, $b13, $b18;
        java.lang.IllegalArgumentException $r1;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("value < 0");

        throw $r1;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i0);

        i2 = 32 - $i1;

        $i3 = i2 + 3;

        $i4 = $i3 - 1;

        $i5 = $i4 >> 3;

        $i6 = $i5 + 1;

        i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, 4);

        r0 = newarray (byte)[i7];

        i19 = 0;

     label2:
        if i19 >= i7 goto label3;

        $i14 = i7 - i19;

        $i15 = $i14 - 1;

        $i16 = $i15 * 8;

        $i17 = i0 >> $i16;

        $b18 = (byte) $i17;

        r0[i19] = $b18;

        i19 = i19 + 1;

        goto label2;

     label3:
        if i7 >= 4 goto label4;

        $b11 = r0[0];

        $i8 = i7 << 5;

        $i9 = 128 | $i8;

        $b10 = (byte) $i9;

        $i12 = $b11 | $b10;

        $b13 = (byte) $i12;

        r0[0] = $b13;

     label4:
        return r0;
    }

    public static void <clinit>()
    {
        <jdk.internal.jimage.decompressor.CompressIndexes: int HEADER_SHIFT> = 5;

        <jdk.internal.jimage.decompressor.CompressIndexes: int HEADER_WIDTH> = 3;

        <jdk.internal.jimage.decompressor.CompressIndexes: int COMPRESSED_FLAG> = 128;

        return;
    }
}
