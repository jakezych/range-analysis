public final class jdk.internal.misc.Unsafe extends java.lang.Object
{
    private static final jdk.internal.misc.Unsafe theUnsafe;
    public static final int INVALID_FIELD_OFFSET;
    public static final int ARRAY_BOOLEAN_BASE_OFFSET;
    public static final int ARRAY_BYTE_BASE_OFFSET;
    public static final int ARRAY_SHORT_BASE_OFFSET;
    public static final int ARRAY_CHAR_BASE_OFFSET;
    public static final int ARRAY_INT_BASE_OFFSET;
    public static final int ARRAY_LONG_BASE_OFFSET;
    public static final int ARRAY_FLOAT_BASE_OFFSET;
    public static final int ARRAY_DOUBLE_BASE_OFFSET;
    public static final int ARRAY_OBJECT_BASE_OFFSET;
    public static final int ARRAY_BOOLEAN_INDEX_SCALE;
    public static final int ARRAY_BYTE_INDEX_SCALE;
    public static final int ARRAY_SHORT_INDEX_SCALE;
    public static final int ARRAY_CHAR_INDEX_SCALE;
    public static final int ARRAY_INT_INDEX_SCALE;
    public static final int ARRAY_LONG_INDEX_SCALE;
    public static final int ARRAY_FLOAT_INDEX_SCALE;
    public static final int ARRAY_DOUBLE_INDEX_SCALE;
    public static final int ARRAY_OBJECT_INDEX_SCALE;
    public static final int ADDRESS_SIZE;

    private static native void registerNatives();

    private void <init>()
    {
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static jdk.internal.misc.Unsafe getUnsafe()
    {
        jdk.internal.misc.Unsafe $r0;

        $r0 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        return $r0;
    }

    public native int getInt(java.lang.Object, long);

    public native void putInt(java.lang.Object, long, int);

    public native java.lang.Object getReference(java.lang.Object, long);

    public native void putReference(java.lang.Object, long, java.lang.Object);

    public native boolean getBoolean(java.lang.Object, long);

    public native void putBoolean(java.lang.Object, long, boolean);

    public native byte getByte(java.lang.Object, long);

    public native void putByte(java.lang.Object, long, byte);

    public native short getShort(java.lang.Object, long);

    public native void putShort(java.lang.Object, long, short);

    public native char getChar(java.lang.Object, long);

    public native void putChar(java.lang.Object, long, char);

    public native long getLong(java.lang.Object, long);

    public native void putLong(java.lang.Object, long, long);

    public native float getFloat(java.lang.Object, long);

    public native void putFloat(java.lang.Object, long, float);

    public native double getDouble(java.lang.Object, long);

    public native void putDouble(java.lang.Object, long, double);

    public long getAddress(java.lang.Object, long)
    {
        int $i0, $i3;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l1, $l2, $l4;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l1 := @parameter1: long;

        $i0 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $i0 != 4 goto label1;

        $i3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l1);

        $l4 = staticinvoke <java.lang.Integer: long toUnsignedLong(int)>($i3);

        return $l4;

     label1:
        $l2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l1);

        return $l2;
    }

    public void putAddress(java.lang.Object, long, long)
    {
        int $i0, $i3;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l1, l2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        $i0 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $i0 != 4 goto label1;

        $i3 = (int) l2;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r1, l1, $i3);

        goto label2;

     label1:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLong(java.lang.Object,long,long)>(r1, l1, l2);

     label2:
        return;
    }

    public native java.lang.Object getUncompressedObject(long);

    public byte getByte(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        byte $b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(null, l0);

        return $b1;
    }

    public void putByte(long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        byte b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        b1 := @parameter1: byte;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(null, l0, b1);

        return;
    }

    public short getShort(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        short $s1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(null, l0);

        return $s1;
    }

    public void putShort(long, short)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        short s1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        s1 := @parameter1: short;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(null, l0, s1);

        return;
    }

    public char getChar(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        char $c1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $c1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char getChar(java.lang.Object,long)>(null, l0);

        return $c1;
    }

    public void putChar(long, char)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        char c1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        c1 := @parameter1: char;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putChar(java.lang.Object,long,char)>(null, l0, c1);

        return;
    }

    public int getInt(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        int $i1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(null, l0);

        return $i1;
    }

    public void putInt(long, int)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        int i1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        i1 := @parameter1: int;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(null, l0, i1);

        return;
    }

    public long getLong(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, $l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(null, l0);

        return $l1;
    }

    public void putLong(long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLong(java.lang.Object,long,long)>(null, l0, l1);

        return;
    }

    public float getFloat(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        float $f0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $f0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: float getFloat(java.lang.Object,long)>(null, l0);

        return $f0;
    }

    public void putFloat(long, float)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        float f0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        f0 := @parameter1: float;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putFloat(java.lang.Object,long,float)>(null, l0, f0);

        return;
    }

    public double getDouble(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        double $d0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $d0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: double getDouble(java.lang.Object,long)>(null, l0);

        return $d0;
    }

    public void putDouble(long, double)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        double d0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        d0 := @parameter1: double;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putDouble(java.lang.Object,long,double)>(null, l0, d0);

        return;
    }

    public long getAddress(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, $l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getAddress(java.lang.Object,long)>(null, l0);

        return $l1;
    }

    public void putAddress(long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putAddress(java.lang.Object,long,long)>(null, l0, l1);

        return;
    }

    private java.lang.RuntimeException invalidInput()
    {
        java.lang.IllegalArgumentException $r0;
        jdk.internal.misc.Unsafe r1;

        r1 := @this: jdk.internal.misc.Unsafe;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>()>();

        return $r0;
    }

    private boolean is32BitClean(long)
    {
        long l0, $l1;
        byte $b2;
        jdk.internal.misc.Unsafe r0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $l1 = l0 >>> 32;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private void checkSize(long)
    {
        int $i0;
        long l1;
        byte $b2;
        jdk.internal.misc.Unsafe r0;
        java.lang.RuntimeException $r1, $r2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l1 := @parameter0: long;

        $i0 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $i0 != 4 goto label1;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean is32BitClean(long)>(l1);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r2;

     label1:
        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label2;

        $r1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r1;

     label2:
        return;
    }

    private void checkNativeAddress(long)
    {
        int $i0;
        long l1, $l2, $l3, $l4;
        byte $b5;
        jdk.internal.misc.Unsafe r0;
        java.lang.RuntimeException $r1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l1 := @parameter0: long;

        $i0 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $i0 != 4 goto label1;

        $l2 = l1 >> 32;

        $l3 = $l2 + 1L;

        $l4 = $l3 & -2L;

        $b5 = $l4 cmp 0L;

        if $b5 == 0 goto label1;

        $r1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r1;

     label1:
        return;
    }

    private void checkOffset(java.lang.Object, long)
    {
        int $i0;
        long l1;
        byte $b2;
        jdk.internal.misc.Unsafe r0;
        java.lang.RuntimeException $r1, $r2;
        boolean $z0;
        java.lang.Object r3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r3 := @parameter0: java.lang.Object;

        l1 := @parameter1: long;

        $i0 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        if $i0 != 4 goto label1;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean is32BitClean(long)>(l1);

        if $z0 != 0 goto label2;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r2;

     label1:
        $b2 = l1 cmp 0L;

        if $b2 >= 0 goto label2;

        $r1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r1;

     label2:
        return;
    }

    private void checkPointer(java.lang.Object, long)
    {
        java.lang.Object r0;
        jdk.internal.misc.Unsafe r1;
        long l0;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        if r0 != null goto label1;

        virtualinvoke r1.<jdk.internal.misc.Unsafe: void checkNativeAddress(long)>(l0);

        goto label2;

     label1:
        virtualinvoke r1.<jdk.internal.misc.Unsafe: void checkOffset(java.lang.Object,long)>(r0, l0);

     label2:
        return;
    }

    private void checkPrimitiveArray(java.lang.Class)
    {
        java.lang.Class r0, r1;
        jdk.internal.misc.Unsafe r2;
        java.lang.RuntimeException $r3;
        boolean $z0;

        r2 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Class getComponentType()>();

        if r1 == null goto label1;

        $z0 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label2;

     label1:
        $r3 = virtualinvoke r2.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r3;

     label2:
        return;
    }

    private void checkPrimitivePointer(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        java.lang.Class $r2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPointer(java.lang.Object,long)>(r1, l0);

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPrimitiveArray(java.lang.Class)>($r2);

     label1:
        return;
    }

    public long allocateMemory(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l2;
        byte $b1, $b3;
        java.lang.OutOfMemoryError $r1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void allocateMemoryChecks(long)>(l0);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return 0L;

     label1:
        l2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long allocateMemory0(long)>(l0);

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label2;

        $r1 = new java.lang.OutOfMemoryError;

        specialinvoke $r1.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r1;

     label2:
        return l2;
    }

    private void allocateMemoryChecks(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkSize(long)>(l0);

        return;
    }

    public long reallocateMemory(long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1, $l6;
        byte $b2, $b3, $b5;
        java.lang.OutOfMemoryError $r1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void reallocateMemoryChecks(long,long)>(l0, l1);

        $b2 = l1 cmp 0L;

        if $b2 != 0 goto label1;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void freeMemory(long)>(l0);

        return 0L;

     label1:
        $b3 = l0 cmp 0L;

        if $b3 != 0 goto label2;

        $l6 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long allocateMemory0(long)>(l1);

        goto label3;

     label2:
        $l6 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long reallocateMemory0(long,long)>(l0, l1);

     label3:
        $b5 = $l6 cmp 0L;

        if $b5 != 0 goto label4;

        $r1 = new java.lang.OutOfMemoryError;

        specialinvoke $r1.<java.lang.OutOfMemoryError: void <init>()>();

        throw $r1;

     label4:
        return $l6;
    }

    private void reallocateMemoryChecks(long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPointer(java.lang.Object,long)>(null, l0);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkSize(long)>(l1);

        return;
    }

    public void setMemory(java.lang.Object, long, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1;
        byte b2, $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        b2 := @parameter3: byte;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void setMemoryChecks(java.lang.Object,long,long,byte)>(r1, l0, l1, b2);

        $b3 = l1 cmp 0L;

        if $b3 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void setMemory0(java.lang.Object,long,long,byte)>(r1, l0, l1, b2);

        return;
    }

    public void setMemory(long, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1;
        byte b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        b2 := @parameter2: byte;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void setMemory(java.lang.Object,long,long,byte)>(null, l0, l1, b2);

        return;
    }

    private void setMemoryChecks(java.lang.Object, long, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1;
        byte b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        b2 := @parameter3: byte;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(r1, l0);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkSize(long)>(l1);

        return;
    }

    public void copyMemory(java.lang.Object, long, java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0, l1, l2;
        byte $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void copyMemoryChecks(java.lang.Object,long,java.lang.Object,long,long)>(r1, l0, r2, l1, l2);

        $b3 = l2 cmp 0L;

        if $b3 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void copyMemory0(java.lang.Object,long,java.lang.Object,long,long)>(r1, l0, r2, l1, l2);

        return;
    }

    public void copyMemory(long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1, l2;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void copyMemory(java.lang.Object,long,java.lang.Object,long,long)>(null, l0, null, l1, l2);

        return;
    }

    private void copyMemoryChecks(java.lang.Object, long, java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1, l2;
        java.lang.Object r1, r2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l1 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        l2 := @parameter3: long;

        l0 := @parameter4: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkSize(long)>(l0);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(r1, l1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(r2, l2);

        return;
    }

    public void copySwapMemory(java.lang.Object, long, java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0, l1, l2, l3;
        byte $b4;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        l1 := @parameter3: long;

        l2 := @parameter4: long;

        l3 := @parameter5: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void copySwapMemoryChecks(java.lang.Object,long,java.lang.Object,long,long,long)>(r1, l0, r2, l1, l2, l3);

        $b4 = l2 cmp 0L;

        if $b4 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void copySwapMemory0(java.lang.Object,long,java.lang.Object,long,long,long)>(r1, l0, r2, l1, l2, l3);

        return;
    }

    private void copySwapMemoryChecks(java.lang.Object, long, java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1, l3, l4, $l7;
        byte $b2, $b5, $b6, $b8;
        java.lang.Object r1, r2;
        java.lang.RuntimeException $r3, $r4;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l3 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        l4 := @parameter3: long;

        l0 := @parameter4: long;

        l1 := @parameter5: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkSize(long)>(l0);

        $b2 = l1 cmp 2L;

        if $b2 == 0 goto label1;

        $b5 = l1 cmp 4L;

        if $b5 == 0 goto label1;

        $b6 = l1 cmp 8L;

        if $b6 == 0 goto label1;

        $r4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r4;

     label1:
        $l7 = l0 % l1;

        $b8 = $l7 cmp 0L;

        if $b8 == 0 goto label2;

        $r3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.RuntimeException invalidInput()>();

        throw $r3;

     label2:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(r1, l3);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPrimitivePointer(java.lang.Object,long)>(r2, l4);

        return;
    }

    public void copySwapMemory(long, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1, l2, l3;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        l2 := @parameter2: long;

        l3 := @parameter3: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void copySwapMemory(java.lang.Object,long,java.lang.Object,long,long,long)>(null, l0, null, l1, l2, l3);

        return;
    }

    public void freeMemory(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;
        byte $b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void freeMemoryChecks(long)>(l0);

        $b1 = l0 cmp 0L;

        if $b1 != 0 goto label1;

        return;

     label1:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void freeMemory0(long)>(l0);

        return;
    }

    private void freeMemoryChecks(long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkPointer(java.lang.Object,long)>(null, l0);

        return;
    }

    public void writebackMemory(long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1, l2, $l5, l6;
        byte $b3;
        int $i4;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkWritebackEnabled()>();

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkWritebackMemory(long,long)>(l0, l1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void writebackPreSync0()>();

        l6 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long dataCacheLineAlignDown(long)>(l0);

        l2 = l0 + l1;

     label1:
        $b3 = l6 cmp l2;

        if $b3 >= 0 goto label2;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void writeback0(long)>(l6);

        $i4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int dataCacheLineFlushSize()>();

        $l5 = (long) $i4;

        l6 = l6 + $l5;

        goto label1;

     label2:
        virtualinvoke r0.<jdk.internal.misc.Unsafe: void writebackPostSync0()>();

        return;
    }

    private void checkWritebackMemory(long, long)
    {
        jdk.internal.misc.Unsafe r0;
        long l0, l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        l1 := @parameter1: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkNativeAddress(long)>(l0);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void checkSize(long)>(l1);

        return;
    }

    private void checkWritebackEnabled()
    {
        boolean $z0;
        java.lang.RuntimeException $r0;
        jdk.internal.misc.Unsafe r1;

        r1 := @this: jdk.internal.misc.Unsafe;

        $z0 = staticinvoke <jdk.internal.misc.Unsafe: boolean isWritebackEnabled()>();

        if $z0 != 0 goto label1;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("writebackMemory not enabled!");

        throw $r0;

     label1:
        return;
    }

    private native void writeback0(long);

    private native void writebackPreSync0();

    private native void writebackPostSync0();

    public long objectFieldOffset(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        jdk.internal.misc.Unsafe r1;
        long $l0;
        java.lang.NullPointerException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.reflect.Field;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $l0 = virtualinvoke r1.<jdk.internal.misc.Unsafe: long objectFieldOffset0(java.lang.reflect.Field)>(r0);

        return $l0;
    }

    public long objectFieldOffset(java.lang.Class, java.lang.String)
    {
        java.lang.Class r0;
        java.lang.NullPointerException $r1;
        java.lang.String r2;
        jdk.internal.misc.Unsafe r3;
        long $l0;

        r3 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label2:
        $l0 = virtualinvoke r3.<jdk.internal.misc.Unsafe: long objectFieldOffset1(java.lang.Class,java.lang.String)>(r0, r2);

        return $l0;
    }

    public long staticFieldOffset(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        jdk.internal.misc.Unsafe r1;
        long $l0;
        java.lang.NullPointerException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.reflect.Field;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $l0 = virtualinvoke r1.<jdk.internal.misc.Unsafe: long staticFieldOffset0(java.lang.reflect.Field)>(r0);

        return $l0;
    }

    public java.lang.Object staticFieldBase(java.lang.reflect.Field)
    {
        java.lang.reflect.Field r0;
        jdk.internal.misc.Unsafe r1;
        java.lang.Object $r2;
        java.lang.NullPointerException $r3;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.reflect.Field;

        if r0 != null goto label1;

        $r3 = new java.lang.NullPointerException;

        specialinvoke $r3.<java.lang.NullPointerException: void <init>()>();

        throw $r3;

     label1:
        $r2 = virtualinvoke r1.<jdk.internal.misc.Unsafe: java.lang.Object staticFieldBase0(java.lang.reflect.Field)>(r0);

        return $r2;
    }

    public boolean shouldBeInitialized(java.lang.Class)
    {
        java.lang.Class r0;
        jdk.internal.misc.Unsafe r1;
        boolean $z0;
        java.lang.NullPointerException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $z0 = virtualinvoke r1.<jdk.internal.misc.Unsafe: boolean shouldBeInitialized0(java.lang.Class)>(r0);

        return $z0;
    }

    public void ensureClassInitialized(java.lang.Class)
    {
        java.lang.Class r0;
        jdk.internal.misc.Unsafe r1;
        java.lang.NullPointerException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        virtualinvoke r1.<jdk.internal.misc.Unsafe: void ensureClassInitialized0(java.lang.Class)>(r0);

        return;
    }

    public int arrayBaseOffset(java.lang.Class)
    {
        java.lang.Class r0;
        jdk.internal.misc.Unsafe r1;
        int $i0;
        java.lang.NullPointerException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<jdk.internal.misc.Unsafe: int arrayBaseOffset0(java.lang.Class)>(r0);

        return $i0;
    }

    public int arrayIndexScale(java.lang.Class)
    {
        java.lang.Class r0;
        jdk.internal.misc.Unsafe r1;
        int $i0;
        java.lang.NullPointerException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        if r0 != null goto label1;

        $r2 = new java.lang.NullPointerException;

        specialinvoke $r2.<java.lang.NullPointerException: void <init>()>();

        throw $r2;

     label1:
        $i0 = virtualinvoke r1.<jdk.internal.misc.Unsafe: int arrayIndexScale0(java.lang.Class)>(r0);

        return $i0;
    }

    public int addressSize()
    {
        int $i0;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        $i0 = <jdk.internal.misc.Unsafe: int ADDRESS_SIZE>;

        return $i0;
    }

    public int pageSize()
    {
        int $i0;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        $i0 = <jdk.internal.misc.UnsafeConstants: int PAGE_SIZE>;

        return $i0;
    }

    public int dataCacheLineFlushSize()
    {
        int $i0;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        $i0 = <jdk.internal.misc.UnsafeConstants: int DATA_CACHE_LINE_FLUSH_SIZE>;

        return $i0;
    }

    public long dataCacheLineAlignDown(long)
    {
        long l0, $l4, $l5;
        int $i1, $i2, $i3;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        l0 := @parameter0: long;

        $i1 = <jdk.internal.misc.UnsafeConstants: int DATA_CACHE_LINE_FLUSH_SIZE>;

        $i2 = $i1 - 1;

        $i3 = $i2 ^ -1;

        $l4 = (long) $i3;

        $l5 = l0 & $l4;

        return $l5;
    }

    public static boolean isWritebackEnabled()
    {
        int $i0;
        boolean $z0;

        $i0 = <jdk.internal.misc.UnsafeConstants: int DATA_CACHE_LINE_FLUSH_SIZE>;

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.Class defineClass(java.lang.String, byte[], int, int, java.lang.ClassLoader, java.security.ProtectionDomain)
    {
        byte[] r0;
        int i0, i1;
        jdk.internal.misc.Unsafe r1;
        java.lang.String r2;
        java.lang.ClassLoader r3;
        java.security.ProtectionDomain r4;
        java.lang.Class $r5;
        java.lang.ArrayIndexOutOfBoundsException $r6;
        java.lang.NullPointerException $r7;

        r1 := @this: jdk.internal.misc.Unsafe;

        r2 := @parameter0: java.lang.String;

        r0 := @parameter1: byte[];

        i1 := @parameter2: int;

        i0 := @parameter3: int;

        r3 := @parameter4: java.lang.ClassLoader;

        r4 := @parameter5: java.security.ProtectionDomain;

        if r0 != null goto label1;

        $r7 = new java.lang.NullPointerException;

        specialinvoke $r7.<java.lang.NullPointerException: void <init>()>();

        throw $r7;

     label1:
        if i0 >= 0 goto label2;

        $r6 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r6.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r6;

     label2:
        $r5 = virtualinvoke r1.<jdk.internal.misc.Unsafe: java.lang.Class defineClass0(java.lang.String,byte[],int,int,java.lang.ClassLoader,java.security.ProtectionDomain)>(r2, r0, i1, i0, r3, r4);

        return $r5;
    }

    public native java.lang.Class defineClass0(java.lang.String, byte[], int, int, java.lang.ClassLoader, java.security.ProtectionDomain);

    public java.lang.Class defineAnonymousClass(java.lang.Class, byte[], java.lang.Object[])
    {
        java.lang.Class r0, $r6;
        java.lang.NullPointerException $r1;
        byte[] r2;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r3;
        jdk.internal.misc.Unsafe r4;
        java.lang.Object[] r5;

        r4 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: byte[];

        r5 := @parameter2: java.lang.Object[];

        if r0 == null goto label1;

        if r2 != null goto label2;

     label1:
        $r1 = new java.lang.NullPointerException;

        specialinvoke $r1.<java.lang.NullPointerException: void <init>()>();

        throw $r1;

     label2:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isArray()>();

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label4;

     label3:
        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r3;

     label4:
        $r6 = virtualinvoke r4.<jdk.internal.misc.Unsafe: java.lang.Class defineAnonymousClass0(java.lang.Class,byte[],java.lang.Object[])>(r0, r2, r5);

        return $r6;
    }

    public native java.lang.Object allocateInstance(java.lang.Class) throws java.lang.InstantiationException;

    public java.lang.Object allocateUninitializedArray(java.lang.Class, int)
    {
        java.lang.Class r0;
        boolean $z0;
        int i0;
        jdk.internal.misc.Unsafe r1;
        java.lang.Object $r2;
        java.lang.IllegalArgumentException $r3, $r4, $r5;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        if r0 != null goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Component type is null");

        throw $r5;

     label1:
        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Component type is not primitive");

        throw $r4;

     label2:
        if i0 >= 0 goto label3;

        $r3 = new java.lang.IllegalArgumentException;

        specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Negative length");

        throw $r3;

     label3:
        $r2 = virtualinvoke r1.<jdk.internal.misc.Unsafe: java.lang.Object allocateUninitializedArray0(java.lang.Class,int)>(r0, i0);

        return $r2;
    }

    private java.lang.Object allocateUninitializedArray0(java.lang.Class, int)
    {
        java.lang.Class r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        int i0;
        double[] $r9;
        long[] $r10;
        float[] $r11;
        int[] $r12;
        char[] $r13;
        short[] $r14;
        boolean[] $r15;
        byte[] $r16;
        jdk.internal.misc.Unsafe r17;

        r17 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        $r1 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r1 goto label1;

        $r16 = newarray (byte)[i0];

        return $r16;

     label1:
        $r2 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r2 goto label2;

        $r15 = newarray (boolean)[i0];

        return $r15;

     label2:
        $r3 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r3 goto label3;

        $r14 = newarray (short)[i0];

        return $r14;

     label3:
        $r4 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r4 goto label4;

        $r13 = newarray (char)[i0];

        return $r13;

     label4:
        $r5 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r5 goto label5;

        $r12 = newarray (int)[i0];

        return $r12;

     label5:
        $r6 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r6 goto label6;

        $r11 = newarray (float)[i0];

        return $r11;

     label6:
        $r7 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r7 goto label7;

        $r10 = newarray (long)[i0];

        return $r10;

     label7:
        $r8 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r8 goto label8;

        $r9 = newarray (double)[i0];

        return $r9;

     label8:
        return null;
    }

    public native void throwException(java.lang.Throwable);

    public final native boolean compareAndSetReference(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public final native java.lang.Object compareAndExchangeReference(java.lang.Object, long, java.lang.Object, java.lang.Object);

    public final java.lang.Object compareAndExchangeReferenceAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3, $r4;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $r4;
    }

    public final java.lang.Object compareAndExchangeReferenceRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3, $r4;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $r4;
    }

    public final boolean weakCompareAndSetReferencePlain(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final boolean weakCompareAndSetReferenceAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final boolean weakCompareAndSetReferenceRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final boolean weakCompareAndSetReference(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final native boolean compareAndSetInt(java.lang.Object, long, int, int);

    public final native int compareAndExchangeInt(java.lang.Object, long, int, int);

    public final int compareAndExchangeIntAcquire(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int compareAndExchangeInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        return $i3;
    }

    public final int compareAndExchangeIntRelease(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $i3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int compareAndExchangeInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        return $i3;
    }

    public final boolean weakCompareAndSetIntPlain(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        return $z0;
    }

    public final boolean weakCompareAndSetIntAcquire(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        return $z0;
    }

    public final boolean weakCompareAndSetIntRelease(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        return $z0;
    }

    public final boolean weakCompareAndSetInt(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        return $z0;
    }

    public final byte compareAndExchangeByte(java.lang.Object, long, byte, byte)
    {
        long l0, l1, $l2;
        int $i3, i4, $i6, i7, $i9, i10, i11, $i12, $i13, $i14, $i15, $i16, i18, $i19;
        boolean $z0, $z1;
        byte b5, b8, $b17;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b5 := @parameter2: byte;

        b8 := @parameter3: byte;

        l1 = l0 & -4L;

        $l2 = l0 & 3L;

        $i3 = (int) $l2;

        i18 = $i3 << 3;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label1;

        i18 = 24 - i18;

     label1:
        i4 = 255 << i18;

        $i6 = b5 & 255;

        i7 = $i6 << i18;

        $i9 = b8 & 255;

        i10 = $i9 << i18;

     label2:
        i11 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l1);

        $i19 = i11 & i4;

        if $i19 == i7 goto label3;

        $i15 = i11 & i4;

        $i16 = $i15 >> i18;

        $b17 = (byte) $i16;

        return $b17;

     label3:
        $i12 = i4 ^ -1;

        $i13 = i11 & $i12;

        $i14 = $i13 | i10;

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l1, i11, $i14);

        if $z1 == 0 goto label2;

        return b5;
    }

    public final boolean compareAndSetByte(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        if $b3 != b1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean weakCompareAndSetByte(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        return $z0;
    }

    public final boolean weakCompareAndSetByteAcquire(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        return $z0;
    }

    public final boolean weakCompareAndSetByteRelease(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        return $z0;
    }

    public final boolean weakCompareAndSetBytePlain(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        return $z0;
    }

    public final byte compareAndExchangeByteAcquire(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        return $b3;
    }

    public final byte compareAndExchangeByteRelease(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        return $b3;
    }

    public final short compareAndExchangeShort(java.lang.Object, long, short, short)
    {
        long l0, $l1, l3, $l4;
        byte $b2;
        int $i5, i6, $i8, i9, $i11, i12, i13, $i14, $i15, $i16, $i17, $i18, i20, $i21;
        boolean $z0, $z1;
        short s7, s10, $s19;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s7 := @parameter2: short;

        s10 := @parameter3: short;

        $l1 = l0 & 3L;

        $b2 = $l1 cmp 3L;

        if $b2 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Update spans the word, not supported");

        throw $r2;

     label1:
        l3 = l0 & -4L;

        $l4 = l0 & 3L;

        $i5 = (int) $l4;

        i20 = $i5 << 3;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label2;

        i20 = 16 - i20;

     label2:
        i6 = 65535 << i20;

        $i8 = s7 & 65535;

        i9 = $i8 << i20;

        $i11 = s10 & 65535;

        i12 = $i11 << i20;

     label3:
        i13 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l3);

        $i21 = i13 & i6;

        if $i21 == i9 goto label4;

        $i17 = i13 & i6;

        $i18 = $i17 >> i20;

        $s19 = (short) $i18;

        return $s19;

     label4:
        $i14 = i6 ^ -1;

        $i15 = i13 & $i14;

        $i16 = $i15 | i12;

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l3, i13, $i16);

        if $z1 == 0 goto label3;

        return s7;
    }

    public final boolean compareAndSetShort(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        if $s3 != s1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final boolean weakCompareAndSetShort(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        return $z0;
    }

    public final boolean weakCompareAndSetShortAcquire(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        return $z0;
    }

    public final boolean weakCompareAndSetShortRelease(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        return $z0;
    }

    public final boolean weakCompareAndSetShortPlain(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        return $z0;
    }

    public final short compareAndExchangeShortAcquire(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        return $s3;
    }

    public final short compareAndExchangeShortRelease(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        return $s3;
    }

    private char s2c(short)
    {
        short s0;
        char $c1;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        s0 := @parameter0: short;

        $c1 = (char) s0;

        return $c1;
    }

    private short c2s(char)
    {
        char c0;
        short $s1;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        c0 := @parameter0: char;

        $s1 = (short) c0;

        return $s1;
    }

    public final boolean compareAndSetChar(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3;
        short $s2, $s4;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        return $z0;
    }

    public final char compareAndExchangeChar(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3, $c6;
        short $s2, $s4, $s5;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $s5 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short compareAndExchangeShort(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        $c6 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s5);

        return $c6;
    }

    public final char compareAndExchangeCharAcquire(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3, $c6;
        short $s2, $s4, $s5;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $s5 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short compareAndExchangeShortAcquire(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        $c6 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s5);

        return $c6;
    }

    public final char compareAndExchangeCharRelease(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3, $c6;
        short $s2, $s4, $s5;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $s5 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short compareAndExchangeShortRelease(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        $c6 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s5);

        return $c6;
    }

    public final boolean weakCompareAndSetChar(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3;
        short $s2, $s4;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        return $z0;
    }

    public final boolean weakCompareAndSetCharAcquire(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3;
        short $s2, $s4;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        return $z0;
    }

    public final boolean weakCompareAndSetCharRelease(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3;
        short $s2, $s4;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        return $z0;
    }

    public final boolean weakCompareAndSetCharPlain(java.lang.Object, long, char, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, c3;
        short $s2, $s4;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        c3 := @parameter3: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c3);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortPlain(java.lang.Object,long,short,short)>(r1, l0, $s2, $s4);

        return $z0;
    }

    private boolean byte2bool(byte)
    {
        byte b0;
        jdk.internal.misc.Unsafe r0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        b0 := @parameter0: byte;

        if b0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    private byte bool2byte(boolean)
    {
        boolean z0;
        jdk.internal.misc.Unsafe r0;
        byte $b0;

        r0 := @this: jdk.internal.misc.Unsafe;

        z0 := @parameter0: boolean;

        if z0 == 0 goto label1;

        $b0 = 1;

        goto label2;

     label1:
        $b0 = 0;

     label2:
        return $b0;
    }

    public final boolean compareAndSetBoolean(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        return $z2;
    }

    public final boolean compareAndExchangeBoolean(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2, $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte compareAndExchangeByte(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b3);

        return $z2;
    }

    public final boolean compareAndExchangeBooleanAcquire(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2, $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte compareAndExchangeByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b3);

        return $z2;
    }

    public final boolean compareAndExchangeBooleanRelease(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2, $b3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte compareAndExchangeByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b3);

        return $z2;
    }

    public final boolean weakCompareAndSetBoolean(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        return $z2;
    }

    public final boolean weakCompareAndSetBooleanAcquire(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        return $z2;
    }

    public final boolean weakCompareAndSetBooleanRelease(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        return $z2;
    }

    public final boolean weakCompareAndSetBooleanPlain(java.lang.Object, long, boolean, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, z1, $z2;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        z1 := @parameter3: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z1);

        $z2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetBytePlain(java.lang.Object,long,byte,byte)>(r1, l0, $b1, $b2);

        return $z2;
    }

    public final boolean compareAndSetFloat(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        return $z0;
    }

    public final float compareAndExchangeFloat(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1, $f2;
        int $i1, $i2, i3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        i3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int compareAndExchangeInt(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i3);

        return $f2;
    }

    public final float compareAndExchangeFloatAcquire(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1, $f2;
        int $i1, $i2, i3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        i3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int compareAndExchangeIntAcquire(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i3);

        return $f2;
    }

    public final float compareAndExchangeFloatRelease(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1, $f2;
        int $i1, $i2, i3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        i3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int compareAndExchangeIntRelease(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        $f2 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i3);

        return $f2;
    }

    public final boolean weakCompareAndSetFloatPlain(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntPlain(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        return $z0;
    }

    public final boolean weakCompareAndSetFloatAcquire(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        return $z0;
    }

    public final boolean weakCompareAndSetFloatRelease(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        return $z0;
    }

    public final boolean weakCompareAndSetFloat(java.lang.Object, long, float, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, f1;
        int $i1, $i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        f1 := @parameter3: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, $i1, $i2);

        return $z0;
    }

    public final boolean compareAndSetDouble(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2;
        double d0, d1;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        return $z0;
    }

    public final double compareAndExchangeDouble(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2, l3;
        double d0, d1, $d2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        l3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long compareAndExchangeLong(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d2;
    }

    public final double compareAndExchangeDoubleAcquire(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2, l3;
        double d0, d1, $d2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        l3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long compareAndExchangeLongAcquire(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d2;
    }

    public final double compareAndExchangeDoubleRelease(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2, l3;
        double d0, d1, $d2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        l3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long compareAndExchangeLongRelease(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        $d2 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l3);

        return $d2;
    }

    public final boolean weakCompareAndSetDoublePlain(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2;
        double d0, d1;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongPlain(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        return $z0;
    }

    public final boolean weakCompareAndSetDoubleAcquire(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2;
        double d0, d1;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        return $z0;
    }

    public final boolean weakCompareAndSetDoubleRelease(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2;
        double d0, d1;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        return $z0;
    }

    public final boolean weakCompareAndSetDouble(java.lang.Object, long, double, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2;
        double d0, d1;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        d1 := @parameter3: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d1);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, $l1, $l2);

        return $z0;
    }

    public final native boolean compareAndSetLong(java.lang.Object, long, long, long);

    public final native long compareAndExchangeLong(java.lang.Object, long, long, long);

    public final long compareAndExchangeLongAcquire(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $l3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long compareAndExchangeLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        return $l3;
    }

    public final long compareAndExchangeLongRelease(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $l3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long compareAndExchangeLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        return $l3;
    }

    public final boolean weakCompareAndSetLongPlain(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        return $z0;
    }

    public final boolean weakCompareAndSetLongAcquire(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        return $z0;
    }

    public final boolean weakCompareAndSetLongRelease(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        return $z0;
    }

    public final boolean weakCompareAndSetLong(java.lang.Object, long, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        l2 := @parameter3: long;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        return $z0;
    }

    public native java.lang.Object getReferenceVolatile(java.lang.Object, long);

    public native void putReferenceVolatile(java.lang.Object, long, java.lang.Object);

    public native int getIntVolatile(java.lang.Object, long);

    public native void putIntVolatile(java.lang.Object, long, int);

    public native boolean getBooleanVolatile(java.lang.Object, long);

    public native void putBooleanVolatile(java.lang.Object, long, boolean);

    public native byte getByteVolatile(java.lang.Object, long);

    public native void putByteVolatile(java.lang.Object, long, byte);

    public native short getShortVolatile(java.lang.Object, long);

    public native void putShortVolatile(java.lang.Object, long, short);

    public native char getCharVolatile(java.lang.Object, long);

    public native void putCharVolatile(java.lang.Object, long, char);

    public native long getLongVolatile(java.lang.Object, long);

    public native void putLongVolatile(java.lang.Object, long, long);

    public native float getFloatVolatile(java.lang.Object, long);

    public native void putFloatVolatile(java.lang.Object, long, float);

    public native double getDoubleVolatile(java.lang.Object, long);

    public native void putDoubleVolatile(java.lang.Object, long, double);

    public final java.lang.Object getReferenceAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(r1, l0);

        return $r2;
    }

    public final boolean getBooleanAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean getBooleanVolatile(java.lang.Object,long)>(r1, l0);

        return $z0;
    }

    public final byte getByteAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte $b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        return $b1;
    }

    public final short getShortAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short $s1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        return $s1;
    }

    public final char getCharAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char $c1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $c1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char getCharVolatile(java.lang.Object,long)>(r1, l0);

        return $c1;
    }

    public final int getIntAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int $i1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        return $i1;
    }

    public final float getFloatAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float $f0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $f0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: float getFloatVolatile(java.lang.Object,long)>(r1, l0);

        return $f0;
    }

    public final long getLongAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        return $l1;
    }

    public final double getDoubleAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        double $d0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $d0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: double getDoubleVolatile(java.lang.Object,long)>(r1, l0);

        return $d0;
    }

    public final void putReferenceRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putReferenceVolatile(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return;
    }

    public final void putBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putBooleanVolatile(java.lang.Object,long,boolean)>(r1, l0, z0);

        return;
    }

    public final void putByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByteVolatile(java.lang.Object,long,byte)>(r1, l0, b1);

        return;
    }

    public final void putShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShortVolatile(java.lang.Object,long,short)>(r1, l0, s1);

        return;
    }

    public final void putCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putCharVolatile(java.lang.Object,long,char)>(r1, l0, c1);

        return;
    }

    public final void putIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(r1, l0, i1);

        return;
    }

    public final void putFloatRelease(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putFloatVolatile(java.lang.Object,long,float)>(r1, l0, f0);

        return;
    }

    public final void putLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>(r1, l0, l1);

        return;
    }

    public final void putDoubleRelease(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        double d0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putDoubleVolatile(java.lang.Object,long,double)>(r1, l0, d0);

        return;
    }

    public final java.lang.Object getReferenceOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(r1, l0);

        return $r2;
    }

    public final boolean getBooleanOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean getBooleanVolatile(java.lang.Object,long)>(r1, l0);

        return $z0;
    }

    public final byte getByteOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte $b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        return $b1;
    }

    public final short getShortOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short $s1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        return $s1;
    }

    public final char getCharOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char $c1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $c1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char getCharVolatile(java.lang.Object,long)>(r1, l0);

        return $c1;
    }

    public final int getIntOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int $i1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        return $i1;
    }

    public final float getFloatOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float $f0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $f0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: float getFloatVolatile(java.lang.Object,long)>(r1, l0);

        return $f0;
    }

    public final long getLongOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        return $l1;
    }

    public final double getDoubleOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        double $d0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $d0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: double getDoubleVolatile(java.lang.Object,long)>(r1, l0);

        return $d0;
    }

    public final void putReferenceOpaque(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putReferenceVolatile(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return;
    }

    public final void putBooleanOpaque(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putBooleanVolatile(java.lang.Object,long,boolean)>(r1, l0, z0);

        return;
    }

    public final void putByteOpaque(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByteVolatile(java.lang.Object,long,byte)>(r1, l0, b1);

        return;
    }

    public final void putShortOpaque(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShortVolatile(java.lang.Object,long,short)>(r1, l0, s1);

        return;
    }

    public final void putCharOpaque(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putCharVolatile(java.lang.Object,long,char)>(r1, l0, c1);

        return;
    }

    public final void putIntOpaque(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putIntVolatile(java.lang.Object,long,int)>(r1, l0, i1);

        return;
    }

    public final void putFloatOpaque(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putFloatVolatile(java.lang.Object,long,float)>(r1, l0, f0);

        return;
    }

    public final void putLongOpaque(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLongVolatile(java.lang.Object,long,long)>(r1, l0, l1);

        return;
    }

    public final void putDoubleOpaque(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        double d0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putDoubleVolatile(java.lang.Object,long,double)>(r1, l0, d0);

        return;
    }

    public native void unpark(java.lang.Object);

    public native void park(boolean, long);

    public int getLoadAverage(double[], int)
    {
        int i0, $i1, $i2;
        double[] r0;
        jdk.internal.misc.Unsafe r1;
        java.lang.ArrayIndexOutOfBoundsException $r2;

        r1 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: double[];

        i0 := @parameter1: int;

        if i0 < 0 goto label1;

        if i0 > 3 goto label1;

        $i1 = lengthof r0;

        if i0 <= $i1 goto label2;

     label1:
        $r2 = new java.lang.ArrayIndexOutOfBoundsException;

        specialinvoke $r2.<java.lang.ArrayIndexOutOfBoundsException: void <init>()>();

        throw $r2;

     label2:
        $i2 = virtualinvoke r1.<jdk.internal.misc.Unsafe: int getLoadAverage0(double[],int)>(r0, i0);

        return $i2;
    }

    public final int getAndAddInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = i1 + i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndAddIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 + i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndAddIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntAcquire(java.lang.Object,long)>(r1, l0);

        $i3 = i1 + i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final long getAndAddLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        $l3 = l1 + l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndAddLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 + l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndAddLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongAcquire(java.lang.Object,long)>(r1, l0);

        $l3 = l1 + l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final byte getAndAddByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = b1 + b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndAddByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 + b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndAddByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteAcquire(java.lang.Object,long)>(r1, l0);

        $i3 = b1 + b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final short getAndAddShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = s1 + s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndAddShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 + s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndAddShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortAcquire(java.lang.Object,long)>(r1, l0);

        $i3 = s1 + s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final char getAndAddChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = (short) c1;

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndAddShort(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = (char) $s3;

        return $c4;
    }

    public final char getAndAddCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = (short) c1;

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndAddShortRelease(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = (char) $s3;

        return $c4;
    }

    public final char getAndAddCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = (short) c1;

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndAddShortAcquire(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = (char) $s3;

        return $c4;
    }

    public final float getAndAddFloat(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, $i2;
        float f0, f1, $f2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f1 := @parameter2: float;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i1);

        $f2 = f0 + f1;

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f2);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, $i2);

        if $z0 == 0 goto label1;

        return f0;
    }

    public final float getAndAddFloatRelease(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, $i2;
        float f0, f1, $f2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f1 := @parameter2: float;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i1);

        $f2 = f0 + f1;

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f2);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, i1, $i2);

        if $z0 == 0 goto label1;

        return f0;
    }

    public final float getAndAddFloatAcquire(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, $i2;
        float f0, f1, $f2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f1 := @parameter2: float;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntAcquire(java.lang.Object,long)>(r1, l0);

        f0 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i1);

        $f2 = f0 + f1;

        $i2 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f2);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, i1, $i2);

        if $z0 == 0 goto label1;

        return f0;
    }

    public final double getAndAddDouble(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        double d0, d1, $d2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d1 := @parameter2: double;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l1);

        $d2 = d0 + d1;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, $l2);

        if $z0 == 0 goto label1;

        return d0;
    }

    public final double getAndAddDoubleRelease(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        double d0, d1, $d2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d1 := @parameter2: double;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l1);

        $d2 = d0 + d1;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, l1, $l2);

        if $z0 == 0 goto label1;

        return d0;
    }

    public final double getAndAddDoubleAcquire(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        double d0, d1, $d2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d1 := @parameter2: double;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongAcquire(java.lang.Object,long)>(r1, l0);

        d0 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l1);

        $d2 = d0 + d1;

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d2);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, l1, $l2);

        if $z0 == 0 goto label1;

        return d0;
    }

    public final int getAndSetInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndSetIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndSetIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntAcquire(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, i1, i2);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final long getAndSetLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndSetLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndSetLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongAcquire(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, l1, l2);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final java.lang.Object getAndSetReference(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r3 := @parameter2: java.lang.Object;

     label1:
        r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        if $z0 == 0 goto label1;

        return r2;
    }

    public final java.lang.Object getAndSetReferenceRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r3 := @parameter2: java.lang.Object;

     label1:
        r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReference(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        if $z0 == 0 goto label1;

        return r2;
    }

    public final java.lang.Object getAndSetReferenceAcquire(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r3 := @parameter2: java.lang.Object;

     label1:
        r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceAcquire(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        if $z0 == 0 goto label1;

        return r2;
    }

    public final byte getAndSetByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndSetByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndSetByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteAcquire(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, b1, b2);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final boolean getAndSetBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndSetByte(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndSetBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndSetByteRelease(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndSetBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndSetByteAcquire(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final short getAndSetShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndSetShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndSetShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortAcquire(java.lang.Object,long)>(r1, l0);

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(r1, l0, s1, s2);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final char getAndSetChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndSetShort(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndSetCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndSetShortRelease(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndSetCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndSetShortAcquire(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final float getAndSetFloat(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, $f1;
        int $i1, i2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        i2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getAndSetInt(java.lang.Object,long,int)>(r1, l0, $i1);

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i2);

        return $f1;
    }

    public final float getAndSetFloatRelease(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, $f1;
        int $i1, i2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        i2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getAndSetIntRelease(java.lang.Object,long,int)>(r1, l0, $i1);

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i2);

        return $f1;
    }

    public final float getAndSetFloatAcquire(java.lang.Object, long, float)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        float f0, $f1;
        int $i1, i2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        f0 := @parameter2: float;

        $i1 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>(f0);

        i2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getAndSetIntAcquire(java.lang.Object,long,int)>(r1, l0, $i1);

        $f1 = staticinvoke <java.lang.Float: float intBitsToFloat(int)>(i2);

        return $f1;
    }

    public final double getAndSetDouble(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, l2;
        double d0, $d1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getAndSetLong(java.lang.Object,long,long)>(r1, l0, $l1);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l2);

        return $d1;
    }

    public final double getAndSetDoubleRelease(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, l2;
        double d0, $d1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getAndSetLongRelease(java.lang.Object,long,long)>(r1, l0, $l1);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l2);

        return $d1;
    }

    public final double getAndSetDoubleAcquire(java.lang.Object, long, double)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, l2;
        double d0, $d1;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        d0 := @parameter2: double;

        $l1 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>(d0);

        l2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getAndSetLongAcquire(java.lang.Object,long,long)>(r1, l0, $l1);

        $d1 = staticinvoke <java.lang.Double: double longBitsToDouble(long)>(l2);

        return $d1;
    }

    public final boolean getAndBitwiseOrBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseOrByte(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseOrBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseOrByteRelease(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseOrBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseOrByteAcquire(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseAndBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseAndByte(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseAndBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseAndByteRelease(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseAndBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseAndByteAcquire(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseXorBoolean(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseXorByte(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseXorBooleanRelease(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseXorByteRelease(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final boolean getAndBitwiseXorBooleanAcquire(java.lang.Object, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0, $z1;
        byte $b1, $b2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte bool2byte(boolean)>(z0);

        $b2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getAndBitwiseXorByteAcquire(java.lang.Object,long,byte)>(r1, l0, $b1);

        $z1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean byte2bool(byte)>($b2);

        return $z1;
    }

    public final byte getAndBitwiseOrByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = b1 | b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseOrByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 | b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseOrByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 | b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseAndByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = b1 & b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseAndByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 & b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseAndByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 & b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseXorByte(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByteVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = b1 ^ b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByte(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseXorByteRelease(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 ^ b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteRelease(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final byte getAndBitwiseXorByteAcquire(java.lang.Object, long, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        byte b1, b2, $b4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b2 := @parameter2: byte;

     label1:
        b1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $i3 = b1 ^ b2;

        $b4 = (byte) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetByteAcquire(java.lang.Object,long,byte,byte)>(r1, l0, b1, $b4);

        if $z0 == 0 goto label1;

        return b1;
    }

    public final char getAndBitwiseOrChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseOrShort(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseOrCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseOrShortRelease(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseOrCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseOrShortAcquire(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseAndChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseAndShort(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseAndCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseAndShortRelease(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseAndCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseAndShortAcquire(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseXorChar(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseXorShort(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseXorCharRelease(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseXorShortRelease(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final char getAndBitwiseXorCharAcquire(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1, $c4;
        short $s2, $s3;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short c2s(char)>(c1);

        $s3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getAndBitwiseXorShortAcquire(java.lang.Object,long,short)>(r1, l0, $s2);

        $c4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char s2c(short)>($s3);

        return $c4;
    }

    public final short getAndBitwiseOrShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = s1 | s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseOrShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 | s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseOrShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 | s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseAndShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = s1 & s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseAndShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 & s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseAndShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 & s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseXorShort(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = s1 ^ s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShort(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseXorShortRelease(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 ^ s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortRelease(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final short getAndBitwiseXorShortAcquire(java.lang.Object, long, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short s1, s2, $s4;
        int $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s2 := @parameter2: short;

     label1:
        s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $i3 = s1 ^ s2;

        $s4 = (short) $i3;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetShortAcquire(java.lang.Object,long,short,short)>(r1, l0, s1, $s4);

        if $z0 == 0 goto label1;

        return s1;
    }

    public final int getAndBitwiseOrInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = i1 | i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseOrIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 | i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseOrIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 | i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseAndInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = i1 & i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseAndIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 & i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseAndIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 & i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseXorInt(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntVolatile(java.lang.Object,long)>(r1, l0);

        $i3 = i1 ^ i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetInt(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseXorIntRelease(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 ^ i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntRelease(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final int getAndBitwiseXorIntAcquire(java.lang.Object, long, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int i1, i2, $i3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i2 := @parameter2: int;

     label1:
        i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $i3 = i1 ^ i2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetIntAcquire(java.lang.Object,long,int,int)>(r1, l0, i1, $i3);

        if $z0 == 0 goto label1;

        return i1;
    }

    public final long getAndBitwiseOrLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        $l3 = l1 | l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseOrLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 | l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseOrLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 | l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseAndLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        $l3 = l1 & l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseAndLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 & l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseAndLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 & l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseXorLong(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongVolatile(java.lang.Object,long)>(r1, l0);

        $l3 = l1 ^ l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLong(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseXorLongRelease(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 ^ l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongRelease(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public final long getAndBitwiseXorLongAcquire(java.lang.Object, long, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, l2, $l3;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l2 := @parameter2: long;

     label1:
        l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        $l3 = l1 ^ l2;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetLongAcquire(java.lang.Object,long,long,long)>(r1, l0, l1, $l3);

        if $z0 == 0 goto label1;

        return l1;
    }

    public native void loadFence();

    public native void storeFence();

    public native void fullFence();

    public final void loadLoadFence()
    {
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void loadFence()>();

        return;
    }

    public final void storeStoreFence()
    {
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void storeFence()>();

        return;
    }

    private static void throwIllegalAccessError()
    {
        java.lang.IllegalAccessError $r0;

        $r0 = new java.lang.IllegalAccessError;

        specialinvoke $r0.<java.lang.IllegalAccessError: void <init>()>();

        throw $r0;
    }

    private static void throwNoSuchMethodError()
    {
        java.lang.NoSuchMethodError $r0;

        $r0 = new java.lang.NoSuchMethodError;

        specialinvoke $r0.<java.lang.NoSuchMethodError: void <init>()>();

        throw $r0;
    }

    public final boolean isBigEndian()
    {
        boolean $z0;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        return $z0;
    }

    public final boolean unalignedAccess()
    {
        boolean $z0;
        jdk.internal.misc.Unsafe r0;

        r0 := @this: jdk.internal.misc.Unsafe;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean UNALIGNED_ACCESS>;

        return $z0;
    }

    public final long getLongUnaligned(java.lang.Object, long)
    {
        long l0, $l1, $l3, $l5, $l8, $l10, $l12, $l14, $l16, $l18, $l20, $l22, $l24, $l26, $l28, $l30, $l32, $l34, $l35;
        byte $b2, $b4, $b6, $b7, $b9, $b11, $b13, $b15, $b17, $b19, $b21;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        short $s23, $s25, $s27, $s29;
        int $i31, $i33;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $l1 = l0 & 7L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $l35 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLong(java.lang.Object,long)>(r1, l0);

        return $l35;

     label1:
        $l3 = l0 & 3L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        $i31 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        $l32 = l0 + 4L;

        $i33 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, $l32);

        $l34 = staticinvoke <jdk.internal.misc.Unsafe: long makeLong(int,int)>($i31, $i33);

        return $l34;

     label2:
        $l5 = l0 & 1L;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label3;

        $s23 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $l24 = l0 + 2L;

        $s25 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, $l24);

        $l26 = l0 + 4L;

        $s27 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, $l26);

        $l28 = l0 + 6L;

        $s29 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, $l28);

        $l30 = staticinvoke <jdk.internal.misc.Unsafe: long makeLong(short,short,short,short)>($s23, $s25, $s27, $s29);

        return $l30;

     label3:
        $b7 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $l8 = l0 + 1L;

        $b9 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l8);

        $l10 = l0 + 2L;

        $b11 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l10);

        $l12 = l0 + 3L;

        $b13 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l12);

        $l14 = l0 + 4L;

        $b15 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l14);

        $l16 = l0 + 5L;

        $b17 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l16);

        $l18 = l0 + 6L;

        $b19 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l18);

        $l20 = l0 + 7L;

        $b21 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l20);

        $l22 = staticinvoke <jdk.internal.misc.Unsafe: long makeLong(byte,byte,byte,byte,byte,byte,byte,byte)>($b7, $b9, $b11, $b13, $b15, $b17, $b19, $b21);

        return $l22;
    }

    public final long getLongUnaligned(java.lang.Object, long, boolean)
    {
        boolean z0;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l1, $l2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $l1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: long getLongUnaligned(java.lang.Object,long)>(r1, l0);

        $l2 = staticinvoke <jdk.internal.misc.Unsafe: long convEndian(boolean,long)>(z0, $l1);

        return $l2;
    }

    public final int getIntUnaligned(java.lang.Object, long)
    {
        long l0, $l1, $l3, $l6, $l8, $l10, $l14;
        byte $b2, $b4, $b5, $b7, $b9, $b11;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        int $i12, $i16, $i17;
        short $s13, $s15;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $l1 = l0 & 3L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $i17 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getInt(java.lang.Object,long)>(r1, l0);

        return $i17;

     label1:
        $l3 = l0 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        $s13 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        $l14 = l0 + 2L;

        $s15 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, $l14);

        $i16 = staticinvoke <jdk.internal.misc.Unsafe: int makeInt(short,short)>($s13, $s15);

        return $i16;

     label2:
        $b5 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $l6 = l0 + 1L;

        $b7 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l6);

        $l8 = l0 + 2L;

        $b9 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l8);

        $l10 = l0 + 3L;

        $b11 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l10);

        $i12 = staticinvoke <jdk.internal.misc.Unsafe: int makeInt(byte,byte,byte,byte)>($b5, $b7, $b9, $b11);

        return $i12;
    }

    public final int getIntUnaligned(java.lang.Object, long, boolean)
    {
        boolean z0;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        int $i1, $i2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $i1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: int getIntUnaligned(java.lang.Object,long)>(r1, l0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int convEndian(boolean,int)>(z0, $i1);

        return $i2;
    }

    public final short getShortUnaligned(java.lang.Object, long)
    {
        long l0, $l1, $l4;
        byte $b2, $b3, $b5;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        short $s6, $s7;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $l1 = l0 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $s7 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShort(java.lang.Object,long)>(r1, l0);

        return $s7;

     label1:
        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $l4 = l0 + 1L;

        $b5 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l4);

        $s6 = staticinvoke <jdk.internal.misc.Unsafe: short makeShort(byte,byte)>($b3, $b5);

        return $s6;
    }

    public final short getShortUnaligned(java.lang.Object, long, boolean)
    {
        boolean z0;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        short $s1, $s2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $s1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: short getShortUnaligned(java.lang.Object,long)>(r1, l0);

        $s2 = staticinvoke <jdk.internal.misc.Unsafe: short convEndian(boolean,short)>(z0, $s1);

        return $s2;
    }

    public final char getCharUnaligned(java.lang.Object, long)
    {
        long l0, $l1, $l4;
        byte $b2, $b3, $b5;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        short $s6;
        char $c7, $c8;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $l1 = l0 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        $c8 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char getChar(java.lang.Object,long)>(r1, l0);

        return $c8;

     label1:
        $b3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, l0);

        $l4 = l0 + 1L;

        $b5 = virtualinvoke r0.<jdk.internal.misc.Unsafe: byte getByte(java.lang.Object,long)>(r1, $l4);

        $s6 = staticinvoke <jdk.internal.misc.Unsafe: short makeShort(byte,byte)>($b3, $b5);

        $c7 = (char) $s6;

        return $c7;
    }

    public final char getCharUnaligned(java.lang.Object, long, boolean)
    {
        boolean z0;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char $c1, $c2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        z0 := @parameter2: boolean;

        $c1 = virtualinvoke r0.<jdk.internal.misc.Unsafe: char getCharUnaligned(java.lang.Object,long)>(r1, l0);

        $c2 = staticinvoke <jdk.internal.misc.Unsafe: char convEndian(boolean,char)>(z0, $c1);

        return $c2;
    }

    public final void putLongUnaligned(java.lang.Object, long, long)
    {
        long l0, $l1, $l3, $l5, l7, $l8, $l10, $l12, $l14, $l16, $l18, $l20, $l22, $l32, $l34, $l36, $l38, $l44, $l45;
        byte $b2, $b4, $b6, $b24, $b25, $b26, $b27, $b28, $b29, $b30, $b31;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        int $i9, $i11, $i13, $i15, $i17, $i19, $i21, $i23, $i33, $i35, $i37, $i39, $i46, $i47;
        short $s40, $s41, $s42, $s43;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l7 := @parameter2: long;

        $l1 = l0 & 7L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLong(java.lang.Object,long,long)>(r1, l0, l7);

        goto label4;

     label1:
        $l3 = l0 & 3L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        $l44 = l7 >> 0;

        $i47 = (int) $l44;

        $l45 = l7 >>> 32;

        $i46 = (int) $l45;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLongParts(java.lang.Object,long,int,int)>(r1, l0, $i47, $i46);

        goto label4;

     label2:
        $l5 = l0 & 1L;

        $b6 = $l5 cmp 0L;

        if $b6 != 0 goto label3;

        $l32 = l7 >>> 0;

        $i33 = (int) $l32;

        $s43 = (short) $i33;

        $l34 = l7 >>> 16;

        $i35 = (int) $l34;

        $s42 = (short) $i35;

        $l36 = l7 >>> 32;

        $i37 = (int) $l36;

        $s41 = (short) $i37;

        $l38 = l7 >>> 48;

        $i39 = (int) $l38;

        $s40 = (short) $i39;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLongParts(java.lang.Object,long,short,short,short,short)>(r1, l0, $s43, $s42, $s41, $s40);

        goto label4;

     label3:
        $l8 = l7 >>> 0;

        $i9 = (int) $l8;

        $b31 = (byte) $i9;

        $l10 = l7 >>> 8;

        $i11 = (int) $l10;

        $b30 = (byte) $i11;

        $l12 = l7 >>> 16;

        $i13 = (int) $l12;

        $b29 = (byte) $i13;

        $l14 = l7 >>> 24;

        $i15 = (int) $l14;

        $b28 = (byte) $i15;

        $l16 = l7 >>> 32;

        $i17 = (int) $l16;

        $b27 = (byte) $i17;

        $l18 = l7 >>> 40;

        $i19 = (int) $l18;

        $b26 = (byte) $i19;

        $l20 = l7 >>> 48;

        $i21 = (int) $l20;

        $b25 = (byte) $i21;

        $l22 = l7 >>> 56;

        $i23 = (int) $l22;

        $b24 = (byte) $i23;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLongParts(java.lang.Object,long,byte,byte,byte,byte,byte,byte,byte,byte)>(r1, l0, $b31, $b30, $b29, $b28, $b27, $b26, $b25, $b24);

     label4:
        return;
    }

    public final void putLongUnaligned(java.lang.Object, long, long, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, l1, $l2;
        boolean z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        l1 := @parameter2: long;

        z0 := @parameter3: boolean;

        $l2 = staticinvoke <jdk.internal.misc.Unsafe: long convEndian(boolean,long)>(z0, l1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putLongUnaligned(java.lang.Object,long,long)>(r1, l0, $l2);

        return;
    }

    public final void putIntUnaligned(java.lang.Object, long, int)
    {
        long l0, $l1, $l3;
        byte $b2, $b4, $b10, $b11, $b12, $b13;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        int i5, $i6, $i7, $i8, $i9, $i14, $i15;
        short $s16, $s17;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i5 := @parameter2: int;

        $l1 = l0 & 3L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r1, l0, i5);

        goto label3;

     label1:
        $l3 = l0 & 1L;

        $b4 = $l3 cmp 0L;

        if $b4 != 0 goto label2;

        $i14 = i5 >> 0;

        $s17 = (short) $i14;

        $i15 = i5 >>> 16;

        $s16 = (short) $i15;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putIntParts(java.lang.Object,long,short,short)>(r1, l0, $s17, $s16);

        goto label3;

     label2:
        $i6 = i5 >>> 0;

        $b13 = (byte) $i6;

        $i7 = i5 >>> 8;

        $b12 = (byte) $i7;

        $i8 = i5 >>> 16;

        $b11 = (byte) $i8;

        $i9 = i5 >>> 24;

        $b10 = (byte) $i9;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putIntParts(java.lang.Object,long,byte,byte,byte,byte)>(r1, l0, $b13, $b12, $b11, $b10);

     label3:
        return;
    }

    public final void putIntUnaligned(java.lang.Object, long, int, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0;
        int i1, $i2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        z0 := @parameter3: boolean;

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int convEndian(boolean,int)>(z0, i1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putIntUnaligned(java.lang.Object,long,int)>(r1, l0, $i2);

        return;
    }

    public final void putShortUnaligned(java.lang.Object, long, short)
    {
        long l0, $l1;
        byte $b2, $b6, $b7;
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        short s3;
        int $i4, $i5;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s3 := @parameter2: short;

        $l1 = l0 & 1L;

        $b2 = $l1 cmp 0L;

        if $b2 != 0 goto label1;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, l0, s3);

        goto label2;

     label1:
        $i4 = s3 >>> 0;

        $b7 = (byte) $i4;

        $i5 = s3 >>> 8;

        $b6 = (byte) $i5;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShortParts(java.lang.Object,long,byte,byte)>(r1, l0, $b7, $b6);

     label2:
        return;
    }

    public final void putShortUnaligned(java.lang.Object, long, short, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0;
        short s1, $s2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        z0 := @parameter3: boolean;

        $s2 = staticinvoke <jdk.internal.misc.Unsafe: short convEndian(boolean,short)>(z0, s1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShortUnaligned(java.lang.Object,long,short)>(r1, l0, $s2);

        return;
    }

    public final void putCharUnaligned(java.lang.Object, long, char)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        char c1;
        short $s2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        $s2 = (short) c1;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShortUnaligned(java.lang.Object,long,short)>(r1, l0, $s2);

        return;
    }

    public final void putCharUnaligned(java.lang.Object, long, char, boolean)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0;
        boolean z0;
        char c1, $c2;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        c1 := @parameter2: char;

        z0 := @parameter3: boolean;

        $c2 = staticinvoke <jdk.internal.misc.Unsafe: char convEndian(boolean,char)>(z0, c1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putCharUnaligned(java.lang.Object,long,char)>(r1, l0, $c2);

        return;
    }

    private static int pickPos(int, int)
    {
        boolean $z0;
        int i0, i1, $i2;

        i1 := @parameter0: int;

        i0 := @parameter1: int;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label1;

        $i2 = i1 - i0;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    private static long makeLong(byte, byte, byte, byte, byte, byte, byte, byte)
    {
        byte b0, b3, b8, b13, b18, b23, b28, b33;
        long $l1, $l4, $l5, $l7, $l9, $l10, $l12, $l14, $l15, $l17, $l19, $l20, $l22, $l24, $l25, $l27, $l29, $l30, $l32, $l34, $l35, $l37, $l38;
        int $i2, $i6, $i11, $i16, $i21, $i26, $i31, $i36;

        b0 := @parameter0: byte;

        b3 := @parameter1: byte;

        b8 := @parameter2: byte;

        b13 := @parameter3: byte;

        b18 := @parameter4: byte;

        b23 := @parameter5: byte;

        b28 := @parameter6: byte;

        b33 := @parameter7: byte;

        $l1 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 0);

        $l4 = $l1 << $i2;

        $l5 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b3);

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 8);

        $l7 = $l5 << $i6;

        $l9 = $l4 | $l7;

        $l10 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b8);

        $i11 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 16);

        $l12 = $l10 << $i11;

        $l14 = $l9 | $l12;

        $l15 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b13);

        $i16 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 24);

        $l17 = $l15 << $i16;

        $l19 = $l14 | $l17;

        $l20 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b18);

        $i21 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 32);

        $l22 = $l20 << $i21;

        $l24 = $l19 | $l22;

        $l25 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b23);

        $i26 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 40);

        $l27 = $l25 << $i26;

        $l29 = $l24 | $l27;

        $l30 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b28);

        $i31 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 48);

        $l32 = $l30 << $i31;

        $l34 = $l29 | $l32;

        $l35 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(byte)>(b33);

        $i36 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(56, 56);

        $l37 = $l35 << $i36;

        $l38 = $l34 | $l37;

        return $l38;
    }

    private static long makeLong(short, short, short, short)
    {
        short s0, s3, s8, s13;
        long $l1, $l4, $l5, $l7, $l9, $l10, $l12, $l14, $l15, $l17, $l18;
        int $i2, $i6, $i11, $i16;

        s0 := @parameter0: short;

        s3 := @parameter1: short;

        s8 := @parameter2: short;

        s13 := @parameter3: short;

        $l1 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(s0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 0);

        $l4 = $l1 << $i2;

        $l5 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(s3);

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 16);

        $l7 = $l5 << $i6;

        $l9 = $l4 | $l7;

        $l10 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(s8);

        $i11 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 32);

        $l12 = $l10 << $i11;

        $l14 = $l9 | $l12;

        $l15 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(short)>(s13);

        $i16 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(48, 48);

        $l17 = $l15 << $i16;

        $l18 = $l14 | $l17;

        return $l18;
    }

    private static long makeLong(int, int)
    {
        int i0, $i2, i3, $i6;
        long $l1, $l4, $l5, $l7, $l8;

        i0 := @parameter0: int;

        i3 := @parameter1: int;

        $l1 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(int)>(i0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(32, 0);

        $l4 = $l1 << $i2;

        $l5 = staticinvoke <jdk.internal.misc.Unsafe: long toUnsignedLong(int)>(i3);

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(32, 32);

        $l7 = $l5 << $i6;

        $l8 = $l4 | $l7;

        return $l8;
    }

    private static int makeInt(short, short)
    {
        short s0, s3;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8;

        s0 := @parameter0: short;

        s3 := @parameter1: short;

        $i1 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(short)>(s0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(16, 0);

        $i4 = $i1 << $i2;

        $i5 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(short)>(s3);

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(16, 16);

        $i7 = $i5 << $i6;

        $i8 = $i4 | $i7;

        return $i8;
    }

    private static int makeInt(byte, byte, byte, byte)
    {
        byte b0, b3, b8, b13;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i9, $i10, $i11, $i12, $i14, $i15, $i16, $i17, $i18;

        b0 := @parameter0: byte;

        b3 := @parameter1: byte;

        b8 := @parameter2: byte;

        b13 := @parameter3: byte;

        $i1 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(b0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 0);

        $i4 = $i1 << $i2;

        $i5 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(b3);

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 8);

        $i7 = $i5 << $i6;

        $i9 = $i4 | $i7;

        $i10 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(b8);

        $i11 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 16);

        $i12 = $i10 << $i11;

        $i14 = $i9 | $i12;

        $i15 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(b13);

        $i16 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(24, 24);

        $i17 = $i15 << $i16;

        $i18 = $i14 | $i17;

        return $i18;
    }

    private static short makeShort(byte, byte)
    {
        byte b0, b3;
        int $i1, $i2, $i4, $i5, $i6, $i7, $i8;
        short $s9;

        b0 := @parameter0: byte;

        b3 := @parameter1: byte;

        $i1 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(b0);

        $i2 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(8, 0);

        $i4 = $i1 << $i2;

        $i5 = staticinvoke <jdk.internal.misc.Unsafe: int toUnsignedInt(byte)>(b3);

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pickPos(int,int)>(8, 8);

        $i7 = $i5 << $i6;

        $i8 = $i4 | $i7;

        $s9 = (short) $i8;

        return $s9;
    }

    private static byte pick(byte, byte)
    {
        boolean $z0;
        byte b0, b1, $b2;

        b0 := @parameter0: byte;

        b1 := @parameter1: byte;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label1;

        $b2 = b1;

        goto label2;

     label1:
        $b2 = b0;

     label2:
        return $b2;
    }

    private static short pick(short, short)
    {
        boolean $z0;
        short s0, s1, $s2;

        s0 := @parameter0: short;

        s1 := @parameter1: short;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label1;

        $s2 = s1;

        goto label2;

     label1:
        $s2 = s0;

     label2:
        return $s2;
    }

    private static int pick(int, int)
    {
        boolean $z0;
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $z0 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label1;

        $i2 = i1;

        goto label2;

     label1:
        $i2 = i0;

     label2:
        return $i2;
    }

    private void putLongParts(java.lang.Object, long, byte, byte, byte, byte, byte, byte, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l3, $l7, $l11, $l15, $l17, $l19, $l21, $l23;
        byte b1, b2, $b4, b5, b6, $b8, b9, b10, $b12, b13, b14, $b16, $b18, $b20, $b22, $b24;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b5 := @parameter3: byte;

        b9 := @parameter4: byte;

        b13 := @parameter5: byte;

        b14 := @parameter6: byte;

        b10 := @parameter7: byte;

        b6 := @parameter8: byte;

        b2 := @parameter9: byte;

        $l3 = l0 + 0L;

        $b4 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b1, b2);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l3, $b4);

        $l7 = l0 + 1L;

        $b8 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b5, b6);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l7, $b8);

        $l11 = l0 + 2L;

        $b12 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b9, b10);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l11, $b12);

        $l15 = l0 + 3L;

        $b16 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b13, b14);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l15, $b16);

        $l17 = l0 + 4L;

        $b18 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b14, b13);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l17, $b18);

        $l19 = l0 + 5L;

        $b20 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b10, b9);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l19, $b20);

        $l21 = l0 + 6L;

        $b22 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b6, b5);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l21, $b22);

        $l23 = l0 + 7L;

        $b24 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b2, b1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l23, $b24);

        return;
    }

    private void putLongParts(java.lang.Object, long, short, short, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l3, $l7, $l9, $l11;
        short s1, s2, $s4, s5, s6, $s8, $s10, $s12;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s5 := @parameter3: short;

        s6 := @parameter4: short;

        s2 := @parameter5: short;

        $l3 = l0 + 0L;

        $s4 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(s1, s2);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l3, $s4);

        $l7 = l0 + 2L;

        $s8 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(s5, s6);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l7, $s8);

        $l9 = l0 + 4L;

        $s10 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(s6, s5);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l9, $s10);

        $l11 = l0 + 6L;

        $s12 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(s2, s1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l11, $s12);

        return;
    }

    private void putLongParts(java.lang.Object, long, int, int)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l3, $l5;
        int i1, i2, $i4, $i6;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $l3 = l0 + 0L;

        $i4 = staticinvoke <jdk.internal.misc.Unsafe: int pick(int,int)>(i1, i2);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r1, $l3, $i4);

        $l5 = l0 + 4L;

        $i6 = staticinvoke <jdk.internal.misc.Unsafe: int pick(int,int)>(i2, i1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r1, $l5, $i6);

        return;
    }

    private void putIntParts(java.lang.Object, long, short, short)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l3, $l5;
        short s1, s2, $s4, $s6;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        s1 := @parameter2: short;

        s2 := @parameter3: short;

        $l3 = l0 + 0L;

        $s4 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(s1, s2);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l3, $s4);

        $l5 = l0 + 2L;

        $s6 = staticinvoke <jdk.internal.misc.Unsafe: short pick(short,short)>(s2, s1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r1, $l5, $s6);

        return;
    }

    private void putIntParts(java.lang.Object, long, byte, byte, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l3, $l7, $l9, $l11;
        byte b1, b2, $b4, b5, b6, $b8, $b10, $b12;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b5 := @parameter3: byte;

        b6 := @parameter4: byte;

        b2 := @parameter5: byte;

        $l3 = l0 + 0L;

        $b4 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b1, b2);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l3, $b4);

        $l7 = l0 + 1L;

        $b8 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b5, b6);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l7, $b8);

        $l9 = l0 + 2L;

        $b10 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b6, b5);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l9, $b10);

        $l11 = l0 + 3L;

        $b12 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b2, b1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l11, $b12);

        return;
    }

    private void putShortParts(java.lang.Object, long, byte, byte)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1;
        long l0, $l3, $l5;
        byte b1, b2, $b4, $b6;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        b1 := @parameter2: byte;

        b2 := @parameter3: byte;

        $l3 = l0 + 0L;

        $b4 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b1, b2);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l3, $b4);

        $l5 = l0 + 1L;

        $b6 = staticinvoke <jdk.internal.misc.Unsafe: byte pick(byte,byte)>(b2, b1);

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r1, $l5, $b6);

        return;
    }

    private static int toUnsignedInt(byte)
    {
        byte b0;
        int $i1;

        b0 := @parameter0: byte;

        $i1 = b0 & 255;

        return $i1;
    }

    private static int toUnsignedInt(short)
    {
        short s0;
        int $i1;

        s0 := @parameter0: short;

        $i1 = s0 & 65535;

        return $i1;
    }

    private static long toUnsignedLong(byte)
    {
        byte b0;
        long $l1, $l2;

        b0 := @parameter0: byte;

        $l1 = (long) b0;

        $l2 = $l1 & 255L;

        return $l2;
    }

    private static long toUnsignedLong(short)
    {
        short s0;
        long $l1, $l2;

        s0 := @parameter0: short;

        $l1 = (long) s0;

        $l2 = $l1 & 65535L;

        return $l2;
    }

    private static long toUnsignedLong(int)
    {
        int i0;
        long $l1, $l2;

        i0 := @parameter0: int;

        $l1 = (long) i0;

        $l2 = $l1 & 4294967295L;

        return $l2;
    }

    private static char convEndian(boolean, char)
    {
        boolean z0, $z1;
        char c0, $c1;

        z0 := @parameter0: boolean;

        c0 := @parameter1: char;

        $z1 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if z0 != $z1 goto label1;

        $c1 = c0;

        goto label2;

     label1:
        $c1 = staticinvoke <java.lang.Character: char reverseBytes(char)>(c0);

     label2:
        return $c1;
    }

    private static short convEndian(boolean, short)
    {
        boolean z0, $z1;
        short s0, $s1;

        z0 := @parameter0: boolean;

        s0 := @parameter1: short;

        $z1 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if z0 != $z1 goto label1;

        $s1 = s0;

        goto label2;

     label1:
        $s1 = staticinvoke <java.lang.Short: short reverseBytes(short)>(s0);

     label2:
        return $s1;
    }

    private static int convEndian(boolean, int)
    {
        boolean z0, $z1;
        int i0, $i1;

        z0 := @parameter0: boolean;

        i0 := @parameter1: int;

        $z1 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if z0 != $z1 goto label1;

        $i1 = i0;

        goto label2;

     label1:
        $i1 = staticinvoke <java.lang.Integer: int reverseBytes(int)>(i0);

     label2:
        return $i1;
    }

    private static long convEndian(boolean, long)
    {
        boolean z0, $z1;
        long l0, $l1;

        z0 := @parameter0: boolean;

        l0 := @parameter1: long;

        $z1 = <jdk.internal.misc.UnsafeConstants: boolean BIG_ENDIAN>;

        if z0 != $z1 goto label1;

        $l1 = l0;

        goto label2;

     label1:
        $l1 = staticinvoke <java.lang.Long: long reverseBytes(long)>(l0);

     label2:
        return $l1;
    }

    private native long allocateMemory0(long);

    private native long reallocateMemory0(long, long);

    private native void freeMemory0(long);

    private native void setMemory0(java.lang.Object, long, long, byte);

    private native void copyMemory0(java.lang.Object, long, java.lang.Object, long, long);

    private native void copySwapMemory0(java.lang.Object, long, java.lang.Object, long, long, long);

    private native long objectFieldOffset0(java.lang.reflect.Field);

    private native long objectFieldOffset1(java.lang.Class, java.lang.String);

    private native long staticFieldOffset0(java.lang.reflect.Field);

    private native java.lang.Object staticFieldBase0(java.lang.reflect.Field);

    private native boolean shouldBeInitialized0(java.lang.Class);

    private native void ensureClassInitialized0(java.lang.Class);

    private native int arrayBaseOffset0(java.lang.Class);

    private native int arrayIndexScale0(java.lang.Class);

    private native java.lang.Class defineAnonymousClass0(java.lang.Class, byte[], java.lang.Object[]);

    private native int getLoadAverage0(double[], int);

    public void invokeCleaner(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0;
        sun.nio.ch.DirectBuffer r1;
        java.lang.Object $r2;
        jdk.internal.ref.Cleaner r3;
        java.lang.IllegalArgumentException $r4, $r5;
        jdk.internal.misc.Unsafe r6;

        r6 := @this: jdk.internal.misc.Unsafe;

        r0 := @parameter0: java.nio.ByteBuffer;

        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean isDirect()>();

        if $z0 != 0 goto label1;

        $r5 = new java.lang.IllegalArgumentException;

        specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("buffer is non-direct");

        throw $r5;

     label1:
        r1 = (sun.nio.ch.DirectBuffer) r0;

        $r2 = interfaceinvoke r1.<sun.nio.ch.DirectBuffer: java.lang.Object attachment()>();

        if $r2 == null goto label2;

        $r4 = new java.lang.IllegalArgumentException;

        specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("duplicate or slice");

        throw $r4;

     label2:
        r3 = interfaceinvoke r1.<sun.nio.ch.DirectBuffer: jdk.internal.ref.Cleaner cleaner()>();

        if r3 == null goto label3;

        virtualinvoke r3.<jdk.internal.ref.Cleaner: void clean()>();

     label3:
        return;
    }

    public final java.lang.Object getObject(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReference(java.lang.Object,long)>(r1, l0);

        return $r2;
    }

    public final java.lang.Object getObjectVolatile(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceVolatile(java.lang.Object,long)>(r1, l0);

        return $r2;
    }

    public final java.lang.Object getObjectAcquire(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceAcquire(java.lang.Object,long)>(r1, l0);

        return $r2;
    }

    public final java.lang.Object getObjectOpaque(java.lang.Object, long)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, $r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        $r2 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getReferenceOpaque(java.lang.Object,long)>(r1, l0);

        return $r2;
    }

    public final void putObject(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putReference(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return;
    }

    public final void putObjectVolatile(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putReferenceVolatile(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return;
    }

    public final void putObjectOpaque(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putReferenceOpaque(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return;
    }

    public final void putObjectRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        virtualinvoke r0.<jdk.internal.misc.Unsafe: void putReferenceRelease(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return;
    }

    public final java.lang.Object getAndSetObject(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, $r3;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        $r3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getAndSetReference(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return $r3;
    }

    public final java.lang.Object getAndSetObjectAcquire(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, $r3;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        $r3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return $r3;
    }

    public final java.lang.Object getAndSetObjectRelease(java.lang.Object, long, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, $r3;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        $r3 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object getAndSetReferenceRelease(java.lang.Object,long,java.lang.Object)>(r1, l0, r2);

        return $r3;
    }

    public final boolean compareAndSetObject(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean compareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final java.lang.Object compareAndExchangeObject(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3, $r4;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $r4;
    }

    public final java.lang.Object compareAndExchangeObjectAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3, $r4;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $r4;
    }

    public final java.lang.Object compareAndExchangeObjectRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3, $r4;
        long l0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $r4 = virtualinvoke r0.<jdk.internal.misc.Unsafe: java.lang.Object compareAndExchangeReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $r4;
    }

    public final boolean weakCompareAndSetObject(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReference(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final boolean weakCompareAndSetObjectAcquire(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceAcquire(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final boolean weakCompareAndSetObjectPlain(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferencePlain(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    public final boolean weakCompareAndSetObjectRelease(java.lang.Object, long, java.lang.Object, java.lang.Object)
    {
        jdk.internal.misc.Unsafe r0;
        java.lang.Object r1, r2, r3;
        long l0;
        boolean $z0;

        r0 := @this: jdk.internal.misc.Unsafe;

        r1 := @parameter0: java.lang.Object;

        l0 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        r3 := @parameter3: java.lang.Object;

        $z0 = virtualinvoke r0.<jdk.internal.misc.Unsafe: boolean weakCompareAndSetReferenceRelease(java.lang.Object,long,java.lang.Object,java.lang.Object)>(r1, l0, r2, r3);

        return $z0;
    }

    static void <clinit>()
    {
        jdk.internal.misc.Unsafe $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18;

        <jdk.internal.misc.Unsafe: int INVALID_FIELD_OFFSET> = -1;

        staticinvoke <jdk.internal.misc.Unsafe: void registerNatives()>();

        $r0 = new jdk.internal.misc.Unsafe;

        specialinvoke $r0.<jdk.internal.misc.Unsafe: void <init>()>();

        <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe> = $r0;

        $r1 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i0 = virtualinvoke $r1.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Z");

        <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET> = $i0;

        $r2 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i1 = virtualinvoke $r2.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[B");

        <jdk.internal.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET> = $i1;

        $r3 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i2 = virtualinvoke $r3.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[S");

        <jdk.internal.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET> = $i2;

        $r4 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i3 = virtualinvoke $r4.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[C");

        <jdk.internal.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET> = $i3;

        $r5 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i4 = virtualinvoke $r5.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[I");

        <jdk.internal.misc.Unsafe: int ARRAY_INT_BASE_OFFSET> = $i4;

        $r6 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i5 = virtualinvoke $r6.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[J");

        <jdk.internal.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET> = $i5;

        $r7 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i6 = virtualinvoke $r7.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[F");

        <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_BASE_OFFSET> = $i6;

        $r8 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i7 = virtualinvoke $r8.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[D");

        <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_BASE_OFFSET> = $i7;

        $r9 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i8 = virtualinvoke $r9.<jdk.internal.misc.Unsafe: int arrayBaseOffset(java.lang.Class)>(class "[Ljava/lang/Object;");

        <jdk.internal.misc.Unsafe: int ARRAY_OBJECT_BASE_OFFSET> = $i8;

        $r10 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i9 = virtualinvoke $r10.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Z");

        <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_INDEX_SCALE> = $i9;

        $r11 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i10 = virtualinvoke $r11.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[B");

        <jdk.internal.misc.Unsafe: int ARRAY_BYTE_INDEX_SCALE> = $i10;

        $r12 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i11 = virtualinvoke $r12.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[S");

        <jdk.internal.misc.Unsafe: int ARRAY_SHORT_INDEX_SCALE> = $i11;

        $r13 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i12 = virtualinvoke $r13.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[C");

        <jdk.internal.misc.Unsafe: int ARRAY_CHAR_INDEX_SCALE> = $i12;

        $r14 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i13 = virtualinvoke $r14.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[I");

        <jdk.internal.misc.Unsafe: int ARRAY_INT_INDEX_SCALE> = $i13;

        $r15 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i14 = virtualinvoke $r15.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[J");

        <jdk.internal.misc.Unsafe: int ARRAY_LONG_INDEX_SCALE> = $i14;

        $r16 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i15 = virtualinvoke $r16.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[F");

        <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_INDEX_SCALE> = $i15;

        $r17 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i16 = virtualinvoke $r17.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[D");

        <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_INDEX_SCALE> = $i16;

        $r18 = <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe theUnsafe>;

        $i17 = virtualinvoke $r18.<jdk.internal.misc.Unsafe: int arrayIndexScale(java.lang.Class)>(class "[Ljava/lang/Object;");

        <jdk.internal.misc.Unsafe: int ARRAY_OBJECT_INDEX_SCALE> = $i17;

        $i18 = <jdk.internal.misc.UnsafeConstants: int ADDRESS_SIZE0>;

        <jdk.internal.misc.Unsafe: int ADDRESS_SIZE> = $i18;

        return;
    }
}
