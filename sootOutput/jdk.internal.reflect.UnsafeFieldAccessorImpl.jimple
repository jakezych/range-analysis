abstract class jdk.internal.reflect.UnsafeFieldAccessorImpl extends jdk.internal.reflect.FieldAccessorImpl
{
    static final jdk.internal.misc.Unsafe unsafe;
    protected final java.lang.reflect.Field field;
    protected final long fieldOffset;
    protected final boolean isFinal;

    void <init>(java.lang.reflect.Field)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.reflect.Field r1;
        int $i0, $i2;
        boolean $z0, $z1;
        jdk.internal.misc.Unsafe $r2, $r3;
        long $l1, $l3;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r1 := @parameter0: java.lang.reflect.Field;

        specialinvoke r0.<jdk.internal.reflect.FieldAccessorImpl: void <init>()>();

        r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field> = r1;

        $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $r3 = <jdk.internal.reflect.UnsafeFieldAccessorImpl: jdk.internal.misc.Unsafe unsafe>;

        $l3 = virtualinvoke $r3.<jdk.internal.misc.Unsafe: long staticFieldOffset(java.lang.reflect.Field)>(r1);

        r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: long fieldOffset> = $l3;

        goto label2;

     label1:
        $r2 = <jdk.internal.reflect.UnsafeFieldAccessorImpl: jdk.internal.misc.Unsafe unsafe>;

        $l1 = virtualinvoke $r2.<jdk.internal.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r1);

        r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: long fieldOffset> = $l1;

     label2:
        $i2 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>();

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i2);

        r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: boolean isFinal> = $z1;

        return;
    }

    protected void ensureObj(java.lang.Object)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.reflect.Field $r1;
        java.lang.Class $r2, $r4;
        java.lang.Object r3;
        boolean $z0;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r3 := @parameter0: java.lang.Object;

        $r1 = r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;

        $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.Object)>(r3);

     label1:
        return;
    }

    private java.lang.String getQualifiedFieldName()
    {
        java.lang.StringBuilder $r0, $r5, $r6, $r9;
        jdk.internal.reflect.UnsafeFieldAccessorImpl r1;
        java.lang.reflect.Field $r2, $r7;
        java.lang.Class $r3;
        java.lang.String $r4, $r8, $r10;

        r1 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = r1.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;

        $r3 = virtualinvoke $r2.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>();

        $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>();

        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".");

        $r7 = r1.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;

        $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.String getName()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r7, $r8, $r10, $r11, $r13;
        jdk.internal.reflect.UnsafeFieldAccessorImpl r3;
        java.lang.reflect.Field $r4;
        java.lang.Class $r5;
        java.lang.String $r6, $r9, r12, $r14;

        r3 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r12 := @parameter0: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempt to get ");

        $r4 = r3.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;

        $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>();

        $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field \"");

        $r9 = virtualinvoke r3.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.String getQualifiedFieldName()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" with illegal data type conversion to ");

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14);

        return $r0;
    }

    protected void throwFinalFieldIllegalAccessException(java.lang.String, java.lang.String) throws java.lang.IllegalAccessException
    {
        java.lang.IllegalAccessException $r0;
        jdk.internal.reflect.UnsafeFieldAccessorImpl r1;
        java.lang.String r2, r3, $r4;

        r1 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.IllegalAccessException;

        $r4 = virtualinvoke r1.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.String getSetMessage(java.lang.String,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.lang.IllegalAccessException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    protected void throwFinalFieldIllegalAccessException(java.lang.Object) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r4;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r4 = "";

     label2:
        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>($r4, "");

        return;
    }

    protected void throwFinalFieldIllegalAccessException(boolean) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("boolean", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(char) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("char", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(byte) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        byte b0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        b0 := @parameter0: byte;

        $r1 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(b0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("byte", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(short) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        s0 := @parameter0: short;

        $r1 = staticinvoke <java.lang.Short: java.lang.String toString(short)>(s0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("short", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(int) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("int", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(long) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("long", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(float) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("float", $r1);

        return;
    }

    protected void throwFinalFieldIllegalAccessException(double) throws java.lang.IllegalAccessException
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwFinalFieldIllegalAccessException(java.lang.String,java.lang.String)>("double", $r1);

        return;
    }

    protected java.lang.IllegalArgumentException newGetBooleanIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("boolean");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetByteIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("byte");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetCharIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("char");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetShortIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("short");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetIntIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("int");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetLongIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("long");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetFloatIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("float");

        return $r1;
    }

    protected java.lang.IllegalArgumentException newGetDoubleIllegalArgumentException()
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.IllegalArgumentException $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        $r1 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.IllegalArgumentException newGetIllegalArgumentException(java.lang.String)>("double");

        return $r1;
    }

    protected java.lang.String getSetMessage(java.lang.String, java.lang.String)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.reflect.Field $r1, $r5;
        int $i0;
        boolean $z0, $z1, $z2, $z3;
        java.lang.StringBuilder $r2, $r3, $r4, $r8, $r9, $r11, $r12, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32;
        java.lang.Class $r6;
        java.lang.String $r7, $r10, r13, r14, r33, r34, r35;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r14 := @parameter0: java.lang.String;

        r13 := @parameter1: java.lang.String;

        r33 = "Can not set";

        $r1 = r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;

        $i0 = virtualinvoke $r1.<java.lang.reflect.Field: int getModifiers()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0);

        if $z0 == 0 goto label1;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can not set");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" static");

        r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $z1 = r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: boolean isFinal>;

        if $z1 == 0 goto label2;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>()>();

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" final");

        r33 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r5 = r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.reflect.Field field>;

        $r6 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Class getType()>();

        $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>();

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field ");

        $r10 = virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.String getQualifiedFieldName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        r34 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r13.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label3;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13);

        r35 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label3:
        $z3 = virtualinvoke r14.<java.lang.String: boolean isEmpty()>();

        if $z3 != 0 goto label4;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14);

        r35 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r34);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null value");

        r35 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        return r35;
    }

    protected void throwSetIllegalArgumentException(java.lang.String, java.lang.String)
    {
        java.lang.IllegalArgumentException $r0;
        jdk.internal.reflect.UnsafeFieldAccessorImpl r1;
        java.lang.String r2, r3, $r4;

        r1 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r2 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        $r0 = new java.lang.IllegalArgumentException;

        $r4 = virtualinvoke r1.<jdk.internal.reflect.UnsafeFieldAccessorImpl: java.lang.String getSetMessage(java.lang.String,java.lang.String)>(r2, r3);

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4);

        throw $r0;
    }

    protected void throwSetIllegalArgumentException(java.lang.Object)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        java.lang.Object r1;
        java.lang.Class $r2;
        java.lang.String $r4;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        if r1 == null goto label1;

        $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r4 = virtualinvoke $r2.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r4 = "";

     label2:
        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>($r4, "");

        return;
    }

    protected void throwSetIllegalArgumentException(boolean)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        boolean z0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        z0 := @parameter0: boolean;

        $r1 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>(z0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("boolean", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(byte)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        byte b0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        b0 := @parameter0: byte;

        $r1 = staticinvoke <java.lang.Byte: java.lang.String toString(byte)>(b0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("byte", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(char)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        char c0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        c0 := @parameter0: char;

        $r1 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("char", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(short)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        short s0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        s0 := @parameter0: short;

        $r1 = staticinvoke <java.lang.Short: java.lang.String toString(short)>(s0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("short", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(int)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("int", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(long)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        long l0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        l0 := @parameter0: long;

        $r1 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("long", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(float)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        float f0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        f0 := @parameter0: float;

        $r1 = staticinvoke <java.lang.Float: java.lang.String toString(float)>(f0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("float", $r1);

        return;
    }

    protected void throwSetIllegalArgumentException(double)
    {
        jdk.internal.reflect.UnsafeFieldAccessorImpl r0;
        double d0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.reflect.UnsafeFieldAccessorImpl;

        d0 := @parameter0: double;

        $r1 = staticinvoke <java.lang.Double: java.lang.String toString(double)>(d0);

        virtualinvoke r0.<jdk.internal.reflect.UnsafeFieldAccessorImpl: void throwSetIllegalArgumentException(java.lang.String,java.lang.String)>("double", $r1);

        return;
    }

    static void <clinit>()
    {
        jdk.internal.misc.Unsafe $r0;

        $r0 = staticinvoke <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe getUnsafe()>();

        <jdk.internal.reflect.UnsafeFieldAccessorImpl: jdk.internal.misc.Unsafe unsafe> = $r0;

        return;
    }
}
