final class jdk.internal.jimage.ImageReader$Directory extends jdk.internal.jimage.ImageReader$Node
{
    private final java.util.List children;

    private void <init>(java.lang.String, java.nio.file.attribute.BasicFileAttributes)
    {
        jdk.internal.jimage.ImageReader$Directory r0;
        java.lang.String r1;
        java.nio.file.attribute.BasicFileAttributes r2;
        java.util.ArrayList $r3;

        r0 := @this: jdk.internal.jimage.ImageReader$Directory;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        specialinvoke r0.<jdk.internal.jimage.ImageReader$Node: void <init>(java.lang.String,java.nio.file.attribute.BasicFileAttributes)>(r1, r2);

        $r3 = new java.util.ArrayList;

        specialinvoke $r3.<java.util.ArrayList: void <init>()>();

        r0.<jdk.internal.jimage.ImageReader$Directory: java.util.List children> = $r3;

        return;
    }

    static jdk.internal.jimage.ImageReader$Directory create(jdk.internal.jimage.ImageReader$Directory, java.lang.String, java.nio.file.attribute.BasicFileAttributes)
    {
        jdk.internal.jimage.ImageReader$Directory $r0, r4;
        java.lang.String r1;
        java.nio.file.attribute.BasicFileAttributes r2;

        r4 := @parameter0: jdk.internal.jimage.ImageReader$Directory;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.nio.file.attribute.BasicFileAttributes;

        $r0 = new jdk.internal.jimage.ImageReader$Directory;

        specialinvoke $r0.<jdk.internal.jimage.ImageReader$Directory: void <init>(java.lang.String,java.nio.file.attribute.BasicFileAttributes)>(r1, r2);

        if r4 == null goto label1;

        virtualinvoke r4.<jdk.internal.jimage.ImageReader$Directory: void addChild(jdk.internal.jimage.ImageReader$Node)>($r0);

     label1:
        return $r0;
    }

    public boolean isDirectory()
    {
        jdk.internal.jimage.ImageReader$Directory r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Directory;

        return 1;
    }

    public java.util.List getChildren()
    {
        jdk.internal.jimage.ImageReader$Directory r0;
        java.util.List $r1, $r2;

        r0 := @this: jdk.internal.jimage.ImageReader$Directory;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Directory: java.util.List children>;

        $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1);

        return $r2;
    }

    void addChild(jdk.internal.jimage.ImageReader$Node)
    {
        jdk.internal.jimage.ImageReader$Directory r0;
        jdk.internal.jimage.ImageReader$Node r1;
        java.util.List $r2;

        r0 := @this: jdk.internal.jimage.ImageReader$Directory;

        r1 := @parameter0: jdk.internal.jimage.ImageReader$Node;

        $r2 = r0.<jdk.internal.jimage.ImageReader$Directory: java.util.List children>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void walk(java.util.function.Consumer)
    {
        java.util.function.Consumer r0;
        jdk.internal.jimage.ImageReader$Directory r1, $r6;
        java.util.List $r2;
        java.util.Iterator r3;
        boolean $z0, $z1;
        java.lang.Object $r4;
        jdk.internal.jimage.ImageReader$Node r5;

        r1 := @this: jdk.internal.jimage.ImageReader$Directory;

        r0 := @parameter0: java.util.function.Consumer;

        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>(r1);

        $r2 = r1.<jdk.internal.jimage.ImageReader$Directory: java.util.List children>;

        r3 = interfaceinvoke $r2.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (jdk.internal.jimage.ImageReader$Node) $r4;

        $z1 = virtualinvoke r5.<jdk.internal.jimage.ImageReader$Node: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $r6 = (jdk.internal.jimage.ImageReader$Directory) r5;

        virtualinvoke $r6.<jdk.internal.jimage.ImageReader$Directory: void walk(java.util.function.Consumer)>(r0);

        goto label3;

     label2:
        interfaceinvoke r0.<java.util.function.Consumer: void accept(java.lang.Object)>(r5);

     label3:
        goto label1;

     label4:
        return;
    }
}
