class jdk.internal.logger.LazyLoggers$1 extends java.lang.Object implements java.util.function.BiFunction
{

    void <init>()
    {
        jdk.internal.logger.LazyLoggers$1 r0;

        r0 := @this: jdk.internal.logger.LazyLoggers$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.System$Logger apply(java.lang.String, java.lang.Module)
    {
        java.lang.String r0;
        java.lang.Module r1;
        java.lang.System$Logger $r2;
        jdk.internal.logger.LazyLoggers$1 r3;

        r3 := @this: jdk.internal.logger.LazyLoggers$1;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Module;

        $r2 = staticinvoke <jdk.internal.logger.LazyLoggers: java.lang.System$Logger getLoggerFromFinder(java.lang.String,java.lang.Module)>(r0, r1);

        return $r2;
    }

    public volatile java.lang.Object apply(java.lang.Object, java.lang.Object)
    {
        jdk.internal.logger.LazyLoggers$1 r0;
        java.lang.Object r1, r2;
        java.lang.Module $r3;
        java.lang.String $r4;
        java.lang.System$Logger $r5;

        r0 := @this: jdk.internal.logger.LazyLoggers$1;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (java.lang.String) r1;

        $r3 = (java.lang.Module) r2;

        $r5 = virtualinvoke r0.<jdk.internal.logger.LazyLoggers$1: java.lang.System$Logger apply(java.lang.String,java.lang.Module)>($r4, $r3);

        return $r5;
    }
}
