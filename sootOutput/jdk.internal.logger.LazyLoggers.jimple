public final class jdk.internal.logger.LazyLoggers extends java.lang.Object
{
    static final java.lang.RuntimePermission LOGGERFINDER_PERMISSION;
    private static volatile java.lang.System$LoggerFinder provider;
    private static final java.util.function.BiFunction loggerSupplier;
    private static final jdk.internal.logger.LazyLoggers$LazyLoggerFactories factories;

    private void <init>()
    {
        jdk.internal.logger.LazyLoggers r0;
        java.lang.InternalError $r1;

        r0 := @this: jdk.internal.logger.LazyLoggers;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.InternalError;

        specialinvoke $r1.<java.lang.InternalError: void <init>()>();

        throw $r1;
    }

    private static java.lang.System$LoggerFinder accessLoggerFinder()
    {
        java.lang.SecurityManager r0;
        java.security.PrivilegedAction $r1;
        java.lang.Object $r2;
        java.lang.System$LoggerFinder r3, $r4;

        r3 = <jdk.internal.logger.LazyLoggers: java.lang.System$LoggerFinder provider>;

        if r3 != null goto label3;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 != null goto label1;

        $r4 = staticinvoke <java.lang.System$LoggerFinder: java.lang.System$LoggerFinder getLoggerFinder()>();

        goto label2;

     label1:
        $r1 = staticinvoke <jdk.internal.logger.LazyLoggers$getLoggerFinder__1: java.security.PrivilegedAction bootstrap$()>();

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r1);

        $r4 = (java.lang.System$LoggerFinder) $r2;

     label2:
        r3 = $r4;

        <jdk.internal.logger.LazyLoggers: java.lang.System$LoggerFinder provider> = $r4;

     label3:
        return r3;
    }

    static java.lang.System$Logger getLoggerFromFinder(java.lang.String, java.lang.Module)
    {
        java.lang.SecurityManager r0;
        java.lang.String r1;
        java.lang.Module r2;
        java.security.PrivilegedAction $r3;
        java.security.Permission[] $r4;
        java.lang.RuntimePermission $r5;
        java.lang.Object $r6;
        java.lang.System$Logger $r7, $r9;
        java.lang.System$LoggerFinder $r8;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Module;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 != null goto label1;

        $r8 = staticinvoke <jdk.internal.logger.LazyLoggers: java.lang.System$LoggerFinder accessLoggerFinder()>();

        $r9 = virtualinvoke $r8.<java.lang.System$LoggerFinder: java.lang.System$Logger getLogger(java.lang.String,java.lang.Module)>(r1, r2);

        return $r9;

     label1:
        $r3 = staticinvoke <jdk.internal.logger.LazyLoggers$lambda_getLoggerFromFinder_0__2: java.security.PrivilegedAction bootstrap$(java.lang.String,java.lang.Module)>(r1, r2);

        $r4 = newarray (java.security.Permission)[1];

        $r5 = <jdk.internal.logger.LazyLoggers: java.lang.RuntimePermission LOGGERFINDER_PERMISSION>;

        $r4[0] = $r5;

        $r6 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction,java.security.AccessControlContext,java.security.Permission[])>($r3, null, $r4);

        $r7 = (java.lang.System$Logger) $r6;

        return $r7;
    }

    public static final java.lang.System$Logger getLogger(java.lang.String, java.lang.Module)
    {
        java.lang.Module r0;
        boolean $z0;
        java.lang.String r1;
        java.lang.System$Logger $r2, $r3;

        r1 := @parameter0: java.lang.String;

        r0 := @parameter1: java.lang.Module;

        $z0 = staticinvoke <jdk.internal.logger.DefaultLoggerFinder: boolean isSystem(java.lang.Module)>(r0);

        if $z0 == 0 goto label1;

        $r3 = staticinvoke <jdk.internal.logger.LazyLoggers: java.lang.System$Logger getLazyLogger(java.lang.String,java.lang.Module)>(r1, r0);

        return $r3;

     label1:
        $r2 = staticinvoke <jdk.internal.logger.LazyLoggers: java.lang.System$Logger getLoggerFromFinder(java.lang.String,java.lang.Module)>(r1, r0);

        return $r2;
    }

    public static final java.lang.System$Logger getLazyLogger(java.lang.String, java.lang.Module)
    {
        boolean z0;
        java.lang.String r0;
        java.lang.Module r1;
        java.lang.System$Logger $r2;
        jdk.internal.logger.LazyLoggers$JdkLazyLogger $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.Module;

        z0 = staticinvoke <jdk.internal.logger.BootstrapLogger: boolean useLazyLoggers()>();

        if z0 == 0 goto label1;

        $r3 = new jdk.internal.logger.LazyLoggers$JdkLazyLogger;

        specialinvoke $r3.<jdk.internal.logger.LazyLoggers$JdkLazyLogger: void <init>(java.lang.String,java.lang.Module)>(r0, r1);

        return $r3;

     label1:
        $r2 = staticinvoke <jdk.internal.logger.LazyLoggers: java.lang.System$Logger getLoggerFromFinder(java.lang.String,java.lang.Module)>(r0, r1);

        return $r2;
    }

    public static java.lang.System$Logger lambda$getLoggerFromFinder$0(java.lang.String, java.lang.Module)
    {
        java.lang.System$LoggerFinder $r0;
        java.lang.String r1;
        java.lang.Module r2;
        java.lang.System$Logger $r3;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.Module;

        $r0 = staticinvoke <jdk.internal.logger.LazyLoggers: java.lang.System$LoggerFinder accessLoggerFinder()>();

        $r3 = virtualinvoke $r0.<java.lang.System$LoggerFinder: java.lang.System$Logger getLogger(java.lang.String,java.lang.Module)>(r1, r2);

        return $r3;
    }

    static void <clinit>()
    {
        java.lang.RuntimePermission $r0;
        jdk.internal.logger.LazyLoggers$1 $r1;
        jdk.internal.logger.LazyLoggers$LazyLoggerFactories $r2;
        java.util.function.BiFunction $r3;

        $r0 = new java.lang.RuntimePermission;

        specialinvoke $r0.<java.lang.RuntimePermission: void <init>(java.lang.String)>("loggerFinder");

        <jdk.internal.logger.LazyLoggers: java.lang.RuntimePermission LOGGERFINDER_PERMISSION> = $r0;

        $r1 = new jdk.internal.logger.LazyLoggers$1;

        specialinvoke $r1.<jdk.internal.logger.LazyLoggers$1: void <init>()>();

        <jdk.internal.logger.LazyLoggers: java.util.function.BiFunction loggerSupplier> = $r1;

        $r2 = new jdk.internal.logger.LazyLoggers$LazyLoggerFactories;

        $r3 = <jdk.internal.logger.LazyLoggers: java.util.function.BiFunction loggerSupplier>;

        specialinvoke $r2.<jdk.internal.logger.LazyLoggers$LazyLoggerFactories: void <init>(java.util.function.BiFunction)>($r3);

        <jdk.internal.logger.LazyLoggers: jdk.internal.logger.LazyLoggers$LazyLoggerFactories factories> = $r2;

        return;
    }
}
