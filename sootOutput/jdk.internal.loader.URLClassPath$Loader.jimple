class jdk.internal.loader.URLClassPath$Loader extends java.lang.Object implements java.io.Closeable
{
    private final java.net.URL base;
    private java.util.jar.JarFile jarfile;

    void <init>(java.net.URL)
    {
        jdk.internal.loader.URLClassPath$Loader r0;
        java.net.URL r1;

        r0 := @this: jdk.internal.loader.URLClassPath$Loader;

        r1 := @parameter0: java.net.URL;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.loader.URLClassPath$Loader: java.net.URL base> = r1;

        return;
    }

    java.net.URL getBaseURL()
    {
        jdk.internal.loader.URLClassPath$Loader r0;
        java.net.URL $r1;

        r0 := @this: jdk.internal.loader.URLClassPath$Loader;

        $r1 = r0.<jdk.internal.loader.URLClassPath$Loader: java.net.URL base>;

        return $r1;
    }

    java.net.URL findResource(java.lang.String, boolean)
    {
        java.net.URL $r0, $r3;
        jdk.internal.loader.URLClassPath$Loader r1;
        java.lang.String r2, $r4;
        boolean z0, $z1;
        int $i0;
        java.lang.Exception $r7;
        java.net.MalformedURLException $r8;
        java.lang.IllegalArgumentException $r9;
        java.net.URLConnection r11;
        java.net.HttpURLConnection r12;
        java.io.InputStream r13;

        r1 := @this: jdk.internal.loader.URLClassPath$Loader;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label01:
        $r0 = new java.net.URL;

        $r3 = r1.<jdk.internal.loader.URLClassPath$Loader: java.net.URL base>;

        $r4 = staticinvoke <sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>(r2, 0);

        specialinvoke $r0.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, $r4);

     label02:
        goto label04;

     label03:
        $r8 := @caughtexception;

        $r9 = new java.lang.IllegalArgumentException;

        specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name");

        throw $r9;

     label04:
        if z0 == 0 goto label05;

        staticinvoke <jdk.internal.loader.URLClassPath: void check(java.net.URL)>($r0);

     label05:
        r11 = virtualinvoke $r0.<java.net.URL: java.net.URLConnection openConnection()>();

        $z1 = r11 instanceof java.net.HttpURLConnection;

        if $z1 == 0 goto label08;

        r12 = (java.net.HttpURLConnection) r11;

        virtualinvoke r12.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>("HEAD");

        $i0 = virtualinvoke r12.<java.net.HttpURLConnection: int getResponseCode()>();

        if $i0 < 400 goto label07;

     label06:
        return null;

     label07:
        goto label09;

     label08:
        virtualinvoke r11.<java.net.URLConnection: void setUseCaches(boolean)>(0);

        r13 = virtualinvoke r11.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        virtualinvoke r13.<java.io.InputStream: void close()>();

     label09:
        return $r0;

     label10:
        $r7 := @caughtexception;

        return null;

        catch java.net.MalformedURLException from label01 to label02 with label03;
        catch java.lang.Exception from label04 to label06 with label10;
        catch java.lang.Exception from label07 to label09 with label10;
    }

    jdk.internal.loader.Resource getResource(java.lang.String, boolean)
    {
        java.net.URL $r0, $r3;
        jdk.internal.loader.URLClassPath$Loader r1;
        java.lang.String r2, $r4;
        boolean z0, $z1;
        jdk.internal.loader.URLClassPath$Loader$1 $r6;
        java.net.JarURLConnection r7;
        java.util.jar.JarFile $r8, $r9;
        java.lang.Exception $r10;
        java.net.MalformedURLException $r11;
        java.lang.IllegalArgumentException $r12;
        java.net.URLConnection r14;

        r1 := @this: jdk.internal.loader.URLClassPath$Loader;

        r2 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        $r0 = new java.net.URL;

        $r3 = r1.<jdk.internal.loader.URLClassPath$Loader: java.net.URL base>;

        $r4 = staticinvoke <sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>(r2, 0);

        specialinvoke $r0.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, $r4);

     label2:
        goto label4;

     label3:
        $r11 := @caughtexception;

        $r12 = new java.lang.IllegalArgumentException;

        specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("name");

        throw $r12;

     label4:
        if z0 == 0 goto label5;

        staticinvoke <jdk.internal.loader.URLClassPath: void check(java.net.URL)>($r0);

     label5:
        r14 = virtualinvoke $r0.<java.net.URL: java.net.URLConnection openConnection()>();

        virtualinvoke r14.<java.net.URLConnection: java.io.InputStream getInputStream()>();

        $z1 = r14 instanceof java.net.JarURLConnection;

        if $z1 == 0 goto label6;

        r7 = (java.net.JarURLConnection) r14;

        $r8 = virtualinvoke r7.<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>();

        $r9 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>($r8);

        r1.<jdk.internal.loader.URLClassPath$Loader: java.util.jar.JarFile jarfile> = $r9;

     label6:
        goto label8;

     label7:
        $r10 := @caughtexception;

        return null;

     label8:
        $r6 = new jdk.internal.loader.URLClassPath$Loader$1;

        specialinvoke $r6.<jdk.internal.loader.URLClassPath$Loader$1: void <init>(jdk.internal.loader.URLClassPath$Loader,java.lang.String,java.net.URL,java.net.URLConnection)>(r1, r2, $r0, r14);

        return $r6;

        catch java.net.MalformedURLException from label1 to label2 with label3;
        catch java.lang.Exception from label4 to label6 with label7;
    }

    jdk.internal.loader.Resource getResource(java.lang.String)
    {
        jdk.internal.loader.URLClassPath$Loader r0;
        java.lang.String r1;
        jdk.internal.loader.Resource $r2;

        r0 := @this: jdk.internal.loader.URLClassPath$Loader;

        r1 := @parameter0: java.lang.String;

        $r2 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$Loader: jdk.internal.loader.Resource getResource(java.lang.String,boolean)>(r1, 1);

        return $r2;
    }

    public void close() throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$Loader r0;
        java.util.jar.JarFile $r1, $r2;

        r0 := @this: jdk.internal.loader.URLClassPath$Loader;

        $r1 = r0.<jdk.internal.loader.URLClassPath$Loader: java.util.jar.JarFile jarfile>;

        if $r1 == null goto label1;

        $r2 = r0.<jdk.internal.loader.URLClassPath$Loader: java.util.jar.JarFile jarfile>;

        virtualinvoke $r2.<java.util.jar.JarFile: void close()>();

     label1:
        return;
    }

    java.net.URL[] getClassPath() throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$Loader r0;

        r0 := @this: jdk.internal.loader.URLClassPath$Loader;

        return null;
    }
}
