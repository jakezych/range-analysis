public class jdk.internal.misc.ExtendedMapMode extends java.lang.Object
{
    static final java.lang.invoke.MethodHandle MAP_MODE_CONSTRUCTOR;
    public static final java.nio.channels.FileChannel$MapMode READ_ONLY_SYNC;
    public static final java.nio.channels.FileChannel$MapMode READ_WRITE_SYNC;

    private static java.nio.channels.FileChannel$MapMode newMapMode(java.lang.String)
    {
        java.lang.String r0;
        java.lang.invoke.MethodHandle $r1;
        java.nio.channels.FileChannel$MapMode $r2;
        java.lang.Throwable $r3;
        java.lang.InternalError $r5;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = <jdk.internal.misc.ExtendedMapMode: java.lang.invoke.MethodHandle MAP_MODE_CONSTRUCTOR>;

        $r2 = virtualinvoke $r1.<java.lang.invoke.MethodHandle: java.nio.channels.FileChannel$MapMode invoke(java.lang.String)>(r0);

     label2:
        return $r2;

     label3:
        $r3 := @caughtexception;

        $r5 = new java.lang.InternalError;

        specialinvoke $r5.<java.lang.InternalError: void <init>(java.lang.Throwable)>($r3);

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label3;
    }

    private void <init>()
    {
        jdk.internal.misc.ExtendedMapMode r0;

        r0 := @this: jdk.internal.misc.ExtendedMapMode;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.invoke.MethodHandles$Lookup lambda$static$0() throws java.lang.Exception
    {
        java.lang.invoke.MethodHandles$Lookup $r0, $r1;

        $r0 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup lookup()>();

        $r1 = staticinvoke <java.lang.invoke.MethodHandles: java.lang.invoke.MethodHandles$Lookup privateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles$Lookup)>(class "Ljava/nio/channels/FileChannel$MapMode;", $r0);

        return $r1;
    }

    static void <clinit>()
    {
        java.lang.Object $r0;
        java.lang.invoke.MethodHandles$Lookup r1;
        java.lang.Class $r2;
        java.lang.invoke.MethodType r3;
        java.lang.invoke.MethodHandle $r4;
        java.nio.channels.FileChannel$MapMode $r5, $r6;
        java.lang.Exception $r7;
        java.lang.InternalError $r8;
        java.security.PrivilegedExceptionAction r9;

     label1:
        r9 = staticinvoke <jdk.internal.misc.ExtendedMapMode$lambda_static_0__129: java.security.PrivilegedExceptionAction bootstrap$()>();

        $r0 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction)>(r9);

        r1 = (java.lang.invoke.MethodHandles$Lookup) $r0;

        $r2 = <java.lang.Void: java.lang.Class TYPE>;

        r3 = staticinvoke <java.lang.invoke.MethodType: java.lang.invoke.MethodType methodType(java.lang.Class,java.lang.Class)>($r2, class "Ljava/lang/String;");

        $r4 = virtualinvoke r1.<java.lang.invoke.MethodHandles$Lookup: java.lang.invoke.MethodHandle findConstructor(java.lang.Class,java.lang.invoke.MethodType)>(class "Ljava/nio/channels/FileChannel$MapMode;", r3);

        <jdk.internal.misc.ExtendedMapMode: java.lang.invoke.MethodHandle MAP_MODE_CONSTRUCTOR> = $r4;

     label2:
        goto label4;

     label3:
        $r7 := @caughtexception;

        $r8 = new java.lang.InternalError;

        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.Throwable)>($r7);

        throw $r8;

     label4:
        $r5 = staticinvoke <jdk.internal.misc.ExtendedMapMode: java.nio.channels.FileChannel$MapMode newMapMode(java.lang.String)>("READ_ONLY_SYNC");

        <jdk.internal.misc.ExtendedMapMode: java.nio.channels.FileChannel$MapMode READ_ONLY_SYNC> = $r5;

        $r6 = staticinvoke <jdk.internal.misc.ExtendedMapMode: java.nio.channels.FileChannel$MapMode newMapMode(java.lang.String)>("READ_WRITE_SYNC");

        <jdk.internal.misc.ExtendedMapMode: java.nio.channels.FileChannel$MapMode READ_WRITE_SYNC> = $r6;

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
