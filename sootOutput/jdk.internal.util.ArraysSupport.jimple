public class jdk.internal.util.ArraysSupport extends java.lang.Object
{
    static final jdk.internal.misc.Unsafe U;
    private static final boolean BIG_ENDIAN;
    public static final int LOG2_ARRAY_BOOLEAN_INDEX_SCALE;
    public static final int LOG2_ARRAY_BYTE_INDEX_SCALE;
    public static final int LOG2_ARRAY_CHAR_INDEX_SCALE;
    public static final int LOG2_ARRAY_SHORT_INDEX_SCALE;
    public static final int LOG2_ARRAY_INT_INDEX_SCALE;
    public static final int LOG2_ARRAY_LONG_INDEX_SCALE;
    public static final int LOG2_ARRAY_FLOAT_INDEX_SCALE;
    public static final int LOG2_ARRAY_DOUBLE_INDEX_SCALE;
    private static final int LOG2_BYTE_BIT_SIZE;
    public static final int MAX_ARRAY_LENGTH;

    private static int exactLog2(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.Error $r0;

        i0 := @parameter0: int;

        $i1 = i0 - 1;

        $i2 = i0 & $i1;

        if $i2 == 0 goto label1;

        $r0 = new java.lang.Error;

        specialinvoke $r0.<java.lang.Error: void <init>(java.lang.String)>("data type scale not a power of two");

        throw $r0;

     label1:
        $i3 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i0);

        return $i3;
    }

    private void <init>()
    {
        jdk.internal.util.ArraysSupport r0;

        r0 := @this: jdk.internal.util.ArraysSupport;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static int vectorizedMismatch(java.lang.Object, long, java.lang.Object, long, int, int)
    {
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, $i11, $i12, i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i28, $i33, $i34, $i35, $i37, $i38, $i39, $i40, $i41, i42, $i47, i48, i50, i51, $i52;
        long $l13, l14, $l15, l16, $l17, $l29, $l30, $l31, l43, l44, l45, l46, l49;
        java.lang.Object r0, r2;
        jdk.internal.misc.Unsafe $r1, $r3, $r4, $r5;
        boolean $z0, $z1;
        byte $b32;

        r0 := @parameter0: java.lang.Object;

        l14 := @parameter1: long;

        r2 := @parameter2: java.lang.Object;

        l16 := @parameter3: long;

        i3 := @parameter4: int;

        i0 := @parameter5: int;

        $i1 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        i2 = $i1 - i0;

        i42 = 0;

     label01:
        $i4 = i3 >> i2;

        if i42 >= $i4 goto label05;

        $l29 = (long) i42;

        $i28 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        l43 = $l29 << $i28;

        $r4 = <jdk.internal.util.ArraysSupport: jdk.internal.misc.Unsafe U>;

        $l30 = l14 + l43;

        l44 = virtualinvoke $r4.<jdk.internal.misc.Unsafe: long getLongUnaligned(java.lang.Object,long)>(r0, $l30);

        $r5 = <jdk.internal.util.ArraysSupport: jdk.internal.misc.Unsafe U>;

        $l31 = l16 + l43;

        l45 = virtualinvoke $r5.<jdk.internal.misc.Unsafe: long getLongUnaligned(java.lang.Object,long)>(r2, $l31);

        $b32 = l44 cmp l45;

        if $b32 == 0 goto label04;

        l46 = l44 ^ l45;

        $z1 = <jdk.internal.util.ArraysSupport: boolean BIG_ENDIAN>;

        if $z1 == 0 goto label02;

        $i39 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l46);

        $i40 = <jdk.internal.util.ArraysSupport: int LOG2_BYTE_BIT_SIZE>;

        $i41 = $i40 + i0;

        $i47 = $i39 >> $i41;

        goto label03;

     label02:
        $i33 = staticinvoke <java.lang.Long: int numberOfTrailingZeros(long)>(l46);

        $i34 = <jdk.internal.util.ArraysSupport: int LOG2_BYTE_BIT_SIZE>;

        $i35 = $i34 + i0;

        $i47 = $i33 >> $i35;

     label03:
        $i37 = i42 << i2;

        $i38 = $i37 + $i47;

        return $i38;

     label04:
        i42 = i42 + 1;

        goto label01;

     label05:
        $i5 = i42 << i2;

        i48 = i3 - $i5;

        $i6 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE>;

        if i0 >= $i6 goto label10;

        $i8 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE>;

        $i9 = $i8 - i0;

        i10 = 1 << $i9;

        if i48 < i10 goto label09;

        $l13 = (long) i42;

        $i12 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        l49 = $l13 << $i12;

        $r1 = <jdk.internal.util.ArraysSupport: jdk.internal.misc.Unsafe U>;

        $l15 = l14 + l49;

        i50 = virtualinvoke $r1.<jdk.internal.misc.Unsafe: int getIntUnaligned(java.lang.Object,long)>(r0, $l15);

        $r3 = <jdk.internal.util.ArraysSupport: jdk.internal.misc.Unsafe U>;

        $l17 = l16 + l49;

        i18 = virtualinvoke $r3.<jdk.internal.misc.Unsafe: int getIntUnaligned(java.lang.Object,long)>(r2, $l17);

        if i50 == i18 goto label08;

        i51 = i50 ^ i18;

        $z0 = <jdk.internal.util.ArraysSupport: boolean BIG_ENDIAN>;

        if $z0 == 0 goto label06;

        $i25 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>(i51);

        $i26 = <jdk.internal.util.ArraysSupport: int LOG2_BYTE_BIT_SIZE>;

        $i27 = $i26 + i0;

        $i52 = $i25 >> $i27;

        goto label07;

     label06:
        $i19 = staticinvoke <java.lang.Integer: int numberOfTrailingZeros(int)>(i51);

        $i20 = <jdk.internal.util.ArraysSupport: int LOG2_BYTE_BIT_SIZE>;

        $i21 = $i20 + i0;

        $i52 = $i19 >> $i21;

     label07:
        $i23 = i42 << i2;

        $i24 = $i23 + $i52;

        return $i24;

     label08:
        i48 = i48 - i10;

     label09:
        $i11 = i48 ^ -1;

        return $i11;

     label10:
        $i7 = i48 ^ -1;

        return $i7;
    }

    public static int mismatch(boolean[], boolean[], int)
    {
        int i0, $i1, $i2, $i3, $i6, i7, i8;
        boolean[] r0, r1;
        boolean $z0, $z1, $z2, $z3;
        long $l4, $l5;

        r0 := @parameter0: boolean[];

        r1 := @parameter1: boolean[];

        i0 := @parameter2: int;

        i7 = 0;

        if i0 <= 7 goto label3;

        $z3 = r0[0];

        $z2 = r1[0];

        if $z3 == $z2 goto label1;

        return 0;

     label1:
        $i1 = <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET>;

        $l5 = (long) $i1;

        $i2 = <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET>;

        $l4 = (long) $i2;

        $i3 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_BOOLEAN_INDEX_SCALE>;

        i8 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l5, r1, $l4, i0, $i3);

        if i8 < 0 goto label2;

        return i8;

     label2:
        $i6 = i8 ^ -1;

        i7 = i0 - $i6;

     label3:
        if i7 >= i0 goto label5;

        $z1 = r0[i7];

        $z0 = r1[i7];

        if $z1 == $z0 goto label4;

        return i7;

     label4:
        i7 = i7 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(boolean[], int, boolean[], int, int)
    {
        int i0, i1, $i2, i3, $i4, $i5, i6, $i7, i8, $i9, $i12, i13, i14;
        boolean[] r0, r1;
        boolean $z0, $z1, $z2, $z3;
        long $l10, $l11;

        r0 := @parameter0: boolean[];

        i1 := @parameter1: int;

        r1 := @parameter2: boolean[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i13 = 0;

        if i0 <= 7 goto label3;

        $z3 = r0[i1];

        $z2 = r1[i3];

        if $z3 == $z2 goto label1;

        return 0;

     label1:
        $i5 = <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET>;

        i6 = $i5 + i1;

        $i7 = <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_BASE_OFFSET>;

        i8 = $i7 + i3;

        $l11 = (long) i6;

        $l10 = (long) i8;

        $i9 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_BOOLEAN_INDEX_SCALE>;

        i14 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l11, r1, $l10, i0, $i9);

        if i14 < 0 goto label2;

        return i14;

     label2:
        $i12 = i14 ^ -1;

        i13 = i0 - $i12;

     label3:
        if i13 >= i0 goto label5;

        $i2 = i1 + i13;

        $z1 = r0[$i2];

        $i4 = i3 + i13;

        $z0 = r1[$i4];

        if $z1 == $z0 goto label4;

        return i13;

     label4:
        i13 = i13 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(byte[], byte[], int)
    {
        int i0, $i5, $i6, $i7, $i10, i11, i12;
        byte[] r0, r1;
        byte $b1, $b2, $b3, $b4;
        long $l8, $l9;

        r0 := @parameter0: byte[];

        r1 := @parameter1: byte[];

        i0 := @parameter2: int;

        i11 = 0;

        if i0 <= 7 goto label3;

        $b4 = r0[0];

        $b3 = r1[0];

        if $b4 == $b3 goto label1;

        return 0;

     label1:
        $i5 = <jdk.internal.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET>;

        $l9 = (long) $i5;

        $i6 = <jdk.internal.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET>;

        $l8 = (long) $i6;

        $i7 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_BYTE_INDEX_SCALE>;

        i12 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l9, r1, $l8, i0, $i7);

        if i12 < 0 goto label2;

        return i12;

     label2:
        $i10 = i12 ^ -1;

        i11 = i0 - $i10;

     label3:
        if i11 >= i0 goto label5;

        $b2 = r0[i11];

        $b1 = r1[i11];

        if $b2 == $b1 goto label4;

        return i11;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(byte[], int, byte[], int, int)
    {
        int i0, i1, $i2, i3, $i4, $i9, i10, $i11, i12, $i13, $i16, i17, i18;
        byte[] r0, r1;
        byte $b5, $b6, $b7, $b8;
        long $l14, $l15;

        r0 := @parameter0: byte[];

        i1 := @parameter1: int;

        r1 := @parameter2: byte[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i17 = 0;

        if i0 <= 7 goto label3;

        $b8 = r0[i1];

        $b7 = r1[i3];

        if $b8 == $b7 goto label1;

        return 0;

     label1:
        $i9 = <jdk.internal.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET>;

        i10 = $i9 + i1;

        $i11 = <jdk.internal.misc.Unsafe: int ARRAY_BYTE_BASE_OFFSET>;

        i12 = $i11 + i3;

        $l15 = (long) i10;

        $l14 = (long) i12;

        $i13 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_BYTE_INDEX_SCALE>;

        i18 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l15, r1, $l14, i0, $i13);

        if i18 < 0 goto label2;

        return i18;

     label2:
        $i16 = i18 ^ -1;

        i17 = i0 - $i16;

     label3:
        if i17 >= i0 goto label5;

        $i2 = i1 + i17;

        $b6 = r0[$i2];

        $i4 = i3 + i17;

        $b5 = r1[$i4];

        if $b6 == $b5 goto label4;

        return i17;

     label4:
        i17 = i17 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(char[], char[], int)
    {
        int i0, $i5, $i6, $i7, $i10, i11, i12;
        char[] r0, r1;
        char $c1, $c2, $c3, $c4;
        long $l8, $l9;

        r0 := @parameter0: char[];

        r1 := @parameter1: char[];

        i0 := @parameter2: int;

        i11 = 0;

        if i0 <= 3 goto label3;

        $c4 = r0[0];

        $c3 = r1[0];

        if $c4 == $c3 goto label1;

        return 0;

     label1:
        $i5 = <jdk.internal.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET>;

        $l9 = (long) $i5;

        $i6 = <jdk.internal.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET>;

        $l8 = (long) $i6;

        $i7 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_CHAR_INDEX_SCALE>;

        i12 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l9, r1, $l8, i0, $i7);

        if i12 < 0 goto label2;

        return i12;

     label2:
        $i10 = i12 ^ -1;

        i11 = i0 - $i10;

     label3:
        if i11 >= i0 goto label5;

        $c2 = r0[i11];

        $c1 = r1[i11];

        if $c2 == $c1 goto label4;

        return i11;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(char[], int, char[], int, int)
    {
        int i0, i1, $i2, i3, $i4, $i9, $i10, $i11, i12, $i13, $i14, $i15, i16, $i17, $i20, i21, i22;
        char[] r0, r1;
        char $c5, $c6, $c7, $c8;
        long $l18, $l19;

        r0 := @parameter0: char[];

        i1 := @parameter1: int;

        r1 := @parameter2: char[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i21 = 0;

        if i0 <= 3 goto label3;

        $c8 = r0[i1];

        $c7 = r1[i3];

        if $c8 == $c7 goto label1;

        return 0;

     label1:
        $i11 = <jdk.internal.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET>;

        $i9 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_CHAR_INDEX_SCALE>;

        $i10 = i1 << $i9;

        i12 = $i11 + $i10;

        $i15 = <jdk.internal.misc.Unsafe: int ARRAY_CHAR_BASE_OFFSET>;

        $i13 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_CHAR_INDEX_SCALE>;

        $i14 = i3 << $i13;

        i16 = $i15 + $i14;

        $l19 = (long) i12;

        $l18 = (long) i16;

        $i17 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_CHAR_INDEX_SCALE>;

        i22 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l19, r1, $l18, i0, $i17);

        if i22 < 0 goto label2;

        return i22;

     label2:
        $i20 = i22 ^ -1;

        i21 = i0 - $i20;

     label3:
        if i21 >= i0 goto label5;

        $i2 = i1 + i21;

        $c6 = r0[$i2];

        $i4 = i3 + i21;

        $c5 = r1[$i4];

        if $c6 == $c5 goto label4;

        return i21;

     label4:
        i21 = i21 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(short[], short[], int)
    {
        int i0, $i5, $i6, $i7, $i10, i11, i12;
        short[] r0, r1;
        short $s1, $s2, $s3, $s4;
        long $l8, $l9;

        r0 := @parameter0: short[];

        r1 := @parameter1: short[];

        i0 := @parameter2: int;

        i11 = 0;

        if i0 <= 3 goto label3;

        $s4 = r0[0];

        $s3 = r1[0];

        if $s4 == $s3 goto label1;

        return 0;

     label1:
        $i5 = <jdk.internal.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET>;

        $l9 = (long) $i5;

        $i6 = <jdk.internal.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET>;

        $l8 = (long) $i6;

        $i7 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_SHORT_INDEX_SCALE>;

        i12 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l9, r1, $l8, i0, $i7);

        if i12 < 0 goto label2;

        return i12;

     label2:
        $i10 = i12 ^ -1;

        i11 = i0 - $i10;

     label3:
        if i11 >= i0 goto label5;

        $s2 = r0[i11];

        $s1 = r1[i11];

        if $s2 == $s1 goto label4;

        return i11;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(short[], int, short[], int, int)
    {
        int i0, i1, $i2, i3, $i4, $i9, $i10, $i11, i12, $i13, $i14, $i15, i16, $i17, $i20, i21, i22;
        short[] r0, r1;
        short $s5, $s6, $s7, $s8;
        long $l18, $l19;

        r0 := @parameter0: short[];

        i1 := @parameter1: int;

        r1 := @parameter2: short[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i21 = 0;

        if i0 <= 3 goto label3;

        $s8 = r0[i1];

        $s7 = r1[i3];

        if $s8 == $s7 goto label1;

        return 0;

     label1:
        $i11 = <jdk.internal.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET>;

        $i9 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_SHORT_INDEX_SCALE>;

        $i10 = i1 << $i9;

        i12 = $i11 + $i10;

        $i15 = <jdk.internal.misc.Unsafe: int ARRAY_SHORT_BASE_OFFSET>;

        $i13 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_SHORT_INDEX_SCALE>;

        $i14 = i3 << $i13;

        i16 = $i15 + $i14;

        $l19 = (long) i12;

        $l18 = (long) i16;

        $i17 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_SHORT_INDEX_SCALE>;

        i22 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l19, r1, $l18, i0, $i17);

        if i22 < 0 goto label2;

        return i22;

     label2:
        $i20 = i22 ^ -1;

        i21 = i0 - $i20;

     label3:
        if i21 >= i0 goto label5;

        $i2 = i1 + i21;

        $s6 = r0[$i2];

        $i4 = i3 + i21;

        $s5 = r1[$i4];

        if $s6 == $s5 goto label4;

        return i21;

     label4:
        i21 = i21 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(int[], int[], int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i10, i11, i12;
        int[] r0, r1;
        long $l8, $l9;

        r0 := @parameter0: int[];

        r1 := @parameter1: int[];

        i0 := @parameter2: int;

        i11 = 0;

        if i0 <= 1 goto label3;

        $i4 = r0[0];

        $i3 = r1[0];

        if $i4 == $i3 goto label1;

        return 0;

     label1:
        $i5 = <jdk.internal.misc.Unsafe: int ARRAY_INT_BASE_OFFSET>;

        $l9 = (long) $i5;

        $i6 = <jdk.internal.misc.Unsafe: int ARRAY_INT_BASE_OFFSET>;

        $l8 = (long) $i6;

        $i7 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE>;

        i12 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l9, r1, $l8, i0, $i7);

        if i12 < 0 goto label2;

        return i12;

     label2:
        $i10 = i12 ^ -1;

        i11 = i0 - $i10;

     label3:
        if i11 >= i0 goto label5;

        $i2 = r0[i11];

        $i1 = r1[i11];

        if $i2 == $i1 goto label4;

        return i11;

     label4:
        i11 = i11 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(int[], int, int[], int, int)
    {
        int i0, i1, $i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, i12, $i13, $i14, $i15, i16, $i17, $i20, i21, i22;
        int[] r0, r1;
        long $l18, $l19;

        r0 := @parameter0: int[];

        i1 := @parameter1: int;

        r1 := @parameter2: int[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        i21 = 0;

        if i0 <= 1 goto label3;

        $i8 = r0[i1];

        $i7 = r1[i3];

        if $i8 == $i7 goto label1;

        return 0;

     label1:
        $i11 = <jdk.internal.misc.Unsafe: int ARRAY_INT_BASE_OFFSET>;

        $i9 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE>;

        $i10 = i1 << $i9;

        i12 = $i11 + $i10;

        $i15 = <jdk.internal.misc.Unsafe: int ARRAY_INT_BASE_OFFSET>;

        $i13 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE>;

        $i14 = i3 << $i13;

        i16 = $i15 + $i14;

        $l19 = (long) i12;

        $l18 = (long) i16;

        $i17 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE>;

        i22 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l19, r1, $l18, i0, $i17);

        if i22 < 0 goto label2;

        return i22;

     label2:
        $i20 = i22 ^ -1;

        i21 = i0 - $i20;

     label3:
        if i21 >= i0 goto label5;

        $i2 = i1 + i21;

        $i6 = r0[$i2];

        $i4 = i3 + i21;

        $i5 = r1[$i4];

        if $i6 == $i5 goto label4;

        return i21;

     label4:
        i21 = i21 + 1;

        goto label3;

     label5:
        return -1;
    }

    public static int mismatch(float[], float[], int)
    {
        float[] r0, r1;
        int i0, $i1;

        r0 := @parameter0: float[];

        r1 := @parameter1: float[];

        i0 := @parameter2: int;

        $i1 = staticinvoke <jdk.internal.util.ArraysSupport: int mismatch(float[],int,float[],int,int)>(r0, 0, r1, 0, i0);

        return $i1;
    }

    public static int mismatch(float[], int, float[], int, int)
    {
        int i0, i1, $i2, $i3, i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, i15, $i16, $i17, $i18, i19, $i20, i23;
        float[] r0, r1;
        float $f0, $f1, $f2, $f3, $f4, $f5;
        boolean $z0, $z1;
        long $l21, $l22;

        r0 := @parameter0: float[];

        i1 := @parameter1: int;

        r1 := @parameter2: float[];

        i4 := @parameter3: int;

        i0 := @parameter4: int;

        i23 = 0;

        if i0 <= 1 goto label5;

        $f2 = r0[i1];

        $i7 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f2);

        $f3 = r1[i4];

        $i8 = staticinvoke <java.lang.Float: int floatToRawIntBits(float)>($f3);

        if $i7 != $i8 goto label1;

        $i14 = <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_BASE_OFFSET>;

        $i12 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_FLOAT_INDEX_SCALE>;

        $i13 = i1 << $i12;

        i15 = $i14 + $i13;

        $i18 = <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_BASE_OFFSET>;

        $i16 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_FLOAT_INDEX_SCALE>;

        $i17 = i4 << $i16;

        i19 = $i18 + $i17;

        $l22 = (long) i15;

        $l21 = (long) i19;

        $i20 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_FLOAT_INDEX_SCALE>;

        i23 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l22, r1, $l21, i0, $i20);

     label1:
        if i23 < 0 goto label4;

        $i10 = i1 + i23;

        $f4 = r0[$i10];

        $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f4);

        if $z0 == 0 goto label2;

        $i11 = i4 + i23;

        $f5 = r1[$i11];

        $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>($f5);

        if $z1 != 0 goto label3;

     label2:
        return i23;

     label3:
        i23 = i23 + 1;

        goto label5;

     label4:
        $i9 = i23 ^ -1;

        i23 = i0 - $i9;

     label5:
        if i23 >= i0 goto label7;

        $i2 = i1 + i23;

        $f0 = r0[$i2];

        $i3 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0);

        $i5 = i4 + i23;

        $f1 = r1[$i5];

        $i6 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f1);

        if $i3 == $i6 goto label6;

        return i23;

     label6:
        i23 = i23 + 1;

        goto label5;

     label7:
        return -1;
    }

    public static int mismatch(long[], long[], int)
    {
        int i0, $i4, $i5, $i6, i9, $i10;
        long[] r0, r1;
        long $l1, $l2, $l7, $l8;
        byte $b3;

        r0 := @parameter0: long[];

        r1 := @parameter1: long[];

        i0 := @parameter2: int;

        if i0 != 0 goto label1;

        return -1;

     label1:
        $l2 = r0[0];

        $l1 = r1[0];

        $b3 = $l2 cmp $l1;

        if $b3 == 0 goto label2;

        return 0;

     label2:
        $i4 = <jdk.internal.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET>;

        $l8 = (long) $i4;

        $i5 = <jdk.internal.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET>;

        $l7 = (long) $i5;

        $i6 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        i9 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l8, r1, $l7, i0, $i6);

        if i9 < 0 goto label3;

        $i10 = i9;

        goto label4;

     label3:
        $i10 = -1;

     label4:
        return $i10;
    }

    public static int mismatch(long[], int, long[], int, int)
    {
        int i0, i1, i2, $i6, $i7, $i8, i9, $i10, $i11, $i12, i13, $i14, i17, $i18;
        long[] r0, r1;
        long $l3, $l4, $l15, $l16;
        byte $b5;

        r0 := @parameter0: long[];

        i1 := @parameter1: int;

        r1 := @parameter2: long[];

        i2 := @parameter3: int;

        i0 := @parameter4: int;

        if i0 != 0 goto label1;

        return -1;

     label1:
        $l4 = r0[i1];

        $l3 = r1[i2];

        $b5 = $l4 cmp $l3;

        if $b5 == 0 goto label2;

        return 0;

     label2:
        $i8 = <jdk.internal.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET>;

        $i6 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        $i7 = i1 << $i6;

        i9 = $i8 + $i7;

        $i12 = <jdk.internal.misc.Unsafe: int ARRAY_LONG_BASE_OFFSET>;

        $i10 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        $i11 = i2 << $i10;

        i13 = $i12 + $i11;

        $l16 = (long) i9;

        $l15 = (long) i13;

        $i14 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE>;

        i17 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l16, r1, $l15, i0, $i14);

        if i17 < 0 goto label3;

        $i18 = i17;

        goto label4;

     label3:
        $i18 = -1;

     label4:
        return $i18;
    }

    public static int mismatch(double[], double[], int)
    {
        double[] r0, r1;
        int i0, $i1;

        r0 := @parameter0: double[];

        r1 := @parameter1: double[];

        i0 := @parameter2: int;

        $i1 = staticinvoke <jdk.internal.util.ArraysSupport: int mismatch(double[],int,double[],int,int)>(r0, 0, r1, 0, i0);

        return $i1;
    }

    public static int mismatch(double[], int, double[], int, int)
    {
        int i0, i1, i3, $i6, $i7, $i8, $i10, $i13, $i14, $i15, i16, $i17, $i18, $i19, i20, $i21, i24, i25;
        double[] r0, r1;
        double $d0, $d1, $d2, $d3, $d4, $d5;
        long $l2, $l4, $l9, $l11, $l22, $l23;
        byte $b5, $b12;
        boolean $z0, $z1;

        r0 := @parameter0: double[];

        i1 := @parameter1: int;

        r1 := @parameter2: double[];

        i3 := @parameter3: int;

        i0 := @parameter4: int;

        if i0 != 0 goto label1;

        return -1;

     label1:
        i24 = 0;

        $d0 = r0[i1];

        $l2 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d0);

        $d1 = r1[i3];

        $l4 = staticinvoke <java.lang.Double: long doubleToRawLongBits(double)>($d1);

        $b5 = $l2 cmp $l4;

        if $b5 != 0 goto label2;

        $i15 = <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_BASE_OFFSET>;

        $i13 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_DOUBLE_INDEX_SCALE>;

        $i14 = i1 << $i13;

        i16 = $i15 + $i14;

        $i19 = <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_BASE_OFFSET>;

        $i17 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_DOUBLE_INDEX_SCALE>;

        $i18 = i3 << $i17;

        i20 = $i19 + $i18;

        $l23 = (long) i16;

        $l22 = (long) i20;

        $i21 = <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_DOUBLE_INDEX_SCALE>;

        i24 = staticinvoke <jdk.internal.util.ArraysSupport: int vectorizedMismatch(java.lang.Object,long,java.lang.Object,long,int,int)>(r0, $l23, r1, $l22, i0, $i21);

     label2:
        if i24 < 0 goto label7;

        $i6 = i1 + i24;

        $d2 = r0[$i6];

        $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d2);

        if $z0 == 0 goto label3;

        $i7 = i3 + i24;

        $d3 = r1[$i7];

        $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>($d3);

        if $z1 != 0 goto label4;

     label3:
        return i24;

     label4:
        i25 = i24 + 1;

     label5:
        if i25 >= i0 goto label7;

        $i8 = i1 + i25;

        $d4 = r0[$i8];

        $l9 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d4);

        $i10 = i3 + i25;

        $d5 = r1[$i10];

        $l11 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d5);

        $b12 = $l9 cmp $l11;

        if $b12 == 0 goto label6;

        return i25;

     label6:
        i25 = i25 + 1;

        goto label5;

     label7:
        return -1;
    }

    public static int newLength(int, int, int)
    {
        int i0, i1, $i2, i3, i4, $i5, $i6;

        i3 := @parameter0: int;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $i2 = staticinvoke <java.lang.Math: int max(int,int)>(i0, i1);

        i4 = $i2 + i3;

        $i5 = i4 - 2147483639;

        if $i5 > 0 goto label1;

        return i4;

     label1:
        $i6 = staticinvoke <jdk.internal.util.ArraysSupport: int hugeLength(int,int)>(i3, i0);

        return $i6;
    }

    private static int hugeLength(int, int)
    {
        int i0, i1, i2;
        java.lang.OutOfMemoryError $r0;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 = i0 + i1;

        if i2 >= 0 goto label1;

        $r0 = new java.lang.OutOfMemoryError;

        specialinvoke $r0.<java.lang.OutOfMemoryError: void <init>(java.lang.String)>("Required array length too large");

        throw $r0;

     label1:
        if i2 > 2147483639 goto label2;

        return 2147483639;

     label2:
        return 2147483647;
    }

    static void <clinit>()
    {
        jdk.internal.misc.Unsafe $r0, $r1;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;

        <jdk.internal.util.ArraysSupport: int MAX_ARRAY_LENGTH> = 2147483639;

        $r0 = staticinvoke <jdk.internal.misc.Unsafe: jdk.internal.misc.Unsafe getUnsafe()>();

        <jdk.internal.util.ArraysSupport: jdk.internal.misc.Unsafe U> = $r0;

        $r1 = <jdk.internal.util.ArraysSupport: jdk.internal.misc.Unsafe U>;

        $z0 = virtualinvoke $r1.<jdk.internal.misc.Unsafe: boolean isBigEndian()>();

        <jdk.internal.util.ArraysSupport: boolean BIG_ENDIAN> = $z0;

        $i0 = <jdk.internal.misc.Unsafe: int ARRAY_BOOLEAN_INDEX_SCALE>;

        $i1 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i0);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_BOOLEAN_INDEX_SCALE> = $i1;

        $i2 = <jdk.internal.misc.Unsafe: int ARRAY_BYTE_INDEX_SCALE>;

        $i3 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i2);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_BYTE_INDEX_SCALE> = $i3;

        $i4 = <jdk.internal.misc.Unsafe: int ARRAY_CHAR_INDEX_SCALE>;

        $i5 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i4);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_CHAR_INDEX_SCALE> = $i5;

        $i6 = <jdk.internal.misc.Unsafe: int ARRAY_SHORT_INDEX_SCALE>;

        $i7 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i6);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_SHORT_INDEX_SCALE> = $i7;

        $i8 = <jdk.internal.misc.Unsafe: int ARRAY_INT_INDEX_SCALE>;

        $i9 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i8);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_INT_INDEX_SCALE> = $i9;

        $i10 = <jdk.internal.misc.Unsafe: int ARRAY_LONG_INDEX_SCALE>;

        $i11 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i10);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_LONG_INDEX_SCALE> = $i11;

        $i12 = <jdk.internal.misc.Unsafe: int ARRAY_FLOAT_INDEX_SCALE>;

        $i13 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i12);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_FLOAT_INDEX_SCALE> = $i13;

        $i14 = <jdk.internal.misc.Unsafe: int ARRAY_DOUBLE_INDEX_SCALE>;

        $i15 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>($i14);

        <jdk.internal.util.ArraysSupport: int LOG2_ARRAY_DOUBLE_INDEX_SCALE> = $i15;

        $i16 = staticinvoke <jdk.internal.util.ArraysSupport: int exactLog2(int)>(8);

        <jdk.internal.util.ArraysSupport: int LOG2_BYTE_BIT_SIZE> = $i16;

        return;
    }
}
