public class jdk.internal.jimage.BasicImageReader extends java.lang.Object implements java.lang.AutoCloseable
{
    private static final boolean IS_64_BIT;
    private static final boolean USE_JVM_MAP;
    private static final boolean MAP_ALL;
    private final java.nio.file.Path imagePath;
    private final java.nio.ByteOrder byteOrder;
    private final java.lang.String name;
    private final java.nio.ByteBuffer memoryMap;
    private final java.nio.channels.FileChannel channel;
    private final jdk.internal.jimage.ImageHeader header;
    private final long indexSize;
    private final java.nio.IntBuffer redirect;
    private final java.nio.IntBuffer offsets;
    private final java.nio.ByteBuffer locations;
    private final java.nio.ByteBuffer strings;
    private final jdk.internal.jimage.ImageStringsReader stringsReader;
    private final jdk.internal.jimage.decompressor.Decompressor decompressor;

    private static boolean isSystemProperty(java.lang.String, java.lang.String, java.lang.String)
    {
        jdk.internal.jimage.BasicImageReader$1 $r0;
        java.lang.String r1, r2, r3;
        java.lang.Object $r4;
        java.lang.Boolean $r5;
        boolean $z0;

        r2 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.String;

        $r0 = new jdk.internal.jimage.BasicImageReader$1;

        specialinvoke $r0.<jdk.internal.jimage.BasicImageReader$1: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3);

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r5 = (java.lang.Boolean) $r4;

        $z0 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>();

        return $z0;
    }

    protected void <init>(java.nio.file.Path, java.nio.ByteOrder) throws java.io.IOException
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.nio.file.Path r1, $r3, $r7, $r11;
        java.lang.Object $r2, $r5;
        java.nio.ByteOrder r4, $r6;
        java.lang.String $r8, $r41, $r44, $r50, $r53, $r58, $r61, $r68;
        boolean $z0, $z1, $z2;
        java.nio.file.OpenOption[] $r9;
        java.nio.file.StandardOpenOption $r10;
        java.nio.channels.FileChannel $r12, $r46, $r54, $r63, $r64;
        jdk.internal.jimage.BasicImageReader$2 $r13;
        int i0, $i1, $i2, $i4, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i17;
        java.nio.IntBuffer $r15, $r23, $r27;
        jdk.internal.jimage.ImageHeader $r16, $r17, $r20, $r22, $r24, $r26, $r28, $r30, $r32, $r34;
        long $l3, $l5, $l6, $l16, $l18;
        java.nio.ByteBuffer $r18, $r19, $r21, $r25, $r29, $r31, $r33, $r35, r69, r70;
        byte $b7;
        jdk.internal.jimage.ImageStringsReader $r36;
        jdk.internal.jimage.decompressor.Decompressor $r37;
        java.io.IOException $r38, $r47, $r55;
        java.lang.StringBuilder $r39, $r40, $r42, $r43, $r48, $r49, $r51, $r52, $r56, $r57, $r59, $r60;
        java.nio.channels.FileChannel$MapMode $r45, $r65;
        java.lang.Class $r66;
        java.lang.ClassLoader $r67;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        r1 := @parameter0: java.nio.file.Path;

        r4 := @parameter1: java.nio.ByteOrder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (java.nio.file.Path) $r2;

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.file.Path imagePath> = $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r6 = (java.nio.ByteOrder) $r5;

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteOrder byteOrder> = $r6;

        $r7 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.file.Path imagePath>;

        $r8 = interfaceinvoke $r7.<java.nio.file.Path: java.lang.String toString()>();

        r0.<jdk.internal.jimage.BasicImageReader: java.lang.String name> = $r8;

        $z0 = <jdk.internal.jimage.BasicImageReader: boolean USE_JVM_MAP>;

        if $z0 == 0 goto label01;

        $r66 = class "Ljdk/internal/jimage/BasicImageReader;";

        $r67 = virtualinvoke $r66.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r67 != null goto label01;

        $r68 = r0.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        r69 = staticinvoke <jdk.internal.jimage.NativeImageBuffer: java.nio.ByteBuffer getNativeMap(java.lang.String)>($r68);

        goto label02;

     label01:
        r69 = null;

     label02:
        if r69 == null goto label03;

        $z1 = <jdk.internal.jimage.BasicImageReader: boolean MAP_ALL>;

        if $z1 == 0 goto label03;

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel> = null;

        goto label04;

     label03:
        $r11 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.file.Path imagePath>;

        $r9 = newarray (java.nio.file.OpenOption)[1];

        $r10 = <java.nio.file.StandardOpenOption: java.nio.file.StandardOpenOption READ>;

        $r9[0] = $r10;

        $r12 = staticinvoke <java.nio.channels.FileChannel: java.nio.channels.FileChannel open(java.nio.file.Path,java.nio.file.OpenOption[])>($r11, $r9);

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel> = $r12;

        $r13 = new jdk.internal.jimage.BasicImageReader$2;

        specialinvoke $r13.<jdk.internal.jimage.BasicImageReader$2: void <init>(jdk.internal.jimage.BasicImageReader)>(r0);

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r13);

     label04:
        $z2 = <jdk.internal.jimage.BasicImageReader: boolean MAP_ALL>;

        if $z2 == 0 goto label05;

        if r69 != null goto label05;

        $r64 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        $r65 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $r63 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        $l18 = virtualinvoke $r63.<java.nio.channels.FileChannel: long size()>();

        r69 = virtualinvoke $r64.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r65, 0L, $l18);

     label05:
        r70 = r69;

        i0 = staticinvoke <jdk.internal.jimage.ImageHeader: int getHeaderSize()>();

        if r69 != null goto label07;

        r70 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(i0);

        $r54 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        $i17 = virtualinvoke $r54.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>(r70, 0L);

        if $i17 != i0 goto label06;

        virtualinvoke r70.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();

        goto label08;

     label06:
        $r55 = new java.io.IOException;

        $r56 = new java.lang.StringBuilder;

        specialinvoke $r56.<java.lang.StringBuilder: void <init>()>();

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r58 = r0.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        $r59 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r58);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not an image file");

        $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r55.<java.io.IOException: void <init>(java.lang.String)>($r61);

        throw $r55;

     label07:
        $i1 = virtualinvoke r69.<java.nio.ByteBuffer: int capacity()>();

        if $i1 >= i0 goto label08;

        $r47 = new java.io.IOException;

        $r48 = new java.lang.StringBuilder;

        specialinvoke $r48.<java.lang.StringBuilder: void <init>()>();

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r50 = r0.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not an image file");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r47.<java.io.IOException: void <init>(java.lang.String)>($r53);

        throw $r47;

     label08:
        $r15 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer intBuffer(java.nio.ByteBuffer,int,int)>(r70, 0, i0);

        $r16 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader readHeader(java.nio.IntBuffer)>($r15);

        r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header> = $r16;

        $r17 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i2 = virtualinvoke $r17.<jdk.internal.jimage.ImageHeader: int getIndexSize()>();

        $l3 = (long) $i2;

        r0.<jdk.internal.jimage.BasicImageReader: long indexSize> = $l3;

        if r69 != null goto label09;

        $r46 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        $r45 = <java.nio.channels.FileChannel$MapMode: java.nio.channels.FileChannel$MapMode READ_ONLY>;

        $l16 = r0.<jdk.internal.jimage.BasicImageReader: long indexSize>;

        r69 = virtualinvoke $r46.<java.nio.channels.FileChannel: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)>($r45, 0L, $l16);

     label09:
        $r18 = virtualinvoke r69.<java.nio.ByteBuffer: java.nio.ByteBuffer asReadOnlyBuffer()>();

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap> = $r18;

        $r19 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap>;

        $i4 = virtualinvoke $r19.<java.nio.ByteBuffer: int capacity()>();

        $l6 = (long) $i4;

        $l5 = r0.<jdk.internal.jimage.BasicImageReader: long indexSize>;

        $b7 = $l6 cmp $l5;

        if $b7 >= 0 goto label10;

        $r38 = new java.io.IOException;

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The image file \"");

        $r41 = r0.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is corrupted");

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r38.<java.io.IOException: void <init>(java.lang.String)>($r44);

        throw $r38;

     label10:
        $r21 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap>;

        $r20 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i8 = virtualinvoke $r20.<jdk.internal.jimage.ImageHeader: int getRedirectOffset()>();

        $r22 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i9 = virtualinvoke $r22.<jdk.internal.jimage.ImageHeader: int getRedirectSize()>();

        $r23 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer intBuffer(java.nio.ByteBuffer,int,int)>($r21, $i8, $i9);

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer redirect> = $r23;

        $r25 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap>;

        $r24 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i10 = virtualinvoke $r24.<jdk.internal.jimage.ImageHeader: int getOffsetsOffset()>();

        $r26 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i11 = virtualinvoke $r26.<jdk.internal.jimage.ImageHeader: int getOffsetsSize()>();

        $r27 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer intBuffer(java.nio.ByteBuffer,int,int)>($r25, $i10, $i11);

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer offsets> = $r27;

        $r29 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap>;

        $r28 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i12 = virtualinvoke $r28.<jdk.internal.jimage.ImageHeader: int getLocationsOffset()>();

        $r30 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i13 = virtualinvoke $r30.<jdk.internal.jimage.ImageHeader: int getLocationsSize()>();

        $r31 = staticinvoke <jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>($r29, $i12, $i13);

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer locations> = $r31;

        $r33 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap>;

        $r32 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i14 = virtualinvoke $r32.<jdk.internal.jimage.ImageHeader: int getStringsOffset()>();

        $r34 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        $i15 = virtualinvoke $r34.<jdk.internal.jimage.ImageHeader: int getStringsSize()>();

        $r35 = staticinvoke <jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>($r33, $i14, $i15);

        r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer strings> = $r35;

        $r36 = new jdk.internal.jimage.ImageStringsReader;

        specialinvoke $r36.<jdk.internal.jimage.ImageStringsReader: void <init>(jdk.internal.jimage.BasicImageReader)>(r0);

        r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader stringsReader> = $r36;

        $r37 = new jdk.internal.jimage.decompressor.Decompressor;

        specialinvoke $r37.<jdk.internal.jimage.decompressor.Decompressor: void <init>()>();

        r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.decompressor.Decompressor decompressor> = $r37;

        return;
    }

    protected void <init>(java.nio.file.Path) throws java.io.IOException
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.nio.file.Path r1;
        java.nio.ByteOrder $r2;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        r1 := @parameter0: java.nio.file.Path;

        $r2 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        specialinvoke r0.<jdk.internal.jimage.BasicImageReader: void <init>(java.nio.file.Path,java.nio.ByteOrder)>(r1, $r2);

        return;
    }

    public static jdk.internal.jimage.BasicImageReader open(java.nio.file.Path) throws java.io.IOException
    {
        jdk.internal.jimage.BasicImageReader $r0;
        java.nio.file.Path r1;
        java.nio.ByteOrder $r2;

        r1 := @parameter0: java.nio.file.Path;

        $r0 = new jdk.internal.jimage.BasicImageReader;

        $r2 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        specialinvoke $r0.<jdk.internal.jimage.BasicImageReader: void <init>(java.nio.file.Path,java.nio.ByteOrder)>(r1, $r2);

        return $r0;
    }

    public jdk.internal.jimage.ImageHeader getHeader()
    {
        jdk.internal.jimage.BasicImageReader r0;
        jdk.internal.jimage.ImageHeader $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        return $r1;
    }

    private jdk.internal.jimage.ImageHeader readHeader(java.nio.IntBuffer) throws java.io.IOException
    {
        java.nio.IntBuffer r0;
        jdk.internal.jimage.ImageHeader r1;
        int $i0, $i1, $i2, $i3, $i4;
        java.io.IOException $r2, $r13;
        java.lang.StringBuilder $r3, $r4, $r7, $r8, $r9, $r10, $r11, $r14, $r15, $r17, $r18;
        jdk.internal.jimage.BasicImageReader r5;
        java.lang.String $r6, $r12, $r16, $r19;

        r5 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: java.nio.IntBuffer;

        r1 = staticinvoke <jdk.internal.jimage.ImageHeader: jdk.internal.jimage.ImageHeader readFrom(java.nio.IntBuffer)>(r0);

        $i0 = virtualinvoke r1.<jdk.internal.jimage.ImageHeader: int getMagic()>();

        if $i0 == -889267494 goto label1;

        $r13 = new java.io.IOException;

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>()>();

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        $r16 = r5.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not an image file");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r13.<java.io.IOException: void <init>(java.lang.String)>($r19);

        throw $r13;

     label1:
        $i1 = virtualinvoke r1.<jdk.internal.jimage.ImageHeader: int getMajorVersion()>();

        if $i1 != 1 goto label2;

        $i4 = virtualinvoke r1.<jdk.internal.jimage.ImageHeader: int getMinorVersion()>();

        if $i4 == 0 goto label3;

     label2:
        $r2 = new java.io.IOException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The image file \"");

        $r6 = r5.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is not the correct version. Major: ");

        $i2 = virtualinvoke r1.<jdk.internal.jimage.ImageHeader: int getMajorVersion()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(". Minor: ");

        $i3 = virtualinvoke r1.<jdk.internal.jimage.ImageHeader: int getMinorVersion()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r12);

        throw $r2;

     label3:
        return r1;
    }

    private static java.nio.ByteBuffer slice(java.nio.ByteBuffer, int, int)
    {
        java.nio.ByteBuffer r0, $r5;
        int i0, i1, $i2;
        java.lang.Throwable $r6;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        entermonitor r0;

     label1:
        $i2 = i0 + i1;

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer limit(int)>($i2);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(i0);

        $r5 = virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer slice()>();

        exitmonitor r0;

     label2:
        return $r5;

     label3:
        $r6 := @caughtexception;

        exitmonitor r0;

     label4:
        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label3;
        catch java.lang.Throwable from label3 to label4 with label3;
    }

    private java.nio.IntBuffer intBuffer(java.nio.ByteBuffer, int, int)
    {
        java.nio.ByteBuffer r0, $r1, $r4;
        int i0, i1;
        jdk.internal.jimage.BasicImageReader r2;
        java.nio.ByteOrder $r3;
        java.nio.IntBuffer $r5;

        r2 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = staticinvoke <jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>(r0, i0, i1);

        $r3 = r2.<jdk.internal.jimage.BasicImageReader: java.nio.ByteOrder byteOrder>;

        $r4 = virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r3);

        $r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.IntBuffer asIntBuffer()>();

        return $r5;
    }

    public static void releaseByteBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0;

        r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $z0 = <jdk.internal.jimage.BasicImageReader: boolean MAP_ALL>;

        if $z0 != 0 goto label1;

        staticinvoke <jdk.internal.jimage.ImageBufferCache: void releaseBuffer(java.nio.ByteBuffer)>(r0);

     label1:
        return;
    }

    public java.lang.String getName()
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: java.lang.String name>;

        return $r1;
    }

    public java.nio.ByteOrder getByteOrder()
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.nio.ByteOrder $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteOrder byteOrder>;

        return $r1;
    }

    public java.nio.file.Path getImagePath()
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.nio.file.Path $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.file.Path imagePath>;

        return $r1;
    }

    public void close() throws java.io.IOException
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.nio.channels.FileChannel $r1, $r2;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        if $r1 == null goto label1;

        $r2 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        virtualinvoke $r2.<java.nio.channels.FileChannel: void close()>();

     label1:
        return;
    }

    public jdk.internal.jimage.ImageStringsReader getStrings()
    {
        jdk.internal.jimage.BasicImageReader r0;
        jdk.internal.jimage.ImageStringsReader $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader stringsReader>;

        return $r1;
    }

    public synchronized jdk.internal.jimage.ImageLocation findLocation(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2;
        jdk.internal.jimage.BasicImageReader r4;
        jdk.internal.jimage.ImageHeader $r5;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.nio.IntBuffer $r6, $r7;
        long[] r8;
        jdk.internal.jimage.ImageStringsReader $r9, $r11;
        boolean $z0;
        jdk.internal.jimage.ImageLocation $r10;

        r4 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r5 = r4.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        i0 = virtualinvoke $r5.<jdk.internal.jimage.ImageHeader: int getTableLength()>();

        $r6 = r4.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer redirect>;

        $i1 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int hashCode(java.lang.String,java.lang.String)>(r0, r2);

        $i2 = $i1 % i0;

        i6 = virtualinvoke $r6.<java.nio.IntBuffer: int get(int)>($i2);

        if i6 >= 0 goto label1;

        $i5 = neg i6;

        i7 = $i5 - 1;

        goto label3;

     label1:
        if i6 <= 0 goto label2;

        $i3 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int hashCode(java.lang.String,java.lang.String,int)>(r0, r2, i6);

        i7 = $i3 % i0;

        goto label3;

     label2:
        return null;

     label3:
        $r7 = r4.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer offsets>;

        $i4 = virtualinvoke $r7.<java.nio.IntBuffer: int get(int)>(i7);

        r8 = virtualinvoke r4.<jdk.internal.jimage.BasicImageReader: long[] getAttributes(int)>($i4);

        $r9 = r4.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader stringsReader>;

        $z0 = staticinvoke <jdk.internal.jimage.ImageLocation: boolean verify(java.lang.String,java.lang.String,long[],jdk.internal.jimage.ImageStrings)>(r0, r2, r8, $r9);

        if $z0 != 0 goto label4;

        return null;

     label4:
        $r10 = new jdk.internal.jimage.ImageLocation;

        $r11 = r4.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader stringsReader>;

        specialinvoke $r10.<jdk.internal.jimage.ImageLocation: void <init>(long[],jdk.internal.jimage.ImageStrings)>(r8, $r11);

        return $r10;
    }

    public synchronized jdk.internal.jimage.ImageLocation findLocation(java.lang.String)
    {
        java.lang.String r0;
        jdk.internal.jimage.BasicImageReader r2;
        jdk.internal.jimage.ImageHeader $r3;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7;
        java.nio.IntBuffer $r4, $r5;
        long[] r6;
        jdk.internal.jimage.ImageStringsReader $r7, $r9;
        boolean $z0;
        jdk.internal.jimage.ImageLocation $r8;

        r2 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r3 = r2.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageHeader header>;

        i0 = virtualinvoke $r3.<jdk.internal.jimage.ImageHeader: int getTableLength()>();

        $r4 = r2.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer redirect>;

        $i1 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int hashCode(java.lang.String)>(r0);

        $i2 = $i1 % i0;

        i6 = virtualinvoke $r4.<java.nio.IntBuffer: int get(int)>($i2);

        if i6 >= 0 goto label1;

        $i5 = neg i6;

        i7 = $i5 - 1;

        goto label3;

     label1:
        if i6 <= 0 goto label2;

        $i3 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int hashCode(java.lang.String,int)>(r0, i6);

        i7 = $i3 % i0;

        goto label3;

     label2:
        return null;

     label3:
        $r5 = r2.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer offsets>;

        $i4 = virtualinvoke $r5.<java.nio.IntBuffer: int get(int)>(i7);

        r6 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: long[] getAttributes(int)>($i4);

        $r7 = r2.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader stringsReader>;

        $z0 = staticinvoke <jdk.internal.jimage.ImageLocation: boolean verify(java.lang.String,long[],jdk.internal.jimage.ImageStrings)>(r0, r6, $r7);

        if $z0 != 0 goto label4;

        return null;

     label4:
        $r8 = new jdk.internal.jimage.ImageLocation;

        $r9 = r2.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader stringsReader>;

        specialinvoke $r8.<jdk.internal.jimage.ImageLocation: void <init>(long[],jdk.internal.jimage.ImageStrings)>(r6, $r9);

        return $r8;
    }

    public java.lang.String[] getEntryNames()
    {
        jdk.internal.jimage.BasicImageReader r0;
        java.nio.IntBuffer $r1, $r3;
        int $i0;
        int[] r2;
        java.util.stream.IntStream $r5, $r7;
        java.util.function.IntPredicate $r6;
        java.util.function.IntFunction $r8, $r11;
        java.util.stream.Stream $r9, $r10;
        java.lang.Object[] $r12;
        java.lang.String[] $r13;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        $r1 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer offsets>;

        $i0 = virtualinvoke $r1.<java.nio.IntBuffer: int capacity()>();

        r2 = newarray (int)[$i0];

        $r3 = r0.<jdk.internal.jimage.BasicImageReader: java.nio.IntBuffer offsets>;

        virtualinvoke $r3.<java.nio.IntBuffer: java.nio.IntBuffer get(int[])>(r2);

        $r5 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream of(int[])>(r2);

        $r6 = staticinvoke <jdk.internal.jimage.BasicImageReader$lambda_getEntryNames_0__155: java.util.function.IntPredicate bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.IntStream: java.util.stream.IntStream filter(java.util.function.IntPredicate)>($r6);

        $r8 = staticinvoke <jdk.internal.jimage.BasicImageReader$lambda_getEntryNames_1__156: java.util.function.IntFunction bootstrap$(jdk.internal.jimage.BasicImageReader)>(r0);

        $r9 = interfaceinvoke $r7.<java.util.stream.IntStream: java.util.stream.Stream mapToObj(java.util.function.IntFunction)>($r8);

        $r10 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream sorted()>();

        $r11 = staticinvoke <jdk.internal.jimage.BasicImageReader$lambda_getEntryNames_2__157: java.util.function.IntFunction bootstrap$()>();

        $r12 = interfaceinvoke $r10.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r11);

        $r13 = (java.lang.String[]) $r12;

        return $r13;
    }

    jdk.internal.jimage.ImageLocation getLocation(int)
    {
        jdk.internal.jimage.BasicImageReader r0;
        int i0;
        jdk.internal.jimage.ImageLocation $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        i0 := @parameter0: int;

        $r1 = staticinvoke <jdk.internal.jimage.ImageLocation: jdk.internal.jimage.ImageLocation readFrom(jdk.internal.jimage.BasicImageReader,int)>(r0, i0);

        return $r1;
    }

    public long[] getAttributes(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r0;
        jdk.internal.jimage.BasicImageReader r1;
        java.nio.ByteBuffer $r2, $r3, $r4, r5;
        long[] $r6;

        r1 := @this: jdk.internal.jimage.BasicImageReader;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r1.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer locations>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("offset");

        throw $r0;

     label2:
        $r4 = r1.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer locations>;

        $r3 = r1.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer locations>;

        $i2 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $i3 = $i2 - i0;

        r5 = staticinvoke <jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>($r4, i0, $i3);

        $r6 = staticinvoke <jdk.internal.jimage.ImageLocation: long[] decompress(java.nio.ByteBuffer)>(r5);

        return $r6;
    }

    public java.lang.String getString(int)
    {
        int i0, $i1, $i2, $i3;
        java.lang.IndexOutOfBoundsException $r0;
        jdk.internal.jimage.BasicImageReader r1;
        java.nio.ByteBuffer $r2, $r3, $r4, r5;
        java.lang.String $r6;

        r1 := @this: jdk.internal.jimage.BasicImageReader;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        $r2 = r1.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer strings>;

        $i1 = virtualinvoke $r2.<java.nio.ByteBuffer: int limit()>();

        if i0 < $i1 goto label2;

     label1:
        $r0 = new java.lang.IndexOutOfBoundsException;

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>("offset");

        throw $r0;

     label2:
        $r4 = r1.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer strings>;

        $r3 = r1.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer strings>;

        $i2 = virtualinvoke $r3.<java.nio.ByteBuffer: int limit()>();

        $i3 = $i2 - i0;

        r5 = staticinvoke <jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>($r4, i0, $i3);

        $r6 = staticinvoke <jdk.internal.jimage.ImageStringsReader: java.lang.String stringFromByteBuffer(java.nio.ByteBuffer)>(r5);

        return $r6;
    }

    private byte[] getBufferBytes(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int $i0;
        byte[] r2;
        jdk.internal.jimage.BasicImageReader r4;

        r4 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $i0 = virtualinvoke r0.<java.nio.ByteBuffer: int limit()>();

        r2 = newarray (byte)[$i0];

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[])>(r2);

        return r2;
    }

    private java.nio.ByteBuffer readBuffer(long, long)
    {
        long l0, l3, $l7;
        byte $b1, $b2, $b4, $b5, $b8;
        java.lang.IndexOutOfBoundsException $r0, $r5;
        java.lang.StringBuilder $r1, $r2, $r3, $r6, $r7, $r8, $r15, $r16, $r17, $r18, $r19, $r20;
        java.lang.String $r4, $r9, $r21;
        boolean $z0;
        jdk.internal.jimage.BasicImageReader r10;
        java.nio.channels.FileChannel $r11, $r12;
        int i6, $i9, $i10;
        java.lang.RuntimeException $r14, $r28;
        java.lang.InternalError $r22;
        java.nio.ByteBuffer $r23, r29, r30;
        java.nio.ByteOrder $r24;
        java.io.IOException $r26;

        r10 := @this: jdk.internal.jimage.BasicImageReader;

        l0 := @parameter0: long;

        l3 := @parameter1: long;

        $b1 = l0 cmp 0L;

        if $b1 < 0 goto label01;

        $b2 = 2147483647L cmp l0;

        if $b2 > 0 goto label02;

     label01:
        $r0 = new java.lang.IndexOutOfBoundsException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad offset: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4);

        throw $r0;

     label02:
        $b4 = l3 cmp 0L;

        if $b4 < 0 goto label03;

        $b5 = 2147483647L cmp l3;

        if $b5 > 0 goto label04;

     label03:
        $r5 = new java.lang.IndexOutOfBoundsException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad size: ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r5.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r9);

        throw $r5;

     label04:
        $z0 = <jdk.internal.jimage.BasicImageReader: boolean MAP_ALL>;

        if $z0 == 0 goto label05;

        $r23 = r10.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer memoryMap>;

        $i10 = (int) l0;

        $i9 = (int) l3;

        r29 = staticinvoke <jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer slice(java.nio.ByteBuffer,int,int)>($r23, $i10, $i9);

        $r24 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN>;

        virtualinvoke r29.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r24);

        return r29;

     label05:
        $r11 = r10.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        if $r11 != null goto label06;

        $r22 = new java.lang.InternalError;

        specialinvoke $r22.<java.lang.InternalError: void <init>(java.lang.String)>("Image file channel not open");

        throw $r22;

     label06:
        r30 = staticinvoke <jdk.internal.jimage.ImageBufferCache: java.nio.ByteBuffer getBuffer(long)>(l3);

     label07:
        $r12 = r10.<jdk.internal.jimage.BasicImageReader: java.nio.channels.FileChannel channel>;

        i6 = virtualinvoke $r12.<java.nio.channels.FileChannel: int read(java.nio.ByteBuffer,long)>(r30, l0);

        virtualinvoke r30.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();

     label08:
        goto label10;

     label09:
        $r26 := @caughtexception;

        staticinvoke <jdk.internal.jimage.ImageBufferCache: void releaseBuffer(java.nio.ByteBuffer)>(r30);

        $r28 = new java.lang.RuntimeException;

        specialinvoke $r28.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r26);

        throw $r28;

     label10:
        $l7 = (long) i6;

        $b8 = $l7 cmp l3;

        if $b8 == 0 goto label11;

        staticinvoke <jdk.internal.jimage.ImageBufferCache: void releaseBuffer(java.nio.ByteBuffer)>(r30);

        $r14 = new java.lang.RuntimeException;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>()>();

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Short read: ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i6);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bytes");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>($r21);

        throw $r14;

     label11:
        return r30;

        catch java.io.IOException from label07 to label08 with label09;
    }

    public byte[] getResource(java.lang.String)
    {
        java.lang.String r0;
        jdk.internal.jimage.BasicImageReader r2;
        jdk.internal.jimage.ImageLocation r3;
        byte[] $r4;

        r2 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r3 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageLocation findLocation(java.lang.String)>(r0);

        if r3 == null goto label1;

        $r4 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: byte[] getResource(jdk.internal.jimage.ImageLocation)>(r3);

        goto label2;

     label1:
        $r4 = null;

     label2:
        return $r4;
    }

    public byte[] getResource(jdk.internal.jimage.ImageLocation)
    {
        jdk.internal.jimage.BasicImageReader r0;
        jdk.internal.jimage.ImageLocation r1;
        java.nio.ByteBuffer r2;
        byte[] r3;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageLocation;

        r2 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer getResourceBuffer(jdk.internal.jimage.ImageLocation)>(r1);

        if r2 == null goto label1;

        r3 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: byte[] getBufferBytes(java.nio.ByteBuffer)>(r2);

        staticinvoke <jdk.internal.jimage.ImageBufferCache: void releaseBuffer(java.nio.ByteBuffer)>(r2);

        return r3;

     label1:
        return null;
    }

    public java.nio.ByteBuffer getResourceBuffer(jdk.internal.jimage.ImageLocation)
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0, $l1, l2, l3, l4;
        jdk.internal.jimage.BasicImageReader r2;
        byte $b5, $b6, $b7, $b8, $b9;
        java.lang.IndexOutOfBoundsException $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11;
        java.lang.String $r7, $r12;
        java.nio.ByteBuffer r13, $r19, $r20;
        byte[] r14, r18;
        jdk.internal.jimage.decompressor.Decompressor $r15;
        java.nio.ByteOrder $r16;
        jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider $r17;
        java.io.IOException $r21;
        java.lang.RuntimeException $r23;

        r2 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: jdk.internal.jimage.ImageLocation;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getContentOffset()>();

        $l1 = r2.<jdk.internal.jimage.BasicImageReader: long indexSize>;

        l2 = $l0 + $l1;

        l3 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getCompressedSize()>();

        l4 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getUncompressedSize()>();

        $b5 = l3 cmp 0L;

        if $b5 < 0 goto label01;

        $b6 = 2147483647L cmp l3;

        if $b6 >= 0 goto label02;

     label01:
        $r3 = new java.lang.IndexOutOfBoundsException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad compressed size: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r7);

        throw $r3;

     label02:
        $b7 = l4 cmp 0L;

        if $b7 < 0 goto label03;

        $b8 = 2147483647L cmp l4;

        if $b8 >= 0 goto label04;

     label03:
        $r8 = new java.lang.IndexOutOfBoundsException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad uncompressed size: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l4);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r12);

        throw $r8;

     label04:
        $b9 = l3 cmp 0L;

        if $b9 != 0 goto label05;

        $r20 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer readBuffer(long,long)>(l2, l4);

        return $r20;

     label05:
        r13 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: java.nio.ByteBuffer readBuffer(long,long)>(l2, l3);

        if r13 == null goto label10;

        r14 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: byte[] getBufferBytes(java.nio.ByteBuffer)>(r13);

        staticinvoke <jdk.internal.jimage.ImageBufferCache: void releaseBuffer(java.nio.ByteBuffer)>(r13);

     label06:
        $r15 = r2.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.decompressor.Decompressor decompressor>;

        $r16 = r2.<jdk.internal.jimage.BasicImageReader: java.nio.ByteOrder byteOrder>;

        $r17 = staticinvoke <jdk.internal.jimage.BasicImageReader$lambda_getResourceBuffer_3__158: jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider bootstrap$(jdk.internal.jimage.BasicImageReader)>(r2);

        r18 = virtualinvoke $r15.<jdk.internal.jimage.decompressor.Decompressor: byte[] decompressResource(java.nio.ByteOrder,jdk.internal.jimage.decompressor.ResourceDecompressor$StringsProvider,byte[])>($r16, $r17, r14);

     label07:
        goto label09;

     label08:
        $r21 := @caughtexception;

        $r23 = new java.lang.RuntimeException;

        specialinvoke $r23.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r21);

        throw $r23;

     label09:
        $r19 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r18);

        return $r19;

     label10:
        return null;

        catch java.io.IOException from label06 to label07 with label08;
    }

    public java.io.InputStream getResourceStream(jdk.internal.jimage.ImageLocation)
    {
        jdk.internal.jimage.ImageLocation r0;
        jdk.internal.jimage.BasicImageReader r2;
        byte[] r3;
        java.io.ByteArrayInputStream $r4;

        r2 := @this: jdk.internal.jimage.BasicImageReader;

        r0 := @parameter0: jdk.internal.jimage.ImageLocation;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r3 = virtualinvoke r2.<jdk.internal.jimage.BasicImageReader: byte[] getResource(jdk.internal.jimage.ImageLocation)>(r0);

        $r4 = new java.io.ByteArrayInputStream;

        specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r3);

        return $r4;
    }

    public java.lang.String lambda$getResourceBuffer$3(int)
    {
        jdk.internal.jimage.BasicImageReader r0;
        int i0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        i0 := @parameter0: int;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: java.lang.String getString(int)>(i0);

        return $r1;
    }

    public static java.lang.String[] lambda$getEntryNames$2(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    public java.lang.String lambda$getEntryNames$1(int)
    {
        jdk.internal.jimage.BasicImageReader r0;
        int i0;
        jdk.internal.jimage.ImageLocation $r1;
        java.lang.String $r2;

        r0 := @this: jdk.internal.jimage.BasicImageReader;

        i0 := @parameter0: int;

        $r1 = staticinvoke <jdk.internal.jimage.ImageLocation: jdk.internal.jimage.ImageLocation readFrom(jdk.internal.jimage.BasicImageReader,int)>(r0, i0);

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageLocation: java.lang.String getFullName()>();

        return $r2;
    }

    public static boolean lambda$getEntryNames$0(int)
    {
        int i0;
        boolean $z0;

        i0 := @parameter0: int;

        if i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    static void <clinit>()
    {
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r2;

        $z0 = staticinvoke <jdk.internal.jimage.BasicImageReader: boolean isSystemProperty(java.lang.String,java.lang.String,java.lang.String)>("sun.arch.data.model", "64", "32");

        <jdk.internal.jimage.BasicImageReader: boolean IS_64_BIT> = $z0;

        $z1 = staticinvoke <jdk.internal.jimage.BasicImageReader: boolean isSystemProperty(java.lang.String,java.lang.String,java.lang.String)>("jdk.image.use.jvm.map", "true", "true");

        <jdk.internal.jimage.BasicImageReader: boolean USE_JVM_MAP> = $z1;

        $z2 = <jdk.internal.jimage.BasicImageReader: boolean IS_64_BIT>;

        if $z2 == 0 goto label1;

        $r2 = "true";

        goto label2;

     label1:
        $r2 = "false";

     label2:
        $z3 = staticinvoke <jdk.internal.jimage.BasicImageReader: boolean isSystemProperty(java.lang.String,java.lang.String,java.lang.String)>("jdk.image.map.all", "true", $r2);

        <jdk.internal.jimage.BasicImageReader: boolean MAP_ALL> = $z3;

        return;
    }
}
