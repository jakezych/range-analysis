public final class jdk.internal.perf.Perf extends java.lang.Object
{
    private static jdk.internal.perf.Perf instance;
    private static final int PERF_MODE_RO;
    private static final int PERF_MODE_RW;

    private void <init>()
    {
        jdk.internal.perf.Perf r0;

        r0 := @this: jdk.internal.perf.Perf;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static jdk.internal.perf.Perf getPerf()
    {
        java.lang.SecurityManager r0;
        jdk.internal.perf.Perf $r1;
        java.lang.RuntimePermission $r2;

        r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r0 == null goto label1;

        $r2 = new java.lang.RuntimePermission;

        specialinvoke $r2.<java.lang.RuntimePermission: void <init>(java.lang.String)>("jdk.internal.perf.Perf.getPerf");

        virtualinvoke r0.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2);

     label1:
        $r1 = <jdk.internal.perf.Perf: jdk.internal.perf.Perf instance>;

        return $r1;
    }

    public java.nio.ByteBuffer attach(int, java.lang.String) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        java.lang.String r0;
        int $i0, $i1, i2;
        java.lang.IllegalArgumentException $r1;
        jdk.internal.perf.Perf r2;
        java.nio.ByteBuffer $r3, $r4;

        r2 := @this: jdk.internal.perf.Perf;

        i2 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>("r");

        if $i0 != 0 goto label1;

        $r4 = virtualinvoke r2.<jdk.internal.perf.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(null, i2, 0);

        return $r4;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>("rw");

        if $i1 != 0 goto label2;

        $r3 = virtualinvoke r2.<jdk.internal.perf.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(null, i2, 1);

        return $r3;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown mode");

        throw $r1;
    }

    public java.nio.ByteBuffer attach(java.lang.String, int, java.lang.String) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        java.lang.String r0, r3;
        int $i0, $i1, i2;
        java.lang.IllegalArgumentException $r1;
        jdk.internal.perf.Perf r2;
        java.nio.ByteBuffer $r4, $r5;

        r2 := @this: jdk.internal.perf.Perf;

        r3 := @parameter0: java.lang.String;

        i2 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>("r");

        if $i0 != 0 goto label1;

        $r5 = virtualinvoke r2.<jdk.internal.perf.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(r3, i2, 0);

        return $r5;

     label1:
        $i1 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>("rw");

        if $i1 != 0 goto label2;

        $r4 = virtualinvoke r2.<jdk.internal.perf.Perf: java.nio.ByteBuffer attachImpl(java.lang.String,int,int)>(r3, i2, 1);

        return $r4;

     label2:
        $r1 = new java.lang.IllegalArgumentException;

        specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("unknown mode");

        throw $r1;
    }

    private java.nio.ByteBuffer attachImpl(java.lang.String, int, int) throws java.lang.IllegalArgumentException, java.io.IOException
    {
        jdk.internal.perf.Perf r0, $r6;
        java.lang.String r1;
        int i0, i1;
        java.nio.ByteBuffer r2, r3;
        java.lang.ref.Cleaner $r4;
        jdk.internal.perf.Perf$CleanerAction $r5;

        r0 := @this: jdk.internal.perf.Perf;

        r1 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        r2 = virtualinvoke r0.<jdk.internal.perf.Perf: java.nio.ByteBuffer attach(java.lang.String,int,int)>(r1, i0, i1);

        if i0 != 0 goto label1;

        return r2;

     label1:
        r3 = virtualinvoke r2.<java.nio.ByteBuffer: java.nio.ByteBuffer duplicate()>();

        $r4 = staticinvoke <jdk.internal.ref.CleanerFactory: java.lang.ref.Cleaner cleaner()>();

        $r5 = new jdk.internal.perf.Perf$CleanerAction;

        $r6 = <jdk.internal.perf.Perf: jdk.internal.perf.Perf instance>;

        specialinvoke $r5.<jdk.internal.perf.Perf$CleanerAction: void <init>(jdk.internal.perf.Perf,java.nio.ByteBuffer)>($r6, r2);

        virtualinvoke $r4.<java.lang.ref.Cleaner: java.lang.ref.Cleaner$Cleanable register(java.lang.Object,java.lang.Runnable)>(r3, $r5);

        return r3;
    }

    private native java.nio.ByteBuffer attach(java.lang.String, int, int) throws java.lang.IllegalArgumentException, java.io.IOException;

    private native void detach(java.nio.ByteBuffer);

    public native java.nio.ByteBuffer createLong(java.lang.String, int, int, long);

    public java.nio.ByteBuffer createString(java.lang.String, int, int, java.lang.String, int)
    {
        java.lang.String r0, r5;
        sun.nio.cs.UTF_8 $r1;
        byte[] r2, r3;
        int $i0, $i1, $i2, $i3, i4, i5, i6, $i7, $i8;
        jdk.internal.perf.Perf r4;
        java.nio.ByteBuffer $r6;

        r4 := @this: jdk.internal.perf.Perf;

        r5 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        i6 := @parameter4: int;

        $r1 = <sun.nio.cs.UTF_8: sun.nio.cs.UTF_8 INSTANCE>;

        r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $i0 = lengthof r2;

        $i1 = $i0 + 1;

        r3 = newarray (byte)[$i1];

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i2);

        $i3 = lengthof r2;

        r3[$i3] = 0;

        $i7 = lengthof r3;

        $i8 = staticinvoke <java.lang.Math: int max(int,int)>($i7, i6);

        $r6 = virtualinvoke r4.<jdk.internal.perf.Perf: java.nio.ByteBuffer createByteArray(java.lang.String,int,int,byte[],int)>(r5, i4, i5, r3, $i8);

        return $r6;
    }

    public java.nio.ByteBuffer createString(java.lang.String, int, int, java.lang.String)
    {
        java.lang.String r0, r5;
        sun.nio.cs.UTF_8 $r1;
        byte[] r2, r3;
        int $i0, $i1, $i2, $i3, i4, i5, $i6;
        jdk.internal.perf.Perf r4;
        java.nio.ByteBuffer $r6;

        r4 := @this: jdk.internal.perf.Perf;

        r5 := @parameter0: java.lang.String;

        i4 := @parameter1: int;

        i5 := @parameter2: int;

        r0 := @parameter3: java.lang.String;

        $r1 = <sun.nio.cs.UTF_8: sun.nio.cs.UTF_8 INSTANCE>;

        r2 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r1);

        $i0 = lengthof r2;

        $i1 = $i0 + 1;

        r3 = newarray (byte)[$i1];

        $i2 = lengthof r2;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r2, 0, r3, 0, $i2);

        $i3 = lengthof r2;

        r3[$i3] = 0;

        $i6 = lengthof r3;

        $r6 = virtualinvoke r4.<jdk.internal.perf.Perf: java.nio.ByteBuffer createByteArray(java.lang.String,int,int,byte[],int)>(r5, i4, i5, r3, $i6);

        return $r6;
    }

    public native java.nio.ByteBuffer createByteArray(java.lang.String, int, int, byte[], int);

    public native long highResCounter();

    public native long highResFrequency();

    private static native void registerNatives();

    static void <clinit>()
    {
        jdk.internal.perf.Perf $r0;

        <jdk.internal.perf.Perf: int PERF_MODE_RW> = 1;

        <jdk.internal.perf.Perf: int PERF_MODE_RO> = 0;

        staticinvoke <jdk.internal.perf.Perf: void registerNatives()>();

        $r0 = new jdk.internal.perf.Perf;

        specialinvoke $r0.<jdk.internal.perf.Perf: void <init>()>();

        <jdk.internal.perf.Perf: jdk.internal.perf.Perf instance> = $r0;

        return;
    }
}
