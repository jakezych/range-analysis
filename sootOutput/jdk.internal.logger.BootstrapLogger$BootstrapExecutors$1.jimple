class jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final java.util.concurrent.ExecutorService val$owner;
    final java.lang.Runnable val$r;
    final jdk.internal.logger.BootstrapLogger$BootstrapExecutors this$0;

    void <init>(jdk.internal.logger.BootstrapLogger$BootstrapExecutors, java.util.concurrent.ExecutorService, java.lang.Runnable)
    {
        jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1 r0;
        jdk.internal.logger.BootstrapLogger$BootstrapExecutors r1;
        java.util.concurrent.ExecutorService r2;
        java.lang.Runnable r3;

        r0 := @this: jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1;

        r1 := @parameter0: jdk.internal.logger.BootstrapLogger$BootstrapExecutors;

        r2 := @parameter1: java.util.concurrent.ExecutorService;

        r3 := @parameter2: java.lang.Runnable;

        r0.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1: jdk.internal.logger.BootstrapLogger$BootstrapExecutors this$0> = r1;

        r0.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1: java.util.concurrent.ExecutorService val$owner> = r2;

        r0.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1: java.lang.Runnable val$r> = r3;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Thread run()
    {
        jdk.internal.logger.BootstrapLogger$BootstrapExecutors$BootstrapMessageLoggerTask $r0;
        jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1 r1;
        java.lang.Runnable $r2;
        java.util.concurrent.ExecutorService $r3;
        java.lang.Thread r4;
        java.lang.StringBuilder $r5, $r6, $r8;
        java.lang.String $r7, $r9;

        r1 := @this: jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1;

        $r0 = new jdk.internal.logger.BootstrapLogger$BootstrapExecutors$BootstrapMessageLoggerTask;

        $r3 = r1.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1: java.util.concurrent.ExecutorService val$owner>;

        $r2 = r1.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1: java.lang.Runnable val$r>;

        specialinvoke $r0.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$BootstrapMessageLoggerTask: void <init>(java.util.concurrent.ExecutorService,java.lang.Runnable)>($r3, $r2);

        r4 = staticinvoke <jdk.internal.misc.InnocuousThread: java.lang.Thread newThread(java.lang.Runnable)>($r0);

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BootstrapMessageLoggerTask-");

        $r7 = virtualinvoke r4.<java.lang.Thread: java.lang.String getName()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r4.<java.lang.Thread: void setName(java.lang.String)>($r9);

        return r4;
    }

    public volatile java.lang.Object run()
    {
        jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1 r0;
        java.lang.Thread $r1;

        r0 := @this: jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1;

        $r1 = virtualinvoke r0.<jdk.internal.logger.BootstrapLogger$BootstrapExecutors$1: java.lang.Thread run()>();

        return $r1;
    }
}
