abstract class jdk.internal.module.ModuleReferences$SafeCloseModuleReader extends java.lang.Object implements java.lang.module.ModuleReader
{
    private final java.util.concurrent.locks.ReadWriteLock lock;
    private final java.util.concurrent.locks.Lock readLock;
    private final java.util.concurrent.locks.Lock writeLock;
    private boolean closed;

    void <init>()
    {
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader r0;
        java.util.concurrent.locks.ReentrantReadWriteLock $r1;
        java.util.concurrent.locks.ReadWriteLock $r2, $r4;
        java.util.concurrent.locks.Lock $r3, $r5;

        r0 := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.concurrent.locks.ReentrantReadWriteLock;

        specialinvoke $r1.<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>();

        r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.ReadWriteLock lock> = $r1;

        $r2 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.ReadWriteLock lock>;

        $r3 = interfaceinvoke $r2.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock readLock()>();

        r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock> = $r3;

        $r4 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.ReadWriteLock lock>;

        $r5 = interfaceinvoke $r4.<java.util.concurrent.locks.ReadWriteLock: java.util.concurrent.locks.Lock writeLock()>();

        r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock> = $r5;

        return;
    }

    abstract java.util.Optional implFind(java.lang.String) throws java.io.IOException;

    abstract java.util.Optional implOpen(java.lang.String) throws java.io.IOException;

    abstract java.util.stream.Stream implList() throws java.io.IOException;

    abstract void implClose() throws java.io.IOException;

    public final java.util.Optional find(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader r0;
        java.util.concurrent.locks.Lock $r1, $r5, $r8;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.String r3;
        java.util.Optional r4;
        java.lang.Throwable $r6;

        r0 := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $z0 != 0 goto label3;

        r4 = virtualinvoke r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.Optional implFind(java.lang.String)>(r3);

     label2:
        $r5 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return r4;

     label3:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $r2;

     label4:
        $r6 := @caughtexception;

     label5:
        $r8 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final java.util.Optional open(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader r0;
        java.util.concurrent.locks.Lock $r1, $r5, $r8;
        boolean $z0;
        java.io.IOException $r2;
        java.lang.String r3;
        java.util.Optional r4;
        java.lang.Throwable $r6;

        r0 := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        r3 := @parameter0: java.lang.String;

        $r1 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $z0 != 0 goto label3;

        r4 = virtualinvoke r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.Optional implOpen(java.lang.String)>(r3);

     label2:
        $r5 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        return r4;

     label3:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $r2;

     label4:
        $r6 := @caughtexception;

     label5:
        $r8 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r8.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r6;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final java.util.stream.Stream list() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader r0;
        java.util.concurrent.locks.Lock $r1, $r4, $r7;
        boolean $z0;
        java.io.IOException $r2;
        java.util.stream.Stream r3;
        java.lang.Throwable $r5;

        r0 := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        $r1 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $z0 != 0 goto label3;

        r3 = virtualinvoke r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.stream.Stream implList()>();

     label2:
        $r4 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r4.<java.util.concurrent.locks.Lock: void unlock()>();

        return r3;

     label3:
        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $r2;

     label4:
        $r5 := @caughtexception;

     label5:
        $r7 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock readLock>;

        interfaceinvoke $r7.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r5;

        catch java.lang.Throwable from label1 to label2 with label4;
        catch java.lang.Throwable from label3 to label5 with label4;
    }

    public final void close() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$SafeCloseModuleReader r0;
        java.util.concurrent.locks.Lock $r1, $r2, $r5;
        boolean $z0;
        java.lang.Throwable $r3;

        r0 := @this: jdk.internal.module.ModuleReferences$SafeCloseModuleReader;

        $r1 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $r1.<java.util.concurrent.locks.Lock: void lock()>();

     label1:
        $z0 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed>;

        if $z0 != 0 goto label2;

        r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: boolean closed> = 1;

        virtualinvoke r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: void implClose()>();

     label2:
        $r2 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $r2.<java.util.concurrent.locks.Lock: void unlock()>();

        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: java.util.concurrent.locks.Lock writeLock>;

        interfaceinvoke $r5.<java.util.concurrent.locks.Lock: void unlock()>();

        throw $r3;

     label4:
        return;

        catch java.lang.Throwable from label1 to label2 with label3;
    }
}
