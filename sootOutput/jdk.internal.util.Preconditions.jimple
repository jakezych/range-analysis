public class jdk.internal.util.Preconditions extends java.lang.Object
{

    public void <init>()
    {
        jdk.internal.util.Preconditions r0;

        r0 := @this: jdk.internal.util.Preconditions;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static transient java.lang.RuntimeException outOfBounds(java.util.function.BiFunction, java.lang.String, java.lang.Integer[])
    {
        java.lang.Integer[] r0;
        java.util.List r1;
        java.util.function.BiFunction r2;
        java.lang.String r3, $r6;
        java.lang.Object $r4;
        java.lang.RuntimeException $r7, $r8;
        java.lang.IndexOutOfBoundsException $r9;

        r2 := @parameter0: java.util.function.BiFunction;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.Integer[];

        r1 = staticinvoke <java.util.List: java.util.List of(java.lang.Object[])>(r0);

        if r2 != null goto label1;

        $r7 = null;

        goto label2;

     label1:
        $r4 = interfaceinvoke r2.<java.util.function.BiFunction: java.lang.Object apply(java.lang.Object,java.lang.Object)>(r3, r1);

        $r7 = (java.lang.RuntimeException) $r4;

     label2:
        if $r7 != null goto label3;

        $r9 = new java.lang.IndexOutOfBoundsException;

        $r8 = $r9;

        $r6 = staticinvoke <jdk.internal.util.Preconditions: java.lang.String outOfBoundsMessage(java.lang.String,java.util.List)>(r3, r1);

        specialinvoke $r9.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r6);

        goto label4;

     label3:
        $r8 = $r7;

     label4:
        return $r8;
    }

    private static java.lang.RuntimeException outOfBoundsCheckIndex(java.util.function.BiFunction, int, int)
    {
        java.util.function.BiFunction r0;
        java.lang.Integer[] $r1;
        int i0, i1;
        java.lang.Integer $r2, $r3;
        java.lang.RuntimeException $r4;

        r0 := @parameter0: java.util.function.BiFunction;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r1 = newarray (java.lang.Integer)[2];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBounds(java.util.function.BiFunction,java.lang.String,java.lang.Integer[])>(r0, "checkIndex", $r1);

        return $r4;
    }

    private static java.lang.RuntimeException outOfBoundsCheckFromToIndex(java.util.function.BiFunction, int, int, int)
    {
        java.util.function.BiFunction r0;
        java.lang.Integer[] $r1;
        int i0, i1, i2;
        java.lang.Integer $r2, $r3, $r4;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: java.util.function.BiFunction;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = newarray (java.lang.Integer)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[2] = $r4;

        $r5 = staticinvoke <jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBounds(java.util.function.BiFunction,java.lang.String,java.lang.Integer[])>(r0, "checkFromToIndex", $r1);

        return $r5;
    }

    private static java.lang.RuntimeException outOfBoundsCheckFromIndexSize(java.util.function.BiFunction, int, int, int)
    {
        java.util.function.BiFunction r0;
        java.lang.Integer[] $r1;
        int i0, i1, i2;
        java.lang.Integer $r2, $r3, $r4;
        java.lang.RuntimeException $r5;

        r0 := @parameter0: java.util.function.BiFunction;

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        $r1 = newarray (java.lang.Integer)[3];

        $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        $r1[0] = $r2;

        $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        $r1[1] = $r3;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r1[2] = $r4;

        $r5 = staticinvoke <jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBounds(java.util.function.BiFunction,java.lang.String,java.lang.Integer[])>(r0, "checkFromIndexSize", $r1);

        return $r5;
    }

    public static java.util.function.BiFunction outOfBoundsExceptionFormatter(java.util.function.Function)
    {
        jdk.internal.util.Preconditions$1 $r0;
        java.util.function.Function r1;

        r1 := @parameter0: java.util.function.Function;

        $r0 = new jdk.internal.util.Preconditions$1;

        specialinvoke $r0.<jdk.internal.util.Preconditions$1: void <init>(java.util.function.Function)>(r1);

        return $r0;
    }

    private static java.lang.String outOfBoundsMessage(java.lang.String, java.util.List)
    {
        java.lang.String r0, $r6, $r11, $r15, $r17, $r19, $r21, $r23, $r25;
        java.util.List r1;
        int $i0, $i1, $i4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.Object[] $r2, $r7, $r12, $r16, $r18, $r20, $r22;
        java.lang.Object $r3, $r4, $r5, $r8, $r9, $r10, $r13, $r14;
        byte b2, b3, b5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        if r0 != null goto label01;

        if r1 != null goto label01;

        $r22 = newarray (java.lang.Object)[0];

        $r23 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Range check failed", $r22);

        return $r23;

     label01:
        if r0 != null goto label02;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r1;

        $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Range check failed: %s", $r20);

        return $r21;

     label02:
        if r1 != null goto label03;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r0;

        $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Range check failed: %s", $r18);

        return $r19;

     label03:
        b2 = 0;

        b3 = -1;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -538822486: goto label04;
            case 1844394469: goto label05;
            case 1848935233: goto label06;
            default: goto label07;
        };

     label04:
        $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("checkIndex");

        if $z5 == 0 goto label07;

        b3 = 0;

        goto label07;

     label05:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("checkFromToIndex");

        if $z4 == 0 goto label07;

        b3 = 1;

        goto label07;

     label06:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("checkFromIndexSize");

        if $z0 == 0 goto label07;

        b3 = 2;

     label07:
        tableswitch(b3)
        {
            case 0: goto label08;
            case 1: goto label09;
            case 2: goto label09;
            default: goto label10;
        };

     label08:
        b2 = 2;

        goto label10;

     label09:
        b2 = 3;

        goto label10;

     label10:
        $i4 = interfaceinvoke r1.<java.util.List: int size()>();

        if $i4 == b2 goto label11;

        $r25 = "";

        goto label12;

     label11:
        $r25 = r0;

     label12:
        b5 = -1;

        $i1 = virtualinvoke $r25.<java.lang.String: int hashCode()>();

        lookupswitch($i1)
        {
            case -538822486: goto label13;
            case 1844394469: goto label14;
            case 1848935233: goto label15;
            default: goto label16;
        };

     label13:
        $z3 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("checkIndex");

        if $z3 == 0 goto label16;

        b5 = 0;

        goto label16;

     label14:
        $z2 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("checkFromToIndex");

        if $z2 == 0 goto label16;

        b5 = 1;

        goto label16;

     label15:
        $z1 = virtualinvoke $r25.<java.lang.String: boolean equals(java.lang.Object)>("checkFromIndexSize");

        if $z1 == 0 goto label16;

        b5 = 2;

     label16:
        tableswitch(b5)
        {
            case 0: goto label17;
            case 1: goto label18;
            case 2: goto label19;
            default: goto label20;
        };

     label17:
        $r12 = newarray (java.lang.Object)[2];

        $r13 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r12[0] = $r13;

        $r14 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        $r12[1] = $r14;

        $r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Index %d out of bounds for length %d", $r12);

        return $r15;

     label18:
        $r7 = newarray (java.lang.Object)[3];

        $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r7[0] = $r8;

        $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        $r7[1] = $r9;

        $r10 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r7[2] = $r10;

        $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Range [%d, %d) out of bounds for length %d", $r7);

        return $r11;

     label19:
        $r2 = newarray (java.lang.Object)[3];

        $r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0);

        $r2[0] = $r3;

        $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(1);

        $r2[1] = $r4;

        $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(2);

        $r2[2] = $r5;

        $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Range [%d, %<d + %d) out of bounds for length %d", $r2);

        return $r6;

     label20:
        $r16 = newarray (java.lang.Object)[2];

        $r16[0] = r0;

        $r16[1] = r1;

        $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Range check failed: %s %s", $r16);

        return $r17;
    }

    public static int checkIndex(int, int, java.util.function.BiFunction)
    {
        int i0, i1;
        java.util.function.BiFunction r0;
        java.lang.RuntimeException $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 := @parameter2: java.util.function.BiFunction;

        if i0 < 0 goto label1;

        if i0 < i1 goto label2;

     label1:
        $r1 = staticinvoke <jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBoundsCheckIndex(java.util.function.BiFunction,int,int)>(r0, i0, i1);

        throw $r1;

     label2:
        return i0;
    }

    public static int checkFromToIndex(int, int, int, java.util.function.BiFunction)
    {
        int i0, i1, i2;
        java.util.function.BiFunction r0;
        java.lang.RuntimeException $r1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        i2 := @parameter2: int;

        r0 := @parameter3: java.util.function.BiFunction;

        if i0 < 0 goto label1;

        if i0 > i1 goto label1;

        if i1 <= i2 goto label2;

     label1:
        $r1 = staticinvoke <jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBoundsCheckFromToIndex(java.util.function.BiFunction,int,int,int)>(r0, i0, i1, i2);

        throw $r1;

     label2:
        return i0;
    }

    public static int checkFromIndexSize(int, int, int, java.util.function.BiFunction)
    {
        int i0, i1, i2, $i3, $i4, $i5;
        java.util.function.BiFunction r0;
        java.lang.RuntimeException $r1;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: java.util.function.BiFunction;

        $i3 = i0 | i1;

        $i4 = $i3 | i2;

        if $i4 < 0 goto label1;

        $i5 = i0 - i1;

        if i2 <= $i5 goto label2;

     label1:
        $r1 = staticinvoke <jdk.internal.util.Preconditions: java.lang.RuntimeException outOfBoundsCheckFromIndexSize(java.util.function.BiFunction,int,int,int)>(r0, i1, i2, i0);

        throw $r1;

     label2:
        return i1;
    }
}
