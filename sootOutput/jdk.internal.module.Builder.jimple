final class jdk.internal.module.Builder extends java.lang.Object
{
    private static final jdk.internal.access.JavaLangModuleAccess JLMA;
    static java.lang.module.ModuleDescriptor$Version cachedVersion;
    final java.lang.String name;
    boolean open;
    boolean synthetic;
    boolean mandated;
    java.util.Set requires;
    java.util.Set exports;
    java.util.Set opens;
    java.util.Set packages;
    java.util.Set uses;
    java.util.Set provides;
    java.lang.module.ModuleDescriptor$Version version;
    java.lang.String mainClass;
    static final boolean $assertionsDisabled;

    public static java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set, java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2, $r4;
        java.util.Set r1;
        java.lang.module.ModuleDescriptor$Version r3, r5;
        boolean $z0;
        jdk.internal.access.JavaLangModuleAccess $r6;
        java.lang.module.ModuleDescriptor$Requires $r7;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.lang.String;

        r0 := @parameter2: java.lang.String;

        r5 = null;

        if r0 == null goto label2;

        r3 = <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version cachedVersion>;

        if r3 == null goto label1;

        $r4 = virtualinvoke r3.<java.lang.module.ModuleDescriptor$Version: java.lang.String toString()>();

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        r5 = r3;

        goto label2;

     label1:
        r5 = staticinvoke <java.lang.module.ModuleDescriptor$Version: java.lang.module.ModuleDescriptor$Version parse(java.lang.String)>(r0);

     label2:
        $r6 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r7 = interfaceinvoke $r6.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set,java.lang.String,java.lang.module.ModuleDescriptor$Version)>(r1, r2, r5);

        return $r7;
    }

    public static java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;
        java.lang.module.ModuleDescriptor$Requires $r2;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        $r2 = staticinvoke <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Requires newRequires(java.util.Set,java.lang.String,java.lang.String)>(r0, r1, null);

        return $r2;
    }

    public static java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set, java.lang.String, java.util.Set)
    {
        java.util.Set r0, r2;
        java.lang.String r1;
        jdk.internal.access.JavaLangModuleAccess $r3;
        java.lang.module.ModuleDescriptor$Exports $r4;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Set;

        $r3 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r4 = interfaceinvoke $r3.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set,java.lang.String,java.util.Set)>(r0, r1, r2);

        return $r4;
    }

    public static java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;
        jdk.internal.access.JavaLangModuleAccess $r2;
        java.lang.module.ModuleDescriptor$Opens $r3;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        $r2 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r3 = interfaceinvoke $r2.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set,java.lang.String)>(r0, r1);

        return $r3;
    }

    public static java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set, java.lang.String, java.util.Set)
    {
        java.util.Set r0, r2;
        java.lang.String r1;
        jdk.internal.access.JavaLangModuleAccess $r3;
        java.lang.module.ModuleDescriptor$Opens $r4;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.util.Set;

        $r3 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r4 = interfaceinvoke $r3.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Opens newOpens(java.util.Set,java.lang.String,java.util.Set)>(r0, r1, r2);

        return $r4;
    }

    public static java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;
        jdk.internal.access.JavaLangModuleAccess $r2;
        java.lang.module.ModuleDescriptor$Exports $r3;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        $r2 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r3 = interfaceinvoke $r2.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Exports newExports(java.util.Set,java.lang.String)>(r0, r1);

        return $r3;
    }

    public static java.lang.module.ModuleDescriptor$Provides newProvides(java.lang.String, java.util.List)
    {
        java.lang.String r0;
        java.util.List r1;
        jdk.internal.access.JavaLangModuleAccess $r2;
        java.lang.module.ModuleDescriptor$Provides $r3;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.util.List;

        $r2 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r3 = interfaceinvoke $r2.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor$Provides newProvides(java.lang.String,java.util.List)>(r0, r1);

        return $r3;
    }

    void <init>(java.lang.String)
    {
        jdk.internal.module.Builder r0;
        java.lang.String r1;
        java.util.Set $r2, $r3, $r4, $r5, $r6;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.lang.String;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.module.Builder: java.lang.String name> = r1;

        $r2 = staticinvoke <java.util.Set: java.util.Set of()>();

        r0.<jdk.internal.module.Builder: java.util.Set requires> = $r2;

        $r3 = staticinvoke <java.util.Set: java.util.Set of()>();

        r0.<jdk.internal.module.Builder: java.util.Set exports> = $r3;

        $r4 = staticinvoke <java.util.Set: java.util.Set of()>();

        r0.<jdk.internal.module.Builder: java.util.Set opens> = $r4;

        $r5 = staticinvoke <java.util.Set: java.util.Set of()>();

        r0.<jdk.internal.module.Builder: java.util.Set provides> = $r5;

        $r6 = staticinvoke <java.util.Set: java.util.Set of()>();

        r0.<jdk.internal.module.Builder: java.util.Set uses> = $r6;

        return;
    }

    jdk.internal.module.Builder open(boolean)
    {
        jdk.internal.module.Builder r0;
        boolean z0;

        r0 := @this: jdk.internal.module.Builder;

        z0 := @parameter0: boolean;

        r0.<jdk.internal.module.Builder: boolean open> = z0;

        return r0;
    }

    jdk.internal.module.Builder synthetic(boolean)
    {
        jdk.internal.module.Builder r0;
        boolean z0;

        r0 := @this: jdk.internal.module.Builder;

        z0 := @parameter0: boolean;

        r0.<jdk.internal.module.Builder: boolean synthetic> = z0;

        return r0;
    }

    jdk.internal.module.Builder mandated(boolean)
    {
        jdk.internal.module.Builder r0;
        boolean z0;

        r0 := @this: jdk.internal.module.Builder;

        z0 := @parameter0: boolean;

        r0.<jdk.internal.module.Builder: boolean mandated> = z0;

        return r0;
    }

    public jdk.internal.module.Builder exports(java.lang.module.ModuleDescriptor$Exports[])
    {
        jdk.internal.module.Builder r0;
        java.lang.module.ModuleDescriptor$Exports[] r1;
        java.util.Set $r2;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.lang.module.ModuleDescriptor$Exports[];

        $r2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(r1);

        r0.<jdk.internal.module.Builder: java.util.Set exports> = $r2;

        return r0;
    }

    public jdk.internal.module.Builder opens(java.lang.module.ModuleDescriptor$Opens[])
    {
        jdk.internal.module.Builder r0;
        java.lang.module.ModuleDescriptor$Opens[] r1;
        java.util.Set $r2;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.lang.module.ModuleDescriptor$Opens[];

        $r2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(r1);

        r0.<jdk.internal.module.Builder: java.util.Set opens> = $r2;

        return r0;
    }

    public jdk.internal.module.Builder requires(java.lang.module.ModuleDescriptor$Requires[])
    {
        jdk.internal.module.Builder r0;
        java.lang.module.ModuleDescriptor$Requires[] r1;
        java.util.Set $r2;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.lang.module.ModuleDescriptor$Requires[];

        $r2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(r1);

        r0.<jdk.internal.module.Builder: java.util.Set requires> = $r2;

        return r0;
    }

    public jdk.internal.module.Builder packages(java.util.Set)
    {
        jdk.internal.module.Builder r0;
        java.util.Set r1;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.util.Set;

        r0.<jdk.internal.module.Builder: java.util.Set packages> = r1;

        return r0;
    }

    public jdk.internal.module.Builder uses(java.util.Set)
    {
        jdk.internal.module.Builder r0;
        java.util.Set r1;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.util.Set;

        r0.<jdk.internal.module.Builder: java.util.Set uses> = r1;

        return r0;
    }

    public jdk.internal.module.Builder provides(java.lang.module.ModuleDescriptor$Provides[])
    {
        jdk.internal.module.Builder r0;
        java.lang.module.ModuleDescriptor$Provides[] r1;
        java.util.Set $r2;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.lang.module.ModuleDescriptor$Provides[];

        $r2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(r1);

        r0.<jdk.internal.module.Builder: java.util.Set provides> = $r2;

        return r0;
    }

    public jdk.internal.module.Builder version(java.lang.String)
    {
        java.lang.module.ModuleDescriptor$Version r0, $r3;
        jdk.internal.module.Builder r1;
        java.lang.String r2, $r4;
        boolean $z0;

        r1 := @this: jdk.internal.module.Builder;

        r2 := @parameter0: java.lang.String;

        r0 = <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version cachedVersion>;

        if r0 == null goto label1;

        $r4 = virtualinvoke r0.<java.lang.module.ModuleDescriptor$Version: java.lang.String toString()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        r1.<jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version version> = r0;

        goto label2;

     label1:
        $r3 = staticinvoke <java.lang.module.ModuleDescriptor$Version: java.lang.module.ModuleDescriptor$Version parse(java.lang.String)>(r2);

        r1.<jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version version> = $r3;

        <jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version cachedVersion> = $r3;

     label2:
        return r1;
    }

    public jdk.internal.module.Builder mainClass(java.lang.String)
    {
        jdk.internal.module.Builder r0;
        java.lang.String r1;

        r0 := @this: jdk.internal.module.Builder;

        r1 := @parameter0: java.lang.String;

        r0.<jdk.internal.module.Builder: java.lang.String mainClass> = r1;

        return r0;
    }

    private java.util.Set modifiers()
    {
        jdk.internal.module.Builder r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.lang.module.ModuleDescriptor$Modifier[] r1;
        java.util.Set $r2, $r6;
        java.lang.module.ModuleDescriptor$Modifier $r3, $r4, $r5;
        int i0, i1;

        r0 := @this: jdk.internal.module.Builder;

        i0 = 0;

        $z0 = r0.<jdk.internal.module.Builder: boolean open>;

        if $z0 == 0 goto label1;

        i0 = 0 + 1;

     label1:
        $z1 = r0.<jdk.internal.module.Builder: boolean synthetic>;

        if $z1 == 0 goto label2;

        i0 = i0 + 1;

     label2:
        $z2 = r0.<jdk.internal.module.Builder: boolean mandated>;

        if $z2 == 0 goto label3;

        i0 = i0 + 1;

     label3:
        if i0 != 0 goto label4;

        $r6 = staticinvoke <java.util.Set: java.util.Set of()>();

        return $r6;

     label4:
        r1 = newarray (java.lang.module.ModuleDescriptor$Modifier)[i0];

        $z3 = r0.<jdk.internal.module.Builder: boolean open>;

        if $z3 == 0 goto label5;

        i0 = i0 + -1;

        $r5 = <java.lang.module.ModuleDescriptor$Modifier: java.lang.module.ModuleDescriptor$Modifier OPEN>;

        r1[i0] = $r5;

     label5:
        $z4 = r0.<jdk.internal.module.Builder: boolean synthetic>;

        if $z4 == 0 goto label6;

        i0 = i0 + -1;

        $r4 = <java.lang.module.ModuleDescriptor$Modifier: java.lang.module.ModuleDescriptor$Modifier SYNTHETIC>;

        r1[i0] = $r4;

     label6:
        $z5 = r0.<jdk.internal.module.Builder: boolean mandated>;

        if $z5 == 0 goto label7;

        i1 = i0 + -1;

        $r3 = <java.lang.module.ModuleDescriptor$Modifier: java.lang.module.ModuleDescriptor$Modifier MANDATED>;

        r1[i1] = $r3;

     label7:
        $r2 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object[])>(r1);

        return $r2;
    }

    public java.lang.module.ModuleDescriptor build(int)
    {
        boolean $z0;
        jdk.internal.module.Builder r0;
        jdk.internal.access.JavaLangModuleAccess $r1;
        java.lang.String $r2, $r5, $r13;
        java.lang.module.ModuleDescriptor$Version $r3;
        java.util.Set $r4, $r6, $r7, $r8, $r9, $r10, $r11;
        int i0;
        java.lang.module.ModuleDescriptor $r12;
        java.lang.AssertionError $r14;

        r0 := @this: jdk.internal.module.Builder;

        i0 := @parameter0: int;

        $z0 = <jdk.internal.module.Builder: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        $r13 = r0.<jdk.internal.module.Builder: java.lang.String name>;

        if $r13 != null goto label1;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>()>();

        throw $r14;

     label1:
        $r1 = <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r2 = r0.<jdk.internal.module.Builder: java.lang.String name>;

        $r3 = r0.<jdk.internal.module.Builder: java.lang.module.ModuleDescriptor$Version version>;

        $r4 = virtualinvoke r0.<jdk.internal.module.Builder: java.util.Set modifiers()>();

        $r11 = r0.<jdk.internal.module.Builder: java.util.Set requires>;

        $r10 = r0.<jdk.internal.module.Builder: java.util.Set exports>;

        $r9 = r0.<jdk.internal.module.Builder: java.util.Set opens>;

        $r8 = r0.<jdk.internal.module.Builder: java.util.Set uses>;

        $r7 = r0.<jdk.internal.module.Builder: java.util.Set provides>;

        $r6 = r0.<jdk.internal.module.Builder: java.util.Set packages>;

        $r5 = r0.<jdk.internal.module.Builder: java.lang.String mainClass>;

        $r12 = interfaceinvoke $r1.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.ModuleDescriptor newModuleDescriptor(java.lang.String,java.lang.module.ModuleDescriptor$Version,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.util.Set,java.lang.String,int)>($r2, $r3, $r4, $r11, $r10, $r9, $r8, $r7, $r6, $r5, i0);

        return $r12;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        jdk.internal.access.JavaLangModuleAccess $r1;

        $r0 = class "Ljdk/internal/module/Builder;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <jdk.internal.module.Builder: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess getJavaLangModuleAccess()>();

        <jdk.internal.module.Builder: jdk.internal.access.JavaLangModuleAccess JLMA> = $r1;

        return;
    }
}
