class jdk.internal.reflect.NativeMethodAccessorImpl extends jdk.internal.reflect.MethodAccessorImpl
{
    private final java.lang.reflect.Method method;
    private jdk.internal.reflect.DelegatingMethodAccessorImpl parent;
    private int numInvocations;

    void <init>(java.lang.reflect.Method)
    {
        jdk.internal.reflect.NativeMethodAccessorImpl r0;
        java.lang.reflect.Method r1;

        r0 := @this: jdk.internal.reflect.NativeMethodAccessorImpl;

        r1 := @parameter0: java.lang.reflect.Method;

        specialinvoke r0.<jdk.internal.reflect.MethodAccessorImpl: void <init>()>();

        r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method> = r1;

        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.Object[]) throws java.lang.IllegalArgumentException, java.lang.reflect.InvocationTargetException
    {
        jdk.internal.reflect.NativeMethodAccessorImpl r0;
        int $i0, $i1, $i2, $i3;
        java.lang.Object r1, $r21;
        java.lang.Object[] r2;
        java.lang.reflect.Method $r3, $r6, $r8, $r10, $r12, $r14, $r16, $r20;
        java.lang.Class $r4, $r7, $r13;
        boolean $z0;
        jdk.internal.reflect.MethodAccessorGenerator $r5;
        java.lang.String $r9;
        java.lang.Class[] $r11, $r15;
        jdk.internal.reflect.MethodAccessor $r17;
        jdk.internal.reflect.MethodAccessorImpl r18;
        jdk.internal.reflect.DelegatingMethodAccessorImpl $r19;

        r0 := @this: jdk.internal.reflect.NativeMethodAccessorImpl;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object[];

        $i0 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: int numInvocations>;

        $i1 = $i0 + 1;

        r0.<jdk.internal.reflect.NativeMethodAccessorImpl: int numInvocations> = $i1;

        $i2 = staticinvoke <jdk.internal.reflect.ReflectionFactory: int inflationThreshold()>();

        if $i1 <= $i2 goto label1;

        $r3 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r4 = virtualinvoke $r3.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $z0 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isVMAnonymousClass(java.lang.Class)>($r4);

        if $z0 != 0 goto label1;

        $r5 = new jdk.internal.reflect.MethodAccessorGenerator;

        specialinvoke $r5.<jdk.internal.reflect.MethodAccessorGenerator: void <init>()>();

        $r6 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r7 = virtualinvoke $r6.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        $r8 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r9 = virtualinvoke $r8.<java.lang.reflect.Method: java.lang.String getName()>();

        $r10 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r11 = virtualinvoke $r10.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $r12 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r13 = virtualinvoke $r12.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r14 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r15 = virtualinvoke $r14.<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>();

        $r16 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $i3 = virtualinvoke $r16.<java.lang.reflect.Method: int getModifiers()>();

        $r17 = virtualinvoke $r5.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MethodAccessor generateMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int)>($r7, $r9, $r11, $r13, $r15, $i3);

        r18 = (jdk.internal.reflect.MethodAccessorImpl) $r17;

        $r19 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: jdk.internal.reflect.DelegatingMethodAccessorImpl parent>;

        virtualinvoke $r19.<jdk.internal.reflect.DelegatingMethodAccessorImpl: void setDelegate(jdk.internal.reflect.MethodAccessorImpl)>(r18);

     label1:
        $r20 = r0.<jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.reflect.Method method>;

        $r21 = staticinvoke <jdk.internal.reflect.NativeMethodAccessorImpl: java.lang.Object invoke0(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r20, r1, r2);

        return $r21;
    }

    void setParent(jdk.internal.reflect.DelegatingMethodAccessorImpl)
    {
        jdk.internal.reflect.NativeMethodAccessorImpl r0;
        jdk.internal.reflect.DelegatingMethodAccessorImpl r1;

        r0 := @this: jdk.internal.reflect.NativeMethodAccessorImpl;

        r1 := @parameter0: jdk.internal.reflect.DelegatingMethodAccessorImpl;

        r0.<jdk.internal.reflect.NativeMethodAccessorImpl: jdk.internal.reflect.DelegatingMethodAccessorImpl parent> = r1;

        return;
    }

    private static native java.lang.Object invoke0(java.lang.reflect.Method, java.lang.Object, java.lang.Object[]);
}
