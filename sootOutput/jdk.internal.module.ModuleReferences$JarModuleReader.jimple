class jdk.internal.module.ModuleReferences$JarModuleReader extends jdk.internal.module.ModuleReferences$SafeCloseModuleReader
{
    private final java.util.jar.JarFile jf;
    private final java.net.URI uri;

    static java.util.jar.JarFile newJarFile(java.nio.file.Path)
    {
        java.util.jar.JarFile $r0;
        java.io.File $r1;
        java.nio.file.Path r2;
        java.lang.String $r3;
        java.lang.Runtime$Version $r4;
        java.io.IOException $r5;
        java.io.UncheckedIOException $r7;

        r2 := @parameter0: java.nio.file.Path;

     label1:
        $r0 = new java.util.jar.JarFile;

        $r1 = new java.io.File;

        $r3 = interfaceinvoke r2.<java.nio.file.Path: java.lang.String toString()>();

        specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>($r3);

        $r4 = staticinvoke <java.util.jar.JarFile: java.lang.Runtime$Version runtimeVersion()>();

        specialinvoke $r0.<java.util.jar.JarFile: void <init>(java.io.File,boolean,int,java.lang.Runtime$Version)>($r1, 1, 1, $r4);

     label2:
        return $r0;

     label3:
        $r5 := @caughtexception;

        $r7 = new java.io.UncheckedIOException;

        specialinvoke $r7.<java.io.UncheckedIOException: void <init>(java.io.IOException)>($r5);

        throw $r7;

        catch java.io.IOException from label1 to label2 with label3;
    }

    void <init>(java.nio.file.Path, java.net.URI)
    {
        jdk.internal.module.ModuleReferences$JarModuleReader r0;
        java.nio.file.Path r1;
        java.util.jar.JarFile $r2;
        java.net.URI r3;

        r0 := @this: jdk.internal.module.ModuleReferences$JarModuleReader;

        r1 := @parameter0: java.nio.file.Path;

        r3 := @parameter1: java.net.URI;

        specialinvoke r0.<jdk.internal.module.ModuleReferences$SafeCloseModuleReader: void <init>()>();

        $r2 = staticinvoke <jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile newJarFile(java.nio.file.Path)>(r1);

        r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile jf> = $r2;

        r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.net.URI uri> = r3;

        return;
    }

    private java.util.jar.JarEntry getEntry(java.lang.String)
    {
        jdk.internal.module.ModuleReferences$JarModuleReader r0;
        java.lang.String r1, $r4;
        java.util.jar.JarFile $r2;
        java.lang.Object $r3;
        java.util.jar.JarEntry $r5;

        r0 := @this: jdk.internal.module.ModuleReferences$JarModuleReader;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile jf>;

        $r3 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r4 = (java.lang.String) $r3;

        $r5 = virtualinvoke $r2.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>($r4);

        return $r5;
    }

    java.util.Optional implFind(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$JarModuleReader r0;
        java.util.jar.JarEntry r1;
        java.util.Optional $r2, $r17;
        java.util.jar.JarFile $r3;
        boolean $z0, $z1, $z2;
        java.lang.String r4, r5, r9;
        java.lang.StringBuilder $r6, $r7, $r8, $r10, $r11, $r13, $r14, $r15;
        java.net.URI $r12, $r16;

        r0 := @this: jdk.internal.module.ModuleReferences$JarModuleReader;

        r9 := @parameter0: java.lang.String;

        r1 = virtualinvoke r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarEntry getEntry(java.lang.String)>(r9);

        if r1 == null goto label3;

        $r3 = r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile jf>;

        $z0 = virtualinvoke $r3.<java.util.jar.JarFile: boolean isMultiRelease()>();

        if $z0 == 0 goto label1;

        r9 = virtualinvoke r1.<java.util.jar.JarEntry: java.lang.String getRealName()>();

     label1:
        $z1 = virtualinvoke r1.<java.util.jar.JarEntry: boolean isDirectory()>();

        if $z1 == 0 goto label2;

        $z2 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>("/");

        if $z2 != 0 goto label2;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/");

        r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r4 = staticinvoke <sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>(r9, 0);

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jar:");

        $r12 = r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.net.URI uri>;

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r5 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(r5);

        $r17 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r16);

        return $r17;

     label3:
        $r2 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r2;
    }

    java.util.Optional implOpen(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$JarModuleReader r0;
        java.lang.String r1;
        java.util.jar.JarEntry r2;
        java.util.Optional $r3, $r6;
        java.util.jar.JarFile $r4;
        java.io.InputStream $r5;

        r0 := @this: jdk.internal.module.ModuleReferences$JarModuleReader;

        r1 := @parameter0: java.lang.String;

        r2 = virtualinvoke r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarEntry getEntry(java.lang.String)>(r1);

        if r2 == null goto label1;

        $r4 = r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile jf>;

        $r5 = virtualinvoke $r4.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r2);

        $r6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r5);

        return $r6;

     label1:
        $r3 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r3;
    }

    java.util.stream.Stream implList() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$JarModuleReader r0;
        java.util.jar.JarFile $r1;
        java.util.stream.Stream $r2, $r4, $r8;
        java.util.function.Function $r3;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        java.util.List r7;

        r0 := @this: jdk.internal.module.ModuleReferences$JarModuleReader;

        $r1 = r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile jf>;

        $r2 = virtualinvoke $r1.<java.util.jar.JarFile: java.util.stream.Stream versionedStream()>();

        $r3 = staticinvoke <jdk.internal.module.ModuleReferences$JarModuleReader$getName__152: java.util.function.Function bootstrap$()>();

        $r4 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r3);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        r7 = (java.util.List) $r6;

        $r8 = interfaceinvoke r7.<java.util.List: java.util.stream.Stream stream()>();

        return $r8;
    }

    void implClose() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$JarModuleReader r0;
        java.util.jar.JarFile $r1;

        r0 := @this: jdk.internal.module.ModuleReferences$JarModuleReader;

        $r1 = r0.<jdk.internal.module.ModuleReferences$JarModuleReader: java.util.jar.JarFile jf>;

        virtualinvoke $r1.<java.util.jar.JarFile: void close()>();

        return;
    }
}
