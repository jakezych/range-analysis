public final class jdk.internal.jimage.ImageReader extends java.lang.Object implements java.lang.AutoCloseable
{
    private final jdk.internal.jimage.ImageReader$SharedImageReader reader;
    private volatile boolean closed;

    private void <init>(jdk.internal.jimage.ImageReader$SharedImageReader)
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader r1;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageReader$SharedImageReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader> = r1;

        return;
    }

    public static jdk.internal.jimage.ImageReader open(java.nio.file.Path, java.nio.ByteOrder) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.ByteOrder r2;
        jdk.internal.jimage.ImageReader $r4;

        r0 := @parameter0: java.nio.file.Path;

        r2 := @parameter1: java.nio.ByteOrder;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r4 = staticinvoke <jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageReader open(java.nio.file.Path,java.nio.ByteOrder)>(r0, r2);

        return $r4;
    }

    public static jdk.internal.jimage.ImageReader open(java.nio.file.Path) throws java.io.IOException
    {
        java.nio.file.Path r0;
        java.nio.ByteOrder $r1;
        jdk.internal.jimage.ImageReader $r2;

        r0 := @parameter0: java.nio.file.Path;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        $r2 = staticinvoke <jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader open(java.nio.file.Path,java.nio.ByteOrder)>(r0, $r1);

        return $r2;
    }

    public void close() throws java.io.IOException
    {
        jdk.internal.jimage.ImageReader r0;
        boolean $z0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        java.io.IOException $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        $z0 = r0.<jdk.internal.jimage.ImageReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r2 = new java.io.IOException;

        specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>("image file already closed");

        throw $r2;

     label1:
        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: void close(jdk.internal.jimage.ImageReader)>(r0);

        r0.<jdk.internal.jimage.ImageReader: boolean closed> = 1;

        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        jdk.internal.jimage.ImageReader r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: jdk.internal.jimage.ImageReader;

        $z0 = r0.<jdk.internal.jimage.ImageReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("image file closed");

        throw $r1;

     label1:
        return;
    }

    private void requireOpen()
    {
        jdk.internal.jimage.ImageReader r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: jdk.internal.jimage.ImageReader;

        $z0 = r0.<jdk.internal.jimage.ImageReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("image file closed");

        throw $r1;

     label1:
        return;
    }

    public jdk.internal.jimage.ImageReader$Directory getRootDirectory() throws java.io.IOException
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        jdk.internal.jimage.ImageReader$Directory $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void ensureOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageReader$Directory getRootDirectory()>();

        return $r2;
    }

    public jdk.internal.jimage.ImageReader$Node findNode(java.lang.String) throws java.io.IOException
    {
        jdk.internal.jimage.ImageReader r0;
        java.lang.String r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        jdk.internal.jimage.ImageReader$Node $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageReader$Node findNode(java.lang.String)>(r1);

        return $r3;
    }

    public byte[] getResource(jdk.internal.jimage.ImageReader$Node) throws java.io.IOException
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$Node r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        byte[] $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageReader$Node;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: byte[] getResource(jdk.internal.jimage.ImageReader$Node)>(r1);

        return $r3;
    }

    public byte[] getResource(jdk.internal.jimage.ImageReader$Resource) throws java.io.IOException
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$Resource r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        byte[] $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageReader$Resource;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: byte[] getResource(jdk.internal.jimage.ImageReader$Resource)>(r1);

        return $r3;
    }

    public jdk.internal.jimage.ImageHeader getHeader()
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        jdk.internal.jimage.ImageHeader $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageHeader getHeader()>();

        return $r2;
    }

    public static void releaseByteBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;

        r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <jdk.internal.jimage.BasicImageReader: void releaseByteBuffer(java.nio.ByteBuffer)>(r0);

        return;
    }

    public java.lang.String getName()
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        java.lang.String $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: java.lang.String getName()>();

        return $r2;
    }

    public java.nio.ByteOrder getByteOrder()
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        java.nio.ByteOrder $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: java.nio.ByteOrder getByteOrder()>();

        return $r2;
    }

    public java.nio.file.Path getImagePath()
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        java.nio.file.Path $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: java.nio.file.Path getImagePath()>();

        return $r2;
    }

    public jdk.internal.jimage.ImageStringsReader getStrings()
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        jdk.internal.jimage.ImageStringsReader $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageStringsReader getStrings()>();

        return $r2;
    }

    public jdk.internal.jimage.ImageLocation findLocation(java.lang.String, java.lang.String)
    {
        jdk.internal.jimage.ImageReader r0;
        java.lang.String r1, r2;
        jdk.internal.jimage.ImageReader$SharedImageReader $r3;
        jdk.internal.jimage.ImageLocation $r4;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r3 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r4 = virtualinvoke $r3.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageLocation findLocation(java.lang.String,java.lang.String)>(r1, r2);

        return $r4;
    }

    public jdk.internal.jimage.ImageLocation findLocation(java.lang.String)
    {
        jdk.internal.jimage.ImageReader r0;
        java.lang.String r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        jdk.internal.jimage.ImageLocation $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageLocation findLocation(java.lang.String)>(r1);

        return $r3;
    }

    public java.lang.String[] getEntryNames()
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        java.lang.String[] $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: java.lang.String[] getEntryNames()>();

        return $r2;
    }

    public java.lang.String[] getModuleNames()
    {
        jdk.internal.jimage.ImageReader r0;
        java.lang.String $r1;
        int i0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        jdk.internal.jimage.ImageReader$Node $r3;
        java.util.List $r4;
        java.util.stream.Stream $r5, $r7, $r9;
        java.util.function.Function $r6, $r8;
        java.util.function.IntFunction $r10;
        java.lang.Object[] $r11;
        java.lang.String[] $r12;

        r0 := @this: jdk.internal.jimage.ImageReader;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = "/modules/";

        i0 = virtualinvoke $r1.<java.lang.String: int length()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: jdk.internal.jimage.ImageReader$Node findNode(java.lang.String)>("/modules");

        $r4 = virtualinvoke $r3.<jdk.internal.jimage.ImageReader$Node: java.util.List getChildren()>();

        $r5 = interfaceinvoke $r4.<java.util.List: java.util.stream.Stream stream()>();

        $r6 = staticinvoke <jdk.internal.jimage.ImageReader$getNameString__142: java.util.function.Function bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6);

        $r8 = staticinvoke <jdk.internal.jimage.ImageReader$lambda_getModuleNames_0__143: java.util.function.Function bootstrap$(int)>(i0);

        $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r8);

        $r10 = staticinvoke <jdk.internal.jimage.ImageReader$lambda_getModuleNames_1__144: java.util.function.IntFunction bootstrap$()>();

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.lang.Object[] toArray(java.util.function.IntFunction)>($r10);

        $r12 = (java.lang.String[]) $r11;

        return $r12;
    }

    public long[] getAttributes(int)
    {
        jdk.internal.jimage.ImageReader r0;
        int i0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        long[] $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        i0 := @parameter0: int;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: long[] getAttributes(int)>(i0);

        return $r2;
    }

    public java.lang.String getString(int)
    {
        jdk.internal.jimage.ImageReader r0;
        int i0;
        jdk.internal.jimage.ImageReader$SharedImageReader $r1;
        java.lang.String $r2;

        r0 := @this: jdk.internal.jimage.ImageReader;

        i0 := @parameter0: int;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r1 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.ImageReader$SharedImageReader: java.lang.String getString(int)>(i0);

        return $r2;
    }

    public byte[] getResource(java.lang.String)
    {
        jdk.internal.jimage.ImageReader r0;
        java.lang.String r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        byte[] $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: byte[] getResource(java.lang.String)>(r1);

        return $r3;
    }

    public byte[] getResource(jdk.internal.jimage.ImageLocation)
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageLocation r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        byte[] $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageLocation;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: byte[] getResource(jdk.internal.jimage.ImageLocation)>(r1);

        return $r3;
    }

    public java.nio.ByteBuffer getResourceBuffer(jdk.internal.jimage.ImageLocation)
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageLocation r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        java.nio.ByteBuffer $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageLocation;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: java.nio.ByteBuffer getResourceBuffer(jdk.internal.jimage.ImageLocation)>(r1);

        return $r3;
    }

    public java.io.InputStream getResourceStream(jdk.internal.jimage.ImageLocation)
    {
        jdk.internal.jimage.ImageReader r0;
        jdk.internal.jimage.ImageLocation r1;
        jdk.internal.jimage.ImageReader$SharedImageReader $r2;
        java.io.InputStream $r3;

        r0 := @this: jdk.internal.jimage.ImageReader;

        r1 := @parameter0: jdk.internal.jimage.ImageLocation;

        virtualinvoke r0.<jdk.internal.jimage.ImageReader: void requireOpen()>();

        $r2 = r0.<jdk.internal.jimage.ImageReader: jdk.internal.jimage.ImageReader$SharedImageReader reader>;

        $r3 = virtualinvoke $r2.<jdk.internal.jimage.ImageReader$SharedImageReader: java.io.InputStream getResourceStream(jdk.internal.jimage.ImageLocation)>(r1);

        return $r3;
    }

    public static java.lang.String[] lambda$getModuleNames$1(int)
    {
        int i0;
        java.lang.String[] $r0;

        i0 := @parameter0: int;

        $r0 = newarray (java.lang.String)[i0];

        return $r0;
    }

    public static java.lang.String lambda$getModuleNames$0(int, java.lang.String)
    {
        java.lang.String r0, $r1;
        int i0, $i1;

        i0 := @parameter0: int;

        r0 := @parameter1: java.lang.String;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i0, $i1);

        return $r1;
    }
}
