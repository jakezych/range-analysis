public final class jdk.internal.module.ModuleBootstrap extends java.lang.Object
{
    private static final java.lang.String JAVA_BASE;
    private static final java.lang.String ALL_DEFAULT;
    private static final java.lang.String ALL_UNNAMED;
    private static final java.lang.String ALL_SYSTEM;
    private static final java.lang.String ALL_MODULE_PATH;
    private static final jdk.internal.access.JavaLangModuleAccess JLMA;
    private static final jdk.internal.module.ModulePatcher patcher;
    private static volatile java.lang.module.ModuleFinder unlimitedFinder;
    private static volatile java.lang.module.ModuleFinder limitedFinder;
    private static final java.lang.String ADD_MODULES;
    private static final java.lang.String ADD_EXPORTS;
    private static final java.lang.String ADD_OPENS;
    private static final java.lang.String ADD_READS;
    private static final java.lang.String PATCH_MODULE;

    private void <init>()
    {
        jdk.internal.module.ModuleBootstrap r0;

        r0 := @this: jdk.internal.module.ModuleBootstrap;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static jdk.internal.module.ModulePatcher patcher()
    {
        jdk.internal.module.ModulePatcher $r0;

        $r0 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        return $r0;
    }

    public static java.lang.module.ModuleFinder unlimitedFinder()
    {
        java.lang.module.ModuleFinder r0, $r1;

        r0 = <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder>;

        if r0 != null goto label1;

        $r1 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder ofSystem()>();

        return $r1;

     label1:
        return r0;
    }

    public static java.lang.module.ModuleFinder limitedFinder()
    {
        java.lang.module.ModuleFinder r0, $r1;

        r0 = <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitedFinder>;

        if r0 != null goto label1;

        $r1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder()>();

        return $r1;

     label1:
        return r0;
    }

    public static java.lang.ModuleLayer boot() throws java.lang.Exception
    {
        long l0, l1, l2, l5, l7, l8, l9, l10;
        java.lang.module.ModuleFinder r0, r1, r69, r72, r73;
        jdk.internal.module.ModulePatcher $r2, $r33;
        boolean z0, z1, z2, $z3, $z4, $z5, $z7, $z9, $z10, $z12, $z13, $z14, $z15, $z16, $z17, z18, z19, z20, z21, $z22, $z23, z24, z25, z26, $z27, $z28;
        java.lang.String r3, r6, $r14, $r27, $r32, r60, r84;
        java.util.Set r4, r5, $r18, $r34, $r40, $r41, $r50;
        jdk.internal.module.ExplodedSystemModules $r7;
        java.lang.module.ModuleReference r8, r83;
        java.util.Optional $r9, $r28, $r70, $r85;
        java.lang.Object $r10, $r19, $r22, $r59, $r71;
        java.net.URI r11;
        java.lang.module.ModuleDescriptor $r12, $r21;
        jdk.internal.access.JavaLangModuleAccess $r15;
        jdk.internal.module.ModuleBootstrap$SafeModuleFinder $r16, $r17;
        java.lang.module.ResolvedModule r20;
        java.lang.ClassLoader r23;
        java.lang.StringBuilder $r24, $r25, $r26, $r29, $r30, $r31;
        java.util.stream.Stream $r35, $r37, $r42, $r44, $r46, $r48, $r51, $r53, $r55, $r57;
        java.util.function.Predicate $r36, $r47, $r56;
        java.util.function.Consumer $r38, $r49, $r58;
        java.util.HashSet $r39, r74;
        java.util.function.Function $r43, $r45, $r52, $r54, r81;
        int $i3, i4;
        java.lang.module.ModuleFinder[] $r61, $r62;
        java.io.PrintStream $r63, r66;
        java.lang.InternalError $r64, $r65;
        jdk.internal.module.SystemModules r67;
        jdk.internal.module.ArchivedModuleGraph r68;
        java.util.Iterator r75, r82;
        byte b6;
        java.lang.module.Configuration r79;
        java.util.Map r80, r88, r89;
        java.lang.ModuleLayer $r86, r87;

        l0 = staticinvoke <java.lang.System: long nanoTime()>();

        r0 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder finderFor(java.lang.String)>("jdk.module.upgrade.path");

        r1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder finderFor(java.lang.String)>("jdk.module.path");

        $r2 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        z0 = virtualinvoke $r2.<jdk.internal.module.ModulePatcher: boolean hasPatches()>();

        r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("jdk.module.main");

        r4 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Set addModules()>();

        r5 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Set limitModules()>();

        r66 = null;

        r6 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.showModuleResolution");

        if r6 == null goto label01;

        $z16 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r6);

        if $z16 == 0 goto label01;

        r66 = <java.lang.System: java.io.PrintStream out>;

     label01:
        l1 = staticinvoke <java.lang.System: long nanoTime()>();

        r67 = null;

        if r1 != null goto label02;

        if r0 == null goto label03;

     label02:
        $z17 = 1;

        goto label04;

     label03:
        $z17 = 0;

     label04:
        z1 = $z17;

        z18 = 1;

        z19 = 0;

        r68 = staticinvoke <jdk.internal.module.ArchivedModuleGraph: jdk.internal.module.ArchivedModuleGraph get(java.lang.String)>(r3);

        if r68 == null goto label07;

        if $z17 != 0 goto label07;

        $z14 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>();

        if $z14 == 0 goto label07;

        $z15 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>();

        if $z15 == 0 goto label07;

        if z0 != 0 goto label07;

        r69 = virtualinvoke r68.<jdk.internal.module.ArchivedModuleGraph: java.lang.module.ModuleFinder finder()>();

        z20 = virtualinvoke r68.<jdk.internal.module.ArchivedModuleGraph: boolean hasSplitPackages()>();

        z21 = virtualinvoke r68.<jdk.internal.module.ArchivedModuleGraph: boolean hasIncubatorModules()>();

        if r66 == null goto label05;

        $z22 = 1;

        goto label06;

     label05:
        $z22 = 0;

     label06:
        z18 = $z22;

        goto label14;

     label07:
        if z1 != 0 goto label10;

        $z12 = interfaceinvoke r4.<java.util.Set: boolean isEmpty()>();

        if $z12 == 0 goto label10;

        $z13 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>();

        if $z13 == 0 goto label10;

        r67 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.SystemModules systemModules(java.lang.String)>(r3);

        if r67 == null goto label10;

        if z0 != 0 goto label10;

        if r66 == null goto label08;

        $z23 = 1;

        goto label09;

     label08:
        $z23 = 0;

     label09:
        z18 = $z23;

        z19 = 1;

     label10:
        if r67 != null goto label11;

        r67 = staticinvoke <jdk.internal.module.SystemModuleFinders: jdk.internal.module.SystemModules allSystemModules()>();

     label11:
        if r67 == null goto label12;

        r69 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder of(jdk.internal.module.SystemModules)>(r67);

        goto label13;

     label12:
        $r7 = new jdk.internal.module.ExplodedSystemModules;

        specialinvoke $r7.<jdk.internal.module.ExplodedSystemModules: void <init>()>();

        r67 = $r7;

        r69 = staticinvoke <jdk.internal.module.SystemModuleFinders: java.lang.module.ModuleFinder ofSystem()>();

     label13:
        z20 = interfaceinvoke r67.<jdk.internal.module.SystemModules: boolean hasSplitPackages()>();

        z21 = interfaceinvoke r67.<jdk.internal.module.SystemModules: boolean hasIncubatorModules()>();

        r68 = null;

     label14:
        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.1.systemModulesTime", l1);

        l2 = staticinvoke <java.lang.System: long nanoTime()>();

        $r70 = interfaceinvoke r69.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>("java.base");

        $r71 = virtualinvoke $r70.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        r8 = (java.lang.module.ModuleReference) $r71;

        if r8 != null goto label15;

        $r65 = new java.lang.InternalError;

        specialinvoke $r65.<java.lang.InternalError: void <init>(java.lang.String)>("java.base not found");

        throw $r65;

     label15:
        $r9 = virtualinvoke r8.<java.lang.module.ModuleReference: java.util.Optional location()>();

        $r10 = virtualinvoke $r9.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        r11 = (java.net.URI) $r10;

        if r11 != null goto label16;

        $r64 = new java.lang.InternalError;

        specialinvoke $r64.<java.lang.InternalError: void <init>(java.lang.String)>("java.base does not have a location");

        throw $r64;

     label16:
        staticinvoke <jdk.internal.loader.BootLoader: void loadModule(java.lang.module.ModuleReference)>(r8);

        $r12 = virtualinvoke r8.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        staticinvoke <jdk.internal.module.Modules: java.lang.Module defineModule(java.lang.ClassLoader,java.lang.module.ModuleDescriptor,java.net.URI)>(null, $r12, r11);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.2.defineBaseTime", l2);

        $r14 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.validation");

        if $r14 == null goto label17;

        $r63 = <java.lang.System: java.io.PrintStream out>;

        i4 = staticinvoke <jdk.internal.module.ModulePathValidator: int scanAllModules(java.io.PrintStream)>($r63);

        if i4 <= 0 goto label17;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>("Validation of module path failed");

     label17:
        l5 = staticinvoke <java.lang.System: long nanoTime()>();

        r72 = null;

        if z18 == 0 goto label38;

        if r0 == null goto label18;

        $r62 = newarray (java.lang.module.ModuleFinder)[2];

        $r62[0] = r0;

        $r62[1] = r69;

        r69 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder compose(java.lang.module.ModuleFinder[])>($r62);

     label18:
        if r1 == null goto label19;

        $r61 = newarray (java.lang.module.ModuleFinder)[2];

        $r61[0] = r69;

        $r61[1] = r1;

        r73 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder compose(java.lang.module.ModuleFinder[])>($r61);

        goto label20;

     label19:
        r73 = r69;

     label20:
        $r39 = new java.util.HashSet;

        specialinvoke $r39.<java.util.HashSet: void <init>()>();

        r74 = $r39;

        if r3 == null goto label21;

        interfaceinvoke $r39.<java.util.Set: boolean add(java.lang.Object)>(r3);

     label21:
        z24 = 0;

        z25 = 0;

        z26 = 0;

        r75 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>();

     label22:
        $z27 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z27 == 0 goto label32;

        $r59 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        r60 = (java.lang.String) $r59;

        b6 = -1;

        $i3 = virtualinvoke r60.<java.lang.String: int hashCode()>();

        lookupswitch($i3)
        {
            case -1057501189: goto label24;
            case 564408789: goto label23;
            case 1070226586: goto label25;
            default: goto label26;
        };

     label23:
        $z9 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("ALL-DEFAULT");

        if $z9 == 0 goto label26;

        b6 = 0;

        goto label26;

     label24:
        $z10 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("ALL-SYSTEM");

        if $z10 == 0 goto label26;

        b6 = 1;

        goto label26;

     label25:
        $z7 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("ALL-MODULE-PATH");

        if $z7 == 0 goto label26;

        b6 = 2;

     label26:
        tableswitch(b6)
        {
            case 0: goto label27;
            case 1: goto label28;
            case 2: goto label29;
            default: goto label30;
        };

     label27:
        z24 = 1;

        goto label31;

     label28:
        z25 = 1;

        goto label31;

     label29:
        z26 = 1;

        goto label31;

     label30:
        interfaceinvoke $r39.<java.util.Set: boolean add(java.lang.Object)>(r60);

     label31:
        goto label22;

     label32:
        r72 = r73;

        $z5 = interfaceinvoke r5.<java.util.Set: boolean isEmpty()>();

        if $z5 != 0 goto label33;

        r73 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitFinder(java.lang.module.ModuleFinder,java.util.Set,java.util.Set)>(r73, r5, $r39);

     label33:
        if r3 == null goto label34;

        if z24 == 0 goto label35;

     label34:
        $r40 = staticinvoke <jdk.internal.module.DefaultRoots: java.util.Set compute(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder)>(r69, r73);

        interfaceinvoke $r39.<java.util.Set: boolean addAll(java.util.Collection)>($r40);

     label35:
        if z25 == 0 goto label36;

        $r50 = interfaceinvoke r69.<java.lang.module.ModuleFinder: java.util.Set findAll()>();

        $r51 = interfaceinvoke $r50.<java.util.Set: java.util.stream.Stream stream()>();

        $r52 = staticinvoke <jdk.internal.module.ModuleBootstrap$descriptor__9: java.util.function.Function bootstrap$()>();

        $r53 = interfaceinvoke $r51.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r52);

        $r54 = staticinvoke <jdk.internal.module.ModuleBootstrap$name__10: java.util.function.Function bootstrap$()>();

        $r55 = interfaceinvoke $r53.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r54);

        $r56 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_0__11: java.util.function.Predicate bootstrap$(java.lang.module.ModuleFinder)>(r73);

        $r57 = interfaceinvoke $r55.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r56);

        $r58 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_1__12: java.util.function.Consumer bootstrap$(java.util.Set)>($r39);

        interfaceinvoke $r57.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r58);

     label36:
        if r1 == null goto label37;

        if z26 == 0 goto label37;

        $r41 = interfaceinvoke r1.<java.lang.module.ModuleFinder: java.util.Set findAll()>();

        $r42 = interfaceinvoke $r41.<java.util.Set: java.util.stream.Stream stream()>();

        $r43 = staticinvoke <jdk.internal.module.ModuleBootstrap$descriptor__5: java.util.function.Function bootstrap$()>();

        $r44 = interfaceinvoke $r42.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r43);

        $r45 = staticinvoke <jdk.internal.module.ModuleBootstrap$name__6: java.util.function.Function bootstrap$()>();

        $r46 = interfaceinvoke $r44.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r45);

        $r47 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_2__7: java.util.function.Predicate bootstrap$(java.lang.module.ModuleFinder)>(r73);

        $r48 = interfaceinvoke $r46.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r47);

        $r49 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_3__8: java.util.function.Consumer bootstrap$(java.util.Set)>($r39);

        interfaceinvoke $r48.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r49);

     label37:
        goto label39;

     label38:
        r73 = r69;

        r74 = null;

     label39:
        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.3.optionsAndRootsTime", l5);

        l7 = staticinvoke <java.lang.System: long nanoTime()>();

        if z18 == 0 goto label40;

        r79 = staticinvoke <jdk.internal.module.Modules: java.lang.module.Configuration newBootLayerConfiguration(java.lang.module.ModuleFinder,java.util.Collection,java.io.PrintStream)>(r73, r74, r66);

        goto label42;

     label40:
        if r68 == null goto label41;

        r79 = virtualinvoke r68.<jdk.internal.module.ArchivedModuleGraph: java.lang.module.Configuration configuration()>();

        goto label42;

     label41:
        r80 = interfaceinvoke r67.<jdk.internal.module.SystemModules: java.util.Map moduleReads()>();

        $r15 = <jdk.internal.module.ModuleBootstrap: jdk.internal.access.JavaLangModuleAccess JLMA>;

        r79 = interfaceinvoke $r15.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.Configuration newConfiguration(java.lang.module.ModuleFinder,java.util.Map)>(r69, r80);

     label42:
        if z0 == 0 goto label43;

        $r33 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        $r34 = virtualinvoke $r33.<jdk.internal.module.ModulePatcher: java.util.Set patchedModules()>();

        $r35 = interfaceinvoke $r34.<java.util.Set: java.util.stream.Stream stream()>();

        $r36 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_4__3: java.util.function.Predicate bootstrap$(java.lang.module.Configuration)>(r79);

        $r37 = interfaceinvoke $r35.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r36);

        $r38 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_boot_5__4: java.util.function.Consumer bootstrap$()>();

        interfaceinvoke $r37.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r38);

     label43:
        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.4.resolveTime", l7);

        l8 = staticinvoke <java.lang.System: long nanoTime()>();

        r81 = staticinvoke <jdk.internal.module.ModuleLoaderMap: java.util.function.Function mappingFunction(java.lang.module.Configuration)>(r79);

        if z1 == 0 goto label47;

        $r18 = virtualinvoke r79.<java.lang.module.Configuration: java.util.Set modules()>();

        r82 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>();

     label44:
        $z3 = interfaceinvoke r82.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label47;

        $r19 = interfaceinvoke r82.<java.util.Iterator: java.lang.Object next()>();

        r20 = (java.lang.module.ResolvedModule) $r19;

        r83 = virtualinvoke r20.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        $r21 = virtualinvoke r83.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        r84 = virtualinvoke $r21.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r22 = interfaceinvoke r81.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r84);

        r23 = (java.lang.ClassLoader) $r22;

        if r23 != null goto label46;

        if r0 == null goto label45;

        $r28 = interfaceinvoke r0.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(r84);

        $z4 = virtualinvoke $r28.<java.util.Optional: boolean isPresent()>();

        if $z4 == 0 goto label45;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cannot be loaded from upgrade module path");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r32);

     label45:
        $r85 = interfaceinvoke r69.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(r84);

        $z28 = virtualinvoke $r85.<java.util.Optional: boolean isPresent()>();

        if $z28 != 0 goto label46;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r84);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": cannot be loaded from application module path");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r27);

     label46:
        goto label44;

     label47:
        if z20 != 0 goto label48;

        if z0 != 0 goto label48;

        if z1 == 0 goto label49;

     label48:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void checkSplitPackages(java.lang.module.Configuration,java.util.function.Function)>(r79, r81);

     label49:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void loadModules(java.lang.module.Configuration,java.util.function.Function)>(r79, r81);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.5.loadModulesTime", l8);

        l9 = staticinvoke <java.lang.System: long nanoTime()>();

        $r86 = staticinvoke <java.lang.ModuleLayer: java.lang.ModuleLayer empty()>();

        r87 = virtualinvoke $r86.<java.lang.ModuleLayer: java.lang.ModuleLayer defineModules(java.lang.module.Configuration,java.util.function.Function)>(r79, r81);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.6.layerCreateTime", l9);

        if z21 != 0 goto label50;

        if z1 == 0 goto label51;

     label50:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void checkIncubatingStatus(java.lang.module.Configuration)>(r79);

     label51:
        l10 = staticinvoke <java.lang.System: long nanoTime()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addExtraReads(java.lang.ModuleLayer)>(r87);

        z2 = staticinvoke <jdk.internal.module.ModuleBootstrap: boolean addExtraExportsAndOpens(java.lang.ModuleLayer)>(r87);

        if r68 == null goto label52;

        r88 = virtualinvoke r68.<jdk.internal.module.ArchivedModuleGraph: java.util.Map concealedPackagesToOpen()>();

        r89 = virtualinvoke r68.<jdk.internal.module.ArchivedModuleGraph: java.util.Map exportedPackagesToOpen()>();

        goto label53;

     label52:
        r88 = interfaceinvoke r67.<jdk.internal.module.SystemModules: java.util.Map concealedPackagesToOpen()>();

        r89 = interfaceinvoke r67.<jdk.internal.module.SystemModules: java.util.Map exportedPackagesToOpen()>();

     label53:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void addIllegalAccess(java.lang.module.ModuleFinder,java.util.Map,java.util.Map,java.lang.ModuleLayer,boolean)>(r0, r88, r89, r87, z2);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.7.adjustModulesTime", l10);

        if r72 == null goto label54;

        $r16 = new jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        specialinvoke $r16.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: void <init>(java.lang.module.ModuleFinder)>(r72);

        <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder> = $r16;

        if r72 == r73 goto label54;

        $r17 = new jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        specialinvoke $r17.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: void <init>(java.lang.module.ModuleFinder)>(r73);

        <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitedFinder> = $r17;

     label54:
        if z19 == 0 goto label55;

        if r3 != null goto label55;

        staticinvoke <jdk.internal.module.ArchivedModuleGraph: void archive(java.lang.String,boolean,boolean,java.lang.module.ModuleFinder,java.lang.module.Configuration,java.util.Map,java.util.Map)>(r3, z20, z21, r69, r79, r88, r89);

     label55:
        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void add(java.lang.String,long)>("jdk.module.boot.totalTime", l0);

        staticinvoke <jdk.internal.module.ModuleBootstrap$Counters: void publish()>();

        return r87;
    }

    private static void loadModules(java.lang.module.Configuration, java.util.function.Function)
    {
        java.lang.module.Configuration r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0, $z1, $z2;
        java.lang.Object $r3, $r8;
        java.lang.module.ResolvedModule r4;
        java.lang.module.ModuleReference r5;
        java.lang.String r6;
        java.util.function.Function r7;
        java.lang.ClassLoader r9;
        jdk.internal.loader.BuiltinClassLoader $r10;

        r0 := @parameter0: java.lang.module.Configuration;

        r7 := @parameter1: java.util.function.Function;

        $r1 = virtualinvoke r0.<java.lang.module.Configuration: java.util.Set modules()>();

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.lang.module.ResolvedModule) $r3;

        r5 = virtualinvoke r4.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        r6 = virtualinvoke r4.<java.lang.module.ResolvedModule: java.lang.String name()>();

        $r8 = interfaceinvoke r7.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r6);

        r9 = (java.lang.ClassLoader) $r8;

        if r9 != null goto label2;

        $z2 = virtualinvoke r6.<java.lang.String: boolean equals(java.lang.Object)>("java.base");

        if $z2 != 0 goto label3;

        staticinvoke <jdk.internal.loader.BootLoader: void loadModule(java.lang.module.ModuleReference)>(r5);

        goto label3;

     label2:
        $z1 = r9 instanceof jdk.internal.loader.BuiltinClassLoader;

        if $z1 == 0 goto label3;

        $r10 = (jdk.internal.loader.BuiltinClassLoader) r9;

        virtualinvoke $r10.<jdk.internal.loader.BuiltinClassLoader: void loadModule(java.lang.module.ModuleReference)>(r5);

     label3:
        goto label1;

     label4:
        return;
    }

    private static void checkSplitPackages(java.lang.module.Configuration, java.util.function.Function)
    {
        java.util.HashMap $r0;
        java.lang.module.Configuration r2;
        java.util.Set $r3, $r13;
        java.util.Iterator r4, r14;
        boolean $z0, $z1, $z2;
        java.lang.Object $r5, $r11, $r15, $r17;
        java.lang.module.ResolvedModule r6;
        java.lang.module.ModuleReference $r7;
        java.lang.module.ModuleDescriptor r8;
        java.lang.String r9, r16, r18, r26;
        java.util.function.Function r10;
        java.lang.ClassLoader r12;
        java.lang.StringBuilder $r19, $r20, $r21, $r22, $r23, $r24, $r25;
        java.lang.LayerInstantiationException $r27;

        r2 := @parameter0: java.lang.module.Configuration;

        r10 := @parameter1: java.util.function.Function;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        $r3 = virtualinvoke r2.<java.lang.module.Configuration: java.util.Set modules()>();

        r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label6;

        $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r6 = (java.lang.module.ResolvedModule) $r5;

        $r7 = virtualinvoke r6.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        r8 = virtualinvoke $r7.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        r9 = virtualinvoke r8.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r11 = interfaceinvoke r10.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r9);

        r12 = (java.lang.ClassLoader) $r11;

        if r12 == null goto label2;

        $z1 = r12 instanceof jdk.internal.loader.BuiltinClassLoader;

        if $z1 == 0 goto label5;

     label2:
        $r13 = virtualinvoke r8.<java.lang.module.ModuleDescriptor: java.util.Set packages()>();

        r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>();

     label3:
        $z2 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label5;

        $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>();

        r16 = (java.lang.String) $r15;

        $r17 = interfaceinvoke $r0.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r16, r9);

        r18 = (java.lang.String) $r17;

        if r18 == null goto label4;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>()>();

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Package ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in both module ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and module ");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = new java.lang.LayerInstantiationException;

        specialinvoke $r27.<java.lang.LayerInstantiationException: void <init>(java.lang.String)>(r26);

        throw $r27;

     label4:
        goto label3;

     label5:
        goto label1;

     label6:
        return;
    }

    private static java.lang.module.ModuleFinder limitFinder(java.lang.module.ModuleFinder, java.util.Set, java.util.Set)
    {
        java.lang.module.Configuration $r0, r5;
        java.lang.module.ModuleFinder r1, $r3;
        java.nio.file.Path[] $r2;
        java.util.Set r4, $r8, r13;
        java.util.HashMap $r6;
        java.util.stream.Stream $r9, $r11, $r14, $r17, $r19;
        java.util.function.Function $r10, $r16, $r18;
        java.util.function.Consumer $r12, $r20;
        java.util.HashSet $r21;
        java.util.Collection $r22;
        jdk.internal.module.ModuleBootstrap$1 $r24;

        r1 := @parameter0: java.lang.module.ModuleFinder;

        r4 := @parameter1: java.util.Set;

        r13 := @parameter2: java.util.Set;

        $r0 = staticinvoke <java.lang.module.Configuration: java.lang.module.Configuration empty()>();

        $r2 = newarray (java.nio.file.Path)[0];

        $r3 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder of(java.nio.file.Path[])>($r2);

        r5 = virtualinvoke $r0.<java.lang.module.Configuration: java.lang.module.Configuration resolve(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)>(r1, $r3, r4);

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        $r8 = virtualinvoke r5.<java.lang.module.Configuration: java.util.Set modules()>();

        $r9 = interfaceinvoke $r8.<java.util.Set: java.util.stream.Stream stream()>();

        $r10 = staticinvoke <jdk.internal.module.ModuleBootstrap$reference__13: java.util.function.Function bootstrap$()>();

        $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r10);

        $r12 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_limitFinder_6__14: java.util.function.Consumer bootstrap$(java.util.Map)>($r6);

        interfaceinvoke $r11.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r12);

        $r14 = interfaceinvoke r13.<java.util.Set: java.util.stream.Stream stream()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r16 = staticinvoke <jdk.internal.module.ModuleBootstrap$find__15: java.util.function.Function bootstrap$(java.lang.module.ModuleFinder)>(r1);

        $r17 = interfaceinvoke $r14.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r16);

        $r18 = staticinvoke <jdk.internal.module.ModuleBootstrap$stream__16: java.util.function.Function bootstrap$()>();

        $r19 = interfaceinvoke $r17.<java.util.stream.Stream: java.util.stream.Stream flatMap(java.util.function.Function)>($r18);

        $r20 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_limitFinder_7__17: java.util.function.Consumer bootstrap$(java.util.Map)>($r6);

        interfaceinvoke $r19.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r20);

        $r21 = new java.util.HashSet;

        $r22 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>();

        specialinvoke $r21.<java.util.HashSet: void <init>(java.util.Collection)>($r22);

        $r24 = new jdk.internal.module.ModuleBootstrap$1;

        specialinvoke $r24.<jdk.internal.module.ModuleBootstrap$1: void <init>(java.util.Map,java.util.Set)>($r6, $r21);

        return $r24;
    }

    private static java.lang.module.ModuleFinder finderFor(java.lang.String)
    {
        java.lang.String r0, r1, $r2, r8;
        java.lang.String[] r3, $r9;
        int $i0, i1, $i2, i3, i4;
        java.nio.file.Path[] r4;
        jdk.internal.module.ModulePatcher $r6;
        java.lang.module.ModuleFinder $r7;
        java.nio.file.Path $r10;

        r0 := @parameter0: java.lang.String;

        r1 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>(r0);

        if r1 != null goto label1;

        return null;

     label1:
        $r2 = <java.io.File: java.lang.String pathSeparator>;

        r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>($r2);

        $i0 = lengthof r3;

        r4 = newarray (java.nio.file.Path)[$i0];

        i3 = 0;

        i1 = lengthof r3;

        i4 = 0;

     label2:
        if i4 >= i1 goto label3;

        r8 = r3[i4];

        $i2 = i3;

        i3 = i3 + 1;

        $r9 = newarray (java.lang.String)[0];

        $r10 = staticinvoke <java.nio.file.Path: java.nio.file.Path of(java.lang.String,java.lang.String[])>(r8, $r9);

        r4[$i2] = $r10;

        i4 = i4 + 1;

        goto label2;

     label3:
        $r6 = <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher>;

        $r7 = staticinvoke <jdk.internal.module.ModulePath: java.lang.module.ModuleFinder of(jdk.internal.module.ModulePatcher,java.nio.file.Path[])>($r6, r4);

        return $r7;
    }

    private static jdk.internal.module.ModulePatcher initModulePatcher()
    {
        java.lang.String $r0;
        java.util.Map r1;
        jdk.internal.module.ModulePatcher $r2;

        $r0 = <java.io.File: java.lang.String pathSeparator>;

        r1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String,java.lang.String,boolean)>("jdk.module.patch.", $r0, 0);

        $r2 = new jdk.internal.module.ModulePatcher;

        specialinvoke $r2.<jdk.internal.module.ModulePatcher: void <init>(java.util.Map)>(r1);

        return $r2;
    }

    private static java.util.Set addModules()
    {
        java.lang.StringBuilder $r1, $r2, $r3, $r8, $r9, $r10;
        java.lang.String $r4, $r11, r12, r14;
        java.util.HashSet $r5;
        java.lang.String[] r7;
        int i0, i1, i2;
        boolean $z0;
        java.util.Set $r13;

        i1 = 0;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk.module.addmods.");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($r4);

        if r14 != null goto label1;

        $r13 = staticinvoke <java.util.Set: java.util.Set of()>();

        return $r13;

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

     label2:
        if r14 == null goto label6;

        r7 = virtualinvoke r14.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r7;

        i2 = 0;

     label3:
        if i2 >= i0 goto label5;

        r12 = r7[i2];

        $z0 = virtualinvoke r12.<java.lang.String: boolean isEmpty()>();

        if $z0 != 0 goto label4;

        interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r12);

     label4:
        i2 = i2 + 1;

        goto label3;

     label5:
        i1 = i1 + 1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk.module.addmods.");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        r14 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($r11);

        goto label2;

     label6:
        return $r5;
    }

    private static java.util.Set limitModules()
    {
        java.lang.String r0, r4;
        java.util.HashSet $r1;
        java.lang.String[] r3;
        int i0, $i1, i2;
        java.util.Set $r5;

        r0 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.limitmods");

        if r0 != null goto label1;

        $r5 = staticinvoke <java.util.Set: java.util.Set of()>();

        return $r5;

     label1:
        $r1 = new java.util.HashSet;

        specialinvoke $r1.<java.util.HashSet: void <init>()>();

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(",");

        i0 = lengthof r3;

        i2 = 0;

     label2:
        if i2 >= i0 goto label4;

        r4 = r3[i2];

        $i1 = virtualinvoke r4.<java.lang.String: int length()>();

        if $i1 <= 0 goto label3;

        interfaceinvoke $r1.<java.util.Set: boolean add(java.lang.Object)>(r4);

     label3:
        i2 = i2 + 1;

        goto label2;

     label4:
        return $r1;
    }

    private static void addExtraReads(java.lang.ModuleLayer)
    {
        java.util.Map r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        java.util.Set $r1;
        java.util.Iterator r2, r12;
        java.lang.Object $r3, $r5, $r8, $r10, $r13, $r16;
        java.util.Map$Entry r4;
        java.lang.String r6, r14, $r15;
        java.lang.ModuleLayer r7;
        java.lang.Module r9, $r17;
        java.util.List $r11;
        java.util.Optional r18, r19;

        r7 := @parameter0: java.lang.ModuleLayer;

        r0 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String)>("jdk.module.addreads.");

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label2:
        $z5 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z5 == 0 goto label9;

        $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r4 = (java.util.Map$Entry) $r3;

        $r5 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>();

        r6 = (java.lang.String) $r5;

        r18 = virtualinvoke r7.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r6);

        $z1 = virtualinvoke r18.<java.util.Optional: boolean isPresent()>();

        if $z1 != 0 goto label3;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>("--add-reads", r6);

        goto label2;

     label3:
        $r8 = virtualinvoke r18.<java.util.Optional: java.lang.Object get()>();

        r9 = (java.lang.Module) $r8;

        $r10 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r11 = (java.util.List) $r10;

        r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>();

     label4:
        $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label8;

        $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r13;

        $r15 = "ALL-UNNAMED";

        $z3 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r14);

        if $z3 == 0 goto label5;

        staticinvoke <jdk.internal.module.Modules: void addReadsAllUnnamed(java.lang.Module)>(r9);

        goto label7;

     label5:
        r19 = virtualinvoke r7.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r14);

        $z4 = virtualinvoke r19.<java.util.Optional: boolean isPresent()>();

        if $z4 == 0 goto label6;

        $r16 = virtualinvoke r19.<java.util.Optional: java.lang.Object get()>();

        $r17 = (java.lang.Module) $r16;

        staticinvoke <jdk.internal.module.Modules: void addReads(java.lang.Module,java.lang.Module)>(r9, $r17);

        goto label7;

     label6:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>("--add-reads", r14);

     label7:
        goto label4;

     label8:
        goto label2;

     label9:
        return;
    }

    private static boolean addExtraExportsAndOpens(java.lang.ModuleLayer)
    {
        java.util.Map r0, r1;
        boolean $z0, $z1, z2;
        java.lang.ModuleLayer r2;

        r2 := @parameter0: java.lang.ModuleLayer;

        z2 = 0;

        r0 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String)>("jdk.module.addexports.");

        $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addExtraExportsOrOpens(java.lang.ModuleLayer,java.util.Map,boolean)>(r2, r0, 0);

        z2 = 1;

     label1:
        r1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String)>("jdk.module.addopens.");

        $z1 = interfaceinvoke r1.<java.util.Map: boolean isEmpty()>();

        if $z1 != 0 goto label2;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void addExtraExportsOrOpens(java.lang.ModuleLayer,java.util.Map,boolean)>(r2, r1, 1);

        z2 = 1;

     label2:
        return z2;
    }

    private static void addExtraExportsOrOpens(java.lang.ModuleLayer, java.util.Map, boolean)
    {
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9;
        java.lang.String r0, r7, r9, r10, $r11, r21, $r22, $r29, $r30, $r31;
        java.util.Map r1;
        java.util.Set $r2, $r16;
        java.util.Iterator r3, r19;
        java.lang.Object $r4, $r6, $r13, $r17, $r20, $r23;
        java.util.Map$Entry r5;
        java.lang.String[] r8;
        int $i0;
        java.lang.ModuleLayer r12;
        java.lang.Module r14, r33;
        java.lang.module.ModuleDescriptor $r15;
        java.util.List $r18;
        java.lang.StringBuilder $r24, $r25, $r26, $r27, $r28;
        java.util.Optional r32, r34;

        r12 := @parameter0: java.lang.ModuleLayer;

        r1 := @parameter1: java.util.Map;

        z0 := @parameter2: boolean;

        if z0 == 0 goto label01;

        $r31 = "--add-opens";

        goto label02;

     label01:
        $r31 = "--add-exports";

     label02:
        r0 = $r31;

        $r2 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label03:
        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 == 0 goto label18;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        r8 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>("/");

        $i0 = lengthof r8;

        if $i0 == 2 goto label04;

        $r30 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>(r0, "<module>/<package>", r7);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r30);

     label04:
        r9 = r8[0];

        r10 = r8[1];

        $z1 = virtualinvoke r9.<java.lang.String: boolean isEmpty()>();

        if $z1 != 0 goto label05;

        $z5 = virtualinvoke r10.<java.lang.String: boolean isEmpty()>();

        if $z5 == 0 goto label06;

     label05:
        $r11 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>(r0, "<module>/<package>", r7);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r11);

     label06:
        r32 = virtualinvoke r12.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r9);

        $z7 = virtualinvoke r32.<java.util.Optional: boolean isPresent()>();

        if $z7 != 0 goto label07;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>(r0, r9);

        goto label03;

     label07:
        $r13 = virtualinvoke r32.<java.util.Optional: java.lang.Object get()>();

        r14 = (java.lang.Module) $r13;

        $r15 = virtualinvoke r14.<java.lang.Module: java.lang.module.ModuleDescriptor getDescriptor()>();

        $r16 = virtualinvoke $r15.<java.lang.module.ModuleDescriptor: java.util.Set packages()>();

        $z2 = interfaceinvoke $r16.<java.util.Set: boolean contains(java.lang.Object)>(r10);

        if $z2 != 0 goto label08;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("package ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not in ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warn(java.lang.String)>($r29);

        goto label03;

     label08:
        $r17 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r18 = (java.util.List) $r17;

        r19 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>();

     label09:
        $z8 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>();

        if $z8 == 0 goto label17;

        $r20 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>();

        r21 = (java.lang.String) $r20;

        z9 = 0;

        r33 = null;

        $r22 = "ALL-UNNAMED";

        $z3 = virtualinvoke $r22.<java.lang.String: boolean equals(java.lang.Object)>(r21);

        if $z3 == 0 goto label10;

        z9 = 1;

        goto label12;

     label10:
        r34 = virtualinvoke r12.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r21);

        $z4 = virtualinvoke r34.<java.util.Optional: boolean isPresent()>();

        if $z4 == 0 goto label11;

        $r23 = virtualinvoke r34.<java.util.Optional: java.lang.Object get()>();

        r33 = (java.lang.Module) $r23;

        goto label12;

     label11:
        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>(r0, r21);

        goto label09;

     label12:
        if z9 == 0 goto label14;

        if z0 == 0 goto label13;

        staticinvoke <jdk.internal.module.Modules: void addOpensToAllUnnamed(java.lang.Module,java.lang.String)>(r14, r10);

        goto label16;

     label13:
        staticinvoke <jdk.internal.module.Modules: void addExportsToAllUnnamed(java.lang.Module,java.lang.String)>(r14, r10);

        goto label16;

     label14:
        if z0 == 0 goto label15;

        staticinvoke <jdk.internal.module.Modules: void addOpens(java.lang.Module,java.lang.String,java.lang.Module)>(r14, r10, r33);

        goto label16;

     label15:
        staticinvoke <jdk.internal.module.Modules: void addExports(java.lang.Module,java.lang.String,java.lang.Module)>(r14, r10, r33);

     label16:
        goto label09;

     label17:
        goto label03;

     label18:
        return;
    }

    private static void addIllegalAccess(java.lang.module.ModuleFinder, java.util.Map, java.util.Map, java.lang.ModuleLayer, boolean)
    {
        java.lang.String r0, r5, $r28, r42, r44;
        java.lang.ModuleLayer r1;
        java.lang.Object $r2, $r8, $r10, $r18, $r20;
        java.lang.Module r3, $r19, $r21;
        java.lang.module.ModuleDescriptor r4;
        boolean $z0, z1, $z2, $z3, $z4, $z5, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        java.lang.module.ModuleFinder r6, $r23;
        java.util.Set $r7, $r9, $r37, r39, r40;
        java.util.Iterator $r13, $r14, $r15, r38, r41, r43;
        java.util.HashSet $r16, $r17;
        java.util.Optional $r22;
        int $i0;
        java.lang.StringBuilder $r24, $r25, $r26, $r27;
        java.util.Map r29, r30;
        jdk.internal.module.IllegalAccessLogger$Mode r31;
        byte b1;
        jdk.internal.module.IllegalAccessLogger$Builder $r33;
        java.io.PrintStream $r34;
        jdk.internal.module.IllegalAccessMaps r36;
        jdk.internal.access.JavaLangAccess r45;

        r6 := @parameter0: java.lang.module.ModuleFinder;

        r29 := @parameter1: java.util.Map;

        r30 := @parameter2: java.util.Map;

        r1 := @parameter3: java.lang.ModuleLayer;

        z1 := @parameter4: boolean;

        r0 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>("jdk.module.illegalAccess");

        r31 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode ONESHOT>;

        if r0 == null goto label11;

        b1 = -1;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -991722469: goto label02;
            case 3079692: goto label01;
            case 3641990: goto label03;
            case 95458899: goto label04;
            default: goto label05;
        };

     label01:
        $z11 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("deny");

        if $z11 == 0 goto label05;

        b1 = 0;

        goto label05;

     label02:
        $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("permit");

        if $z12 == 0 goto label05;

        b1 = 1;

        goto label05;

     label03:
        $z10 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("warn");

        if $z10 == 0 goto label05;

        b1 = 2;

        goto label05;

     label04:
        $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("debug");

        if $z9 == 0 goto label05;

        b1 = 3;

     label05:
        tableswitch(b1)
        {
            case 0: goto label06;
            case 1: goto label07;
            case 2: goto label08;
            case 3: goto label09;
            default: goto label10;
        };

     label06:
        return;

     label07:
        goto label11;

     label08:
        r31 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode WARN>;

        goto label11;

     label09:
        r31 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode DEBUG>;

        goto label11;

     label10:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value specified to --illegal-access not recognized: \'");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r28);

        return;

     label11:
        $r33 = new jdk.internal.module.IllegalAccessLogger$Builder;

        $r34 = <java.lang.System: java.io.PrintStream err>;

        specialinvoke $r33.<jdk.internal.module.IllegalAccessLogger$Builder: void <init>(jdk.internal.module.IllegalAccessLogger$Mode,java.io.PrintStream)>(r31, $r34);

        $z13 = interfaceinvoke r29.<java.util.Map: boolean isEmpty()>();

        if $z13 == 0 goto label12;

        $z8 = interfaceinvoke r30.<java.util.Map: boolean isEmpty()>();

        if $z8 == 0 goto label12;

        $r23 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder limitedFinder()>();

        r36 = staticinvoke <jdk.internal.module.IllegalAccessMaps: jdk.internal.module.IllegalAccessMaps generate(java.lang.module.ModuleFinder)>($r23);

        r29 = virtualinvoke r36.<jdk.internal.module.IllegalAccessMaps: java.util.Map concealedPackagesToOpen()>();

        r30 = virtualinvoke r36.<jdk.internal.module.IllegalAccessMaps: java.util.Map exportedPackagesToOpen()>();

     label12:
        $r37 = virtualinvoke r1.<java.lang.ModuleLayer: java.util.Set modules()>();

        r38 = interfaceinvoke $r37.<java.util.Set: java.util.Iterator iterator()>();

     label13:
        $z14 = interfaceinvoke r38.<java.util.Iterator: boolean hasNext()>();

        if $z14 == 0 goto label22;

        $r2 = interfaceinvoke r38.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.Module) $r2;

        r4 = virtualinvoke r3.<java.lang.Module: java.lang.module.ModuleDescriptor getDescriptor()>();

        r5 = virtualinvoke r3.<java.lang.Module: java.lang.String getName()>();

        $z0 = virtualinvoke r4.<java.lang.module.ModuleDescriptor: boolean isOpen()>();

        if $z0 == 0 goto label14;

        goto label13;

     label14:
        if r6 == null goto label15;

        $r22 = interfaceinvoke r6.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(r5);

        $z7 = virtualinvoke $r22.<java.util.Optional: boolean isPresent()>();

        if $z7 == 0 goto label15;

        goto label13;

     label15:
        $r7 = staticinvoke <java.util.Set: java.util.Set of()>();

        $r8 = interfaceinvoke r29.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r5, $r7);

        r39 = (java.util.Set) $r8;

        $r9 = staticinvoke <java.util.Set: java.util.Set of()>();

        $r10 = interfaceinvoke r30.<java.util.Map: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)>(r5, $r9);

        r40 = (java.util.Set) $r10;

        if z1 == 0 goto label21;

        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>(java.util.Collection)>(r39);

        r39 = $r16;

        $r17 = new java.util.HashSet;

        specialinvoke $r17.<java.util.HashSet: void <init>(java.util.Collection)>(r40);

        r40 = $r17;

        r41 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

     label16:
        $z2 = interfaceinvoke r41.<java.util.Iterator: boolean hasNext()>();

        if $z2 == 0 goto label18;

        $r20 = interfaceinvoke r41.<java.util.Iterator: java.lang.Object next()>();

        r42 = (java.lang.String) $r20;

        $r21 = staticinvoke <jdk.internal.loader.BootLoader: java.lang.Module getUnnamedModule()>();

        $z5 = virtualinvoke r3.<java.lang.Module: boolean isExported(java.lang.String,java.lang.Module)>(r42, $r21);

        if $z5 == 0 goto label17;

        interfaceinvoke r41.<java.util.Iterator: void remove()>();

        interfaceinvoke $r17.<java.util.Set: boolean add(java.lang.Object)>(r42);

     label17:
        goto label16;

     label18:
        r43 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>();

     label19:
        $z3 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>();

        if $z3 == 0 goto label21;

        $r18 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>();

        r44 = (java.lang.String) $r18;

        $r19 = staticinvoke <jdk.internal.loader.BootLoader: java.lang.Module getUnnamedModule()>();

        $z4 = virtualinvoke r3.<java.lang.Module: boolean isOpen(java.lang.String,java.lang.Module)>(r44, $r19);

        if $z4 == 0 goto label20;

        interfaceinvoke r43.<java.util.Iterator: void remove()>();

     label20:
        goto label19;

     label21:
        virtualinvoke $r33.<jdk.internal.module.IllegalAccessLogger$Builder: jdk.internal.module.IllegalAccessLogger$Builder logAccessToConcealedPackages(java.lang.Module,java.util.Set)>(r3, r39);

        virtualinvoke $r33.<jdk.internal.module.IllegalAccessLogger$Builder: jdk.internal.module.IllegalAccessLogger$Builder logAccessToExportedPackages(java.lang.Module,java.util.Set)>(r3, r40);

        r45 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangAccess getJavaLangAccess()>();

        $r13 = interfaceinvoke r39.<java.util.Set: java.util.Iterator iterator()>();

        $r14 = interfaceinvoke r40.<java.util.Set: java.util.Iterator iterator()>();

        $r15 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Iterator concat(java.util.Iterator,java.util.Iterator)>($r13, $r14);

        interfaceinvoke r45.<jdk.internal.access.JavaLangAccess: void addOpensToAllUnnamed(java.lang.Module,java.util.Iterator)>(r3, $r15);

        goto label13;

     label22:
        virtualinvoke $r33.<jdk.internal.module.IllegalAccessLogger$Builder: void complete()>();

        return;
    }

    private static java.util.Map decode(java.lang.String, java.lang.String, boolean)
    {
        java.lang.StringBuilder $r0, $r2, $r3, $r12, $r13, $r14, $r16, $r17, $r19, $r20, $r21, $r24, $r25, $r26, $r28;
        java.lang.String r1, $r4, r7, r8, r10, $r15, $r18, $r22, r23, $r27, $r29, $r30, $r31, $r32, $r33, $r34, $r35, r37;
        java.util.HashMap $r5;
        int i0, $i1, i2, i3, i4, i5;
        boolean $z0, z1, $z2, $z4;
        java.util.List r9;
        java.lang.String[] r11;
        java.util.Map $r36;
        java.util.function.Function $r38;
        java.lang.Object $r39;

        r1 := @parameter0: java.lang.String;

        r10 := @parameter1: java.lang.String;

        z1 := @parameter2: boolean;

        i3 = 0;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        r37 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($r4);

        if r37 != null goto label01;

        $r36 = staticinvoke <java.util.Map: java.util.Map of()>();

        return $r36;

     label01:
        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

     label02:
        if r37 == null goto label11;

        i0 = virtualinvoke r37.<java.lang.String: int indexOf(int)>(61);

        if i0 != -1 goto label03;

        $r34 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(r1);

        $r35 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($r34, "<module>=<value>", r37);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r35);

     label03:
        if i0 != 0 goto label04;

        $r32 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(r1);

        $r33 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($r32, "<module>=<value>", r37);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r33);

     label04:
        r7 = virtualinvoke r37.<java.lang.String: java.lang.String substring(int,int)>(0, i0);

        $i1 = i0 + 1;

        r8 = virtualinvoke r37.<java.lang.String: java.lang.String substring(int)>($i1);

        $z0 = virtualinvoke r8.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label05;

        $r30 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(r1);

        $r31 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String unableToParse(java.lang.String,java.lang.String,java.lang.String)>($r30, "<module>=<value>", r37);

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r31);

     label05:
        if z1 != 0 goto label06;

        $z4 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z4 == 0 goto label06;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>()>();

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified more than once to ");

        $r27 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(r1);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r29);

     label06:
        $r38 = staticinvoke <jdk.internal.module.ModuleBootstrap$lambda_decode_8__18: java.util.function.Function bootstrap$()>();

        $r39 = interfaceinvoke $r5.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(r7, $r38);

        r9 = (java.util.List) $r39;

        i4 = 0;

        r11 = virtualinvoke r8.<java.lang.String: java.lang.String[] split(java.lang.String)>(r10);

        i2 = lengthof r11;

        i5 = 0;

     label07:
        if i5 >= i2 goto label09;

        r23 = r11[i5];

        $z2 = virtualinvoke r23.<java.lang.String: boolean isEmpty()>();

        if $z2 != 0 goto label08;

        interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>(r23);

        i4 = i4 + 1;

     label08:
        i5 = i5 + 1;

        goto label07;

     label09:
        if i4 != 0 goto label10;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>()>();

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target must be specified: ");

        $r18 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String option(java.lang.String)>(r1);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r37);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void fail(java.lang.String)>($r22);

     label10:
        i3 = i3 + 1;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        r37 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.String getAndRemoveProperty(java.lang.String)>($r15);

        goto label02;

     label11:
        return $r5;
    }

    private static java.util.Map decode(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;

        r0 := @parameter0: java.lang.String;

        $r1 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.util.Map decode(java.lang.String,java.lang.String,boolean)>(r0, ",", 1);

        return $r1;
    }

    private static java.lang.String getAndRemoveProperty(java.lang.String)
    {
        java.util.Properties $r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2;

        r1 := @parameter0: java.lang.String;

        $r0 = staticinvoke <java.lang.System: java.util.Properties getProperties()>();

        $r2 = virtualinvoke $r0.<java.util.Properties: java.lang.Object remove(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        return $r3;
    }

    private static void checkIncubatingStatus(java.lang.module.Configuration)
    {
        java.lang.module.Configuration r0;
        java.util.Set $r1;
        java.util.Iterator r2;
        boolean $z0, $z1;
        java.lang.StringBuilder $r3, $r4, $r5, $r12, $r13, $r14, $r15;
        java.lang.String $r6, r11, r16;
        java.lang.Object $r7;
        java.lang.module.ResolvedModule r8;
        java.lang.module.ModuleReference r9;
        java.lang.module.ModuleDescriptor $r10;

        r0 := @parameter0: java.lang.module.Configuration;

        r16 = null;

        $r1 = virtualinvoke r0.<java.lang.module.Configuration: java.util.Set modules()>();

        r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label4;

        $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r8 = (java.lang.module.ResolvedModule) $r7;

        r9 = virtualinvoke r8.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        $z1 = staticinvoke <jdk.internal.module.ModuleResolution: boolean hasIncubatingWarning(java.lang.module.ModuleReference)>(r9);

        if $z1 == 0 goto label3;

        $r10 = virtualinvoke r9.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        r11 = virtualinvoke $r10.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        if r16 != null goto label2;

        r16 = r11;

        goto label3;

     label2:
        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        goto label1;

     label4:
        if r16 == null goto label5;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using incubator modules: ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warn(java.lang.String)>($r6);

     label5:
        return;
    }

    static void fail(java.lang.String)
    {
        java.lang.RuntimeException $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.lang.RuntimeException;

        specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1);

        throw $r0;
    }

    static void warn(java.lang.String)
    {
        java.lang.StringBuilder $r0, $r2, $r4;
        java.io.PrintStream $r1;
        java.lang.String r3, $r5;

        r3 := @parameter0: java.lang.String;

        $r1 = <java.lang.System: java.io.PrintStream err>;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: ");

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r5);

        return;
    }

    static void warnUnknownModule(java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String r2, r5, $r7;

        r5 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown module: ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" specified to ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warn(java.lang.String)>($r7);

        return;
    }

    static java.lang.String unableToParse(java.lang.String, java.lang.String, java.lang.String)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6, $r7, $r9;
        java.lang.String r2, r5, r8, $r10;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.String;

        r8 := @parameter2: java.lang.String;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to parse ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ");

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    static java.lang.String option(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.IllegalArgumentException $r2;
        byte b1;

        r0 := @parameter0: java.lang.String;

        b1 = -1;

        $i0 = virtualinvoke r0.<java.lang.String: int hashCode()>();

        lookupswitch($i0)
        {
            case -1634796447: goto label05;
            case 693588459: goto label04;
            case 919126689: goto label02;
            case 994726637: goto label03;
            case 1390198411: goto label01;
            default: goto label06;
        };

     label01:
        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addexports.");

        if $z0 == 0 goto label06;

        b1 = 0;

        goto label06;

     label02:
        $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addopens.");

        if $z2 == 0 goto label06;

        b1 = 1;

        goto label06;

     label03:
        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addreads.");

        if $z1 == 0 goto label06;

        b1 = 2;

        goto label06;

     label04:
        $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.patch.");

        if $z3 == 0 goto label06;

        b1 = 3;

        goto label06;

     label05:
        $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("jdk.module.addmods.");

        if $z4 == 0 goto label06;

        b1 = 4;

     label06:
        tableswitch(b1)
        {
            case 0: goto label07;
            case 1: goto label08;
            case 2: goto label09;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label12;
        };

     label07:
        return "--add-exports";

     label08:
        return "--add-opens";

     label09:
        return "--add-reads";

     label10:
        return "--patch-module";

     label11:
        return "--add-modules";

     label12:
        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(r0);

        throw $r2;
    }

    static java.util.Iterator concat(java.util.Iterator, java.util.Iterator)
    {
        jdk.internal.module.ModuleBootstrap$2 $r0;
        java.util.Iterator r1, r2;

        r1 := @parameter0: java.util.Iterator;

        r2 := @parameter1: java.util.Iterator;

        $r0 = new jdk.internal.module.ModuleBootstrap$2;

        specialinvoke $r0.<jdk.internal.module.ModuleBootstrap$2: void <init>(java.util.Iterator,java.util.Iterator)>(r1, r2);

        return $r0;
    }

    public static java.util.List lambda$decode$8(java.lang.String)
    {
        java.util.ArrayList $r0;
        java.lang.String r1;

        r1 := @parameter0: java.lang.String;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<java.util.ArrayList: void <init>()>();

        return $r0;
    }

    public static void lambda$limitFinder$7(java.util.Map, java.lang.module.ModuleReference)
    {
        java.util.Map r0;
        java.lang.module.ModuleReference r1;
        java.lang.module.ModuleDescriptor $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.module.ModuleReference;

        $r2 = virtualinvoke r1.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $r3 = virtualinvoke $r2.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public static void lambda$limitFinder$6(java.util.Map, java.lang.module.ModuleReference)
    {
        java.util.Map r0;
        java.lang.module.ModuleReference r1;
        java.lang.module.ModuleDescriptor $r2;
        java.lang.String $r3;

        r0 := @parameter0: java.util.Map;

        r1 := @parameter1: java.lang.module.ModuleReference;

        $r2 = virtualinvoke r1.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $r3 = virtualinvoke $r2.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1);

        return;
    }

    public static void lambda$boot$5(java.lang.String)
    {
        java.lang.String r0;

        r0 := @parameter0: java.lang.String;

        staticinvoke <jdk.internal.module.ModuleBootstrap: void warnUnknownModule(java.lang.String,java.lang.String)>("--patch-module", r0);

        return;
    }

    public static boolean lambda$boot$4(java.lang.module.Configuration, java.lang.String)
    {
        java.lang.module.Configuration r0;
        java.lang.String r1;
        java.util.Optional $r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.module.Configuration;

        r1 := @parameter1: java.lang.String;

        $r2 = virtualinvoke r0.<java.lang.module.Configuration: java.util.Optional findModule(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        return $z1;
    }

    public static void lambda$boot$3(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public static boolean lambda$boot$2(java.lang.module.ModuleFinder, java.lang.String)
    {
        java.lang.module.ModuleFinder r0;
        java.lang.String r1;
        java.util.Optional $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.module.ModuleFinder;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        return $z0;
    }

    public static void lambda$boot$1(java.util.Set, java.lang.String)
    {
        java.util.Set r0;
        java.lang.String r1;

        r0 := @parameter0: java.util.Set;

        r1 := @parameter1: java.lang.String;

        interfaceinvoke r0.<java.util.Set: boolean add(java.lang.Object)>(r1);

        return;
    }

    public static boolean lambda$boot$0(java.lang.module.ModuleFinder, java.lang.String)
    {
        java.lang.module.ModuleFinder r0;
        java.lang.String r1;
        java.util.Optional $r2;
        boolean $z0;

        r0 := @parameter0: java.lang.module.ModuleFinder;

        r1 := @parameter1: java.lang.String;

        $r2 = interfaceinvoke r0.<java.lang.module.ModuleFinder: java.util.Optional find(java.lang.String)>(r1);

        $z0 = virtualinvoke $r2.<java.util.Optional: boolean isPresent()>();

        return $z0;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaLangModuleAccess $r0;
        jdk.internal.module.ModulePatcher $r1;

        <jdk.internal.module.ModuleBootstrap: java.lang.String PATCH_MODULE> = "--patch-module";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_READS> = "--add-reads";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_OPENS> = "--add-opens";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_EXPORTS> = "--add-exports";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ADD_MODULES> = "--add-modules";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_MODULE_PATH> = "ALL-MODULE-PATH";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_SYSTEM> = "ALL-SYSTEM";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_UNNAMED> = "ALL-UNNAMED";

        <jdk.internal.module.ModuleBootstrap: java.lang.String ALL_DEFAULT> = "ALL-DEFAULT";

        <jdk.internal.module.ModuleBootstrap: java.lang.String JAVA_BASE> = "java.base";

        $r0 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess getJavaLangModuleAccess()>();

        <jdk.internal.module.ModuleBootstrap: jdk.internal.access.JavaLangModuleAccess JLMA> = $r0;

        $r1 = staticinvoke <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher initModulePatcher()>();

        <jdk.internal.module.ModuleBootstrap: jdk.internal.module.ModulePatcher patcher> = $r1;

        return;
    }
}
