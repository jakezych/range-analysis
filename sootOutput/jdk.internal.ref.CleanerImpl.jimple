public final class jdk.internal.ref.CleanerImpl extends java.lang.Object implements java.lang.Runnable
{
    private static java.util.function.Function cleanerImplAccess;
    final jdk.internal.ref.PhantomCleanable phantomCleanableList;
    final jdk.internal.ref.WeakCleanable weakCleanableList;
    final jdk.internal.ref.SoftCleanable softCleanableList;
    final java.lang.ref.ReferenceQueue queue;

    public static void setCleanerImplAccess(java.util.function.Function)
    {
        java.util.function.Function $r0, r2;
        java.lang.InternalError $r1;

        r2 := @parameter0: java.util.function.Function;

        $r0 = <jdk.internal.ref.CleanerImpl: java.util.function.Function cleanerImplAccess>;

        if $r0 != null goto label1;

        <jdk.internal.ref.CleanerImpl: java.util.function.Function cleanerImplAccess> = r2;

        goto label2;

     label1:
        $r1 = new java.lang.InternalError;

        specialinvoke $r1.<java.lang.InternalError: void <init>(java.lang.String)>("cleanerImplAccess");

        throw $r1;

     label2:
        return;
    }

    static jdk.internal.ref.CleanerImpl getCleanerImpl(java.lang.ref.Cleaner)
    {
        java.lang.ref.Cleaner r0;
        java.util.function.Function $r1;
        java.lang.Object $r2;
        jdk.internal.ref.CleanerImpl $r3;

        r0 := @parameter0: java.lang.ref.Cleaner;

        $r1 = <jdk.internal.ref.CleanerImpl: java.util.function.Function cleanerImplAccess>;

        $r2 = interfaceinvoke $r1.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r0);

        $r3 = (jdk.internal.ref.CleanerImpl) $r2;

        return $r3;
    }

    public void <init>()
    {
        jdk.internal.ref.CleanerImpl r0;
        java.lang.ref.ReferenceQueue $r1;
        jdk.internal.ref.CleanerImpl$PhantomCleanableRef $r2;
        jdk.internal.ref.CleanerImpl$WeakCleanableRef $r3;
        jdk.internal.ref.CleanerImpl$SoftCleanableRef $r4;

        r0 := @this: jdk.internal.ref.CleanerImpl;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.lang.ref.ReferenceQueue;

        specialinvoke $r1.<java.lang.ref.ReferenceQueue: void <init>()>();

        r0.<jdk.internal.ref.CleanerImpl: java.lang.ref.ReferenceQueue queue> = $r1;

        $r2 = new jdk.internal.ref.CleanerImpl$PhantomCleanableRef;

        specialinvoke $r2.<jdk.internal.ref.CleanerImpl$PhantomCleanableRef: void <init>()>();

        r0.<jdk.internal.ref.CleanerImpl: jdk.internal.ref.PhantomCleanable phantomCleanableList> = $r2;

        $r3 = new jdk.internal.ref.CleanerImpl$WeakCleanableRef;

        specialinvoke $r3.<jdk.internal.ref.CleanerImpl$WeakCleanableRef: void <init>()>();

        r0.<jdk.internal.ref.CleanerImpl: jdk.internal.ref.WeakCleanable weakCleanableList> = $r3;

        $r4 = new jdk.internal.ref.CleanerImpl$SoftCleanableRef;

        specialinvoke $r4.<jdk.internal.ref.CleanerImpl$SoftCleanableRef: void <init>()>();

        r0.<jdk.internal.ref.CleanerImpl: jdk.internal.ref.SoftCleanable softCleanableList> = $r4;

        return;
    }

    public void start(java.lang.ref.Cleaner, java.util.concurrent.ThreadFactory)
    {
        java.lang.ref.Cleaner r0;
        jdk.internal.ref.CleanerImpl $r1, r2;
        jdk.internal.ref.CleanerImpl$CleanerCleanable $r3;
        java.lang.Thread r4;
        java.lang.AssertionError $r5;
        java.util.concurrent.ThreadFactory r6;

        r2 := @this: jdk.internal.ref.CleanerImpl;

        r0 := @parameter0: java.lang.ref.Cleaner;

        r6 := @parameter1: java.util.concurrent.ThreadFactory;

        $r1 = staticinvoke <jdk.internal.ref.CleanerImpl: jdk.internal.ref.CleanerImpl getCleanerImpl(java.lang.ref.Cleaner)>(r0);

        if $r1 == r2 goto label1;

        $r5 = new java.lang.AssertionError;

        specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("wrong cleaner");

        throw $r5;

     label1:
        $r3 = new jdk.internal.ref.CleanerImpl$CleanerCleanable;

        specialinvoke $r3.<jdk.internal.ref.CleanerImpl$CleanerCleanable: void <init>(java.lang.ref.Cleaner)>(r0);

        if r6 != null goto label2;

        r6 = staticinvoke <jdk.internal.ref.CleanerImpl$InnocuousThreadFactory: java.util.concurrent.ThreadFactory factory()>();

     label2:
        r4 = interfaceinvoke r6.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r2);

        virtualinvoke r4.<java.lang.Thread: void setDaemon(boolean)>(1);

        virtualinvoke r4.<java.lang.Thread: void start()>();

        return;
    }

    public void run()
    {
        java.lang.Thread r0;
        boolean $z0, $z1, $z2, $z3;
        jdk.internal.misc.InnocuousThread r1, $r8;
        jdk.internal.ref.CleanerImpl r2;
        java.lang.ref.ReferenceQueue $r3;
        java.lang.ref.Reference $r4;
        jdk.internal.ref.WeakCleanable $r5;
        jdk.internal.ref.SoftCleanable $r6;
        java.lang.Throwable $r7;
        jdk.internal.ref.PhantomCleanable $r9;
        java.lang.ref.Cleaner$Cleanable r10;

        r2 := @this: jdk.internal.ref.CleanerImpl;

        r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>();

        $z0 = r0 instanceof jdk.internal.misc.InnocuousThread;

        if $z0 == 0 goto label1;

        $r8 = (jdk.internal.misc.InnocuousThread) r0;

        goto label2;

     label1:
        $r8 = null;

     label2:
        r1 = $r8;

     label3:
        $r9 = r2.<jdk.internal.ref.CleanerImpl: jdk.internal.ref.PhantomCleanable phantomCleanableList>;

        $z3 = virtualinvoke $r9.<jdk.internal.ref.PhantomCleanable: boolean isListEmpty()>();

        if $z3 == 0 goto label4;

        $r5 = r2.<jdk.internal.ref.CleanerImpl: jdk.internal.ref.WeakCleanable weakCleanableList>;

        $z1 = virtualinvoke $r5.<jdk.internal.ref.WeakCleanable: boolean isListEmpty()>();

        if $z1 == 0 goto label4;

        $r6 = r2.<jdk.internal.ref.CleanerImpl: jdk.internal.ref.SoftCleanable softCleanableList>;

        $z2 = virtualinvoke $r6.<jdk.internal.ref.SoftCleanable: boolean isListEmpty()>();

        if $z2 != 0 goto label8;

     label4:
        if r1 == null goto label5;

        virtualinvoke r1.<jdk.internal.misc.InnocuousThread: void eraseThreadLocals()>();

     label5:
        $r3 = r2.<jdk.internal.ref.CleanerImpl: java.lang.ref.ReferenceQueue queue>;

        $r4 = virtualinvoke $r3.<java.lang.ref.ReferenceQueue: java.lang.ref.Reference remove(long)>(60000L);

        r10 = (java.lang.ref.Cleaner$Cleanable) $r4;

        if r10 == null goto label6;

        interfaceinvoke r10.<java.lang.ref.Cleaner$Cleanable: void clean()>();

     label6:
        goto label3;

     label7:
        $r7 := @caughtexception;

        goto label3;

     label8:
        return;

        catch java.lang.Throwable from label5 to label6 with label7;
    }

    static void <clinit>()
    {
        <jdk.internal.ref.CleanerImpl: java.util.function.Function cleanerImplAccess> = null;

        return;
    }
}
