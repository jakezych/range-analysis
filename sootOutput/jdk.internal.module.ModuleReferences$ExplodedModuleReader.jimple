class jdk.internal.module.ModuleReferences$ExplodedModuleReader extends java.lang.Object implements java.lang.module.ModuleReader
{
    private final java.nio.file.Path dir;
    private volatile boolean closed;

    void <init>(java.nio.file.Path)
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        java.nio.file.Path r1;
        java.lang.SecurityManager r2;
        java.nio.file.LinkOption[] $r3;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        r1 := @parameter0: java.nio.file.Path;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir> = r1;

        r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if r2 == null goto label1;

        $r3 = newarray (java.nio.file.LinkOption)[0];

        staticinvoke <java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])>(r1, $r3);

     label1:
        return;
    }

    private void ensureOpen() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        boolean $z0;
        java.io.IOException $r1;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        $z0 = r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: boolean closed>;

        if $z0 == 0 goto label1;

        $r1 = new java.io.IOException;

        specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("ModuleReader is closed");

        throw $r1;

     label1:
        return;
    }

    public java.util.Optional find(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        java.lang.String r1;
        java.nio.file.Path $r2, r3;
        java.util.Optional $r4, $r6;
        java.net.URI $r5;
        java.io.IOError $r7;
        java.lang.Throwable $r9;
        java.io.IOException $r10;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        r3 = staticinvoke <jdk.internal.module.Resources: java.nio.file.Path toFilePath(java.nio.file.Path,java.lang.String)>($r2, r1);

        if r3 == null goto label4;

     label1:
        $r5 = interfaceinvoke r3.<java.nio.file.Path: java.net.URI toUri()>();

        $r6 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r5);

     label2:
        return $r6;

     label3:
        $r7 := @caughtexception;

        $r9 = virtualinvoke $r7.<java.io.IOError: java.lang.Throwable getCause()>();

        $r10 = (java.io.IOException) $r9;

        throw $r10;

     label4:
        $r4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r4;

        catch java.io.IOError from label1 to label2 with label3;
    }

    public java.util.Optional open(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        java.lang.String r1;
        java.nio.file.Path $r2, r3;
        java.util.Optional $r4, $r7;
        java.nio.file.OpenOption[] $r5;
        java.io.InputStream $r6;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        r3 = staticinvoke <jdk.internal.module.Resources: java.nio.file.Path toFilePath(java.nio.file.Path,java.lang.String)>($r2, r1);

        if r3 == null goto label1;

        $r5 = newarray (java.nio.file.OpenOption)[0];

        $r6 = staticinvoke <java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])>(r3, $r5);

        $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r6);

        return $r7;

     label1:
        $r4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r4;
    }

    public java.util.Optional read(java.lang.String) throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        java.lang.String r1;
        java.nio.file.Path $r2, r3;
        java.util.Optional $r4, $r7;
        byte[] $r5;
        java.nio.ByteBuffer $r6;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        r1 := @parameter0: java.lang.String;

        virtualinvoke r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        r3 = staticinvoke <jdk.internal.module.Resources: java.nio.file.Path toFilePath(java.nio.file.Path,java.lang.String)>($r2, r1);

        if r3 == null goto label1;

        $r5 = staticinvoke <java.nio.file.Files: byte[] readAllBytes(java.nio.file.Path)>(r3);

        $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r5);

        $r7 = staticinvoke <java.util.Optional: java.util.Optional of(java.lang.Object)>($r6);

        return $r7;

     label1:
        $r4 = staticinvoke <java.util.Optional: java.util.Optional empty()>();

        return $r4;
    }

    public java.util.stream.Stream list() throws java.io.IOException
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        java.nio.file.FileVisitOption[] $r1;
        java.nio.file.Path $r2;
        java.util.stream.Stream $r3, $r5, $r7;
        java.util.function.Function $r4;
        java.util.function.Predicate $r6;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        virtualinvoke r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: void ensureOpen()>();

        $r2 = r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $r1 = newarray (java.nio.file.FileVisitOption)[0];

        $r3 = staticinvoke <java.nio.file.Files: java.util.stream.Stream walk(java.nio.file.Path,int,java.nio.file.FileVisitOption[])>($r2, 2147483647, $r1);

        $r4 = staticinvoke <jdk.internal.module.ModuleReferences$ExplodedModuleReader$lambda_list_0__150: java.util.function.Function bootstrap$(jdk.internal.module.ModuleReferences$ExplodedModuleReader)>(r0);

        $r5 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r4);

        $r6 = staticinvoke <jdk.internal.module.ModuleReferences$ExplodedModuleReader$lambda_list_1__151: java.util.function.Predicate bootstrap$()>();

        $r7 = interfaceinvoke $r5.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r6);

        return $r7;
    }

    public void close()
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: boolean closed> = 1;

        return;
    }

    public static boolean lambda$list$1(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        if $i0 <= 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public java.lang.String lambda$list$0(java.nio.file.Path)
    {
        jdk.internal.module.ModuleReferences$ExplodedModuleReader r0;
        java.nio.file.Path r1, $r2;
        java.lang.String $r3;

        r0 := @this: jdk.internal.module.ModuleReferences$ExplodedModuleReader;

        r1 := @parameter0: java.nio.file.Path;

        $r2 = r0.<jdk.internal.module.ModuleReferences$ExplodedModuleReader: java.nio.file.Path dir>;

        $r3 = staticinvoke <jdk.internal.module.Resources: java.lang.String toResourceName(java.nio.file.Path,java.nio.file.Path)>($r2, r1);

        return $r3;
    }
}
