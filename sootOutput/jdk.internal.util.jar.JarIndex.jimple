public class jdk.internal.util.jar.JarIndex extends java.lang.Object
{
    private java.util.HashMap indexMap;
    private java.util.HashMap jarMap;
    private java.lang.String[] jarFiles;
    public static final java.lang.String INDEX_NAME;
    private static final boolean metaInfFilenames;

    public void <init>()
    {
        jdk.internal.util.jar.JarIndex r0;
        java.util.HashMap $r1, $r2;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap indexMap> = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap jarMap> = $r2;

        return;
    }

    public void <init>(java.io.InputStream) throws java.io.IOException
    {
        jdk.internal.util.jar.JarIndex r0;
        java.io.InputStream r1;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        r1 := @parameter0: java.io.InputStream;

        specialinvoke r0.<jdk.internal.util.jar.JarIndex: void <init>()>();

        virtualinvoke r0.<jdk.internal.util.jar.JarIndex: void read(java.io.InputStream)>(r1);

        return;
    }

    public void <init>(java.lang.String[]) throws java.io.IOException
    {
        jdk.internal.util.jar.JarIndex r0;
        java.lang.String[] r1;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        r1 := @parameter0: java.lang.String[];

        specialinvoke r0.<jdk.internal.util.jar.JarIndex: void <init>()>();

        r0.<jdk.internal.util.jar.JarIndex: java.lang.String[] jarFiles> = r1;

        virtualinvoke r0.<jdk.internal.util.jar.JarIndex: void parseJars(java.lang.String[])>(r1);

        return;
    }

    public static jdk.internal.util.jar.JarIndex getJarIndex(java.util.jar.JarFile) throws java.io.IOException
    {
        java.util.jar.JarFile r0;
        java.util.jar.JarEntry r1;
        jdk.internal.util.jar.JarIndex $r2, r4;
        java.io.InputStream $r3;

        r0 := @parameter0: java.util.jar.JarFile;

        r4 = null;

        r1 = virtualinvoke r0.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>("META-INF/INDEX.LIST");

        if r1 == null goto label1;

        $r2 = new jdk.internal.util.jar.JarIndex;

        $r3 = virtualinvoke r0.<java.util.jar.JarFile: java.io.InputStream getInputStream(java.util.zip.ZipEntry)>(r1);

        specialinvoke $r2.<jdk.internal.util.jar.JarIndex: void <init>(java.io.InputStream)>($r3);

        r4 = $r2;

     label1:
        return r4;
    }

    public java.lang.String[] getJarFiles()
    {
        jdk.internal.util.jar.JarIndex r0;
        java.lang.String[] $r1;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        $r1 = r0.<jdk.internal.util.jar.JarIndex: java.lang.String[] jarFiles>;

        return $r1;
    }

    private void addToList(java.lang.String, java.lang.String, java.util.HashMap)
    {
        java.util.HashMap r0;
        java.lang.String r1, r3;
        java.lang.Object $r2;
        boolean $z0;
        java.util.LinkedList $r4, r7;
        jdk.internal.util.jar.JarIndex r6;

        r6 := @this: jdk.internal.util.jar.JarIndex;

        r1 := @parameter0: java.lang.String;

        r3 := @parameter1: java.lang.String;

        r0 := @parameter2: java.util.HashMap;

        $r2 = virtualinvoke r0.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r7 = (java.util.LinkedList) $r2;

        if r7 != null goto label1;

        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        virtualinvoke $r4.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

        virtualinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        goto label2;

     label1:
        $z0 = virtualinvoke r7.<java.util.LinkedList: boolean contains(java.lang.Object)>(r3);

        if $z0 != 0 goto label2;

        virtualinvoke r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r3);

     label2:
        return;
    }

    public java.util.LinkedList get(java.lang.String)
    {
        jdk.internal.util.jar.JarIndex r0;
        java.lang.String r1, $r6;
        java.util.HashMap $r2, $r5;
        java.lang.Object $r3, $r7;
        java.util.LinkedList $r4, r8;
        int $i0;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap indexMap>;

        $r3 = virtualinvoke $r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        $r4 = (java.util.LinkedList) $r3;

        r8 = $r4;

        if $r4 != null goto label1;

        $i0 = virtualinvoke r1.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 == -1 goto label1;

        $r5 = r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap indexMap>;

        $r6 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        $r7 = virtualinvoke $r5.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r6);

        r8 = (java.util.LinkedList) $r7;

     label1:
        return r8;
    }

    public void add(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r2, r3;
        int $i0;
        jdk.internal.util.jar.JarIndex r1;

        r1 := @this: jdk.internal.util.jar.JarIndex;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 == -1 goto label1;

        r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

        goto label2;

     label1:
        r3 = r0;

     label2:
        virtualinvoke r1.<jdk.internal.util.jar.JarIndex: void addMapping(java.lang.String,java.lang.String)>(r3, r2);

        return;
    }

    private void addMapping(java.lang.String, java.lang.String)
    {
        jdk.internal.util.jar.JarIndex r0;
        java.lang.String r1, r2;
        java.util.HashMap $r3, $r4;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        r1 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        $r3 = r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap indexMap>;

        virtualinvoke r0.<jdk.internal.util.jar.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>(r1, r2, $r3);

        $r4 = r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap jarMap>;

        virtualinvoke r0.<jdk.internal.util.jar.JarIndex: void addToList(java.lang.String,java.lang.String,java.util.HashMap)>(r2, r1, $r4);

        return;
    }

    private void parseJars(java.lang.String[]) throws java.io.IOException
    {
        java.lang.String[] r0;
        int $i0, i2;
        java.util.zip.ZipFile $r1;
        char $c1;
        java.lang.String $r2, r7, r9;
        java.util.Enumeration r4;
        java.lang.Object $r5;
        java.util.zip.ZipEntry r6;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7;
        jdk.internal.util.jar.JarIndex r8;

        r8 := @this: jdk.internal.util.jar.JarIndex;

        r0 := @parameter0: java.lang.String[];

        if r0 != null goto label1;

        return;

     label1:
        i2 = 0;

     label2:
        $i0 = lengthof r0;

        if i2 >= $i0 goto label9;

        r9 = r0[i2];

        $r1 = new java.util.zip.ZipFile;

        $c1 = <java.io.File: char separatorChar>;

        $r2 = virtualinvoke r9.<java.lang.String: java.lang.String replace(char,char)>(47, $c1);

        specialinvoke $r1.<java.util.zip.ZipFile: void <init>(java.lang.String)>($r2);

        r4 = virtualinvoke $r1.<java.util.zip.ZipFile: java.util.Enumeration entries()>();

     label3:
        $z7 = interfaceinvoke r4.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z7 == 0 goto label8;

        $r5 = interfaceinvoke r4.<java.util.Enumeration: java.lang.Object nextElement()>();

        r6 = (java.util.zip.ZipEntry) $r5;

        r7 = virtualinvoke r6.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("META-INF/");

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("META-INF/INDEX.LIST");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>("META-INF/MANIFEST.MF");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("META-INF/versions/");

        if $z3 == 0 goto label4;

        goto label3;

     label4:
        $z4 = <jdk.internal.util.jar.JarIndex: boolean metaInfFilenames>;

        if $z4 == 0 goto label5;

        $z5 = virtualinvoke r7.<java.lang.String: boolean startsWith(java.lang.String)>("META-INF/");

        if $z5 != 0 goto label6;

     label5:
        virtualinvoke r8.<jdk.internal.util.jar.JarIndex: void add(java.lang.String,java.lang.String)>(r7, r9);

        goto label7;

     label6:
        $z6 = virtualinvoke r6.<java.util.zip.ZipEntry: boolean isDirectory()>();

        if $z6 != 0 goto label7;

        virtualinvoke r8.<jdk.internal.util.jar.JarIndex: void addMapping(java.lang.String,java.lang.String)>(r7, r9);

     label7:
        goto label3;

     label8:
        virtualinvoke $r1.<java.util.zip.ZipFile: void close()>();

        i2 = i2 + 1;

        goto label2;

     label9:
        return;
    }

    public void write(java.io.OutputStream) throws java.io.IOException
    {
        java.io.BufferedWriter $r0;
        java.io.OutputStreamWriter $r1;
        java.io.OutputStream r2;
        sun.nio.cs.UTF_8 $r3;
        jdk.internal.util.jar.JarIndex r5;
        java.lang.String[] $r6, $r7, $r8;
        int $i0, i1;
        java.lang.String r9, $r13, $r20, $r23;
        java.lang.StringBuilder $r10, $r11, $r12, $r18, $r21, $r22;
        java.util.HashMap $r14;
        java.lang.Object $r15, $r19;
        java.util.LinkedList r16;
        java.util.Iterator r17;
        boolean $z0;

        r5 := @this: jdk.internal.util.jar.JarIndex;

        r2 := @parameter0: java.io.OutputStream;

        $r0 = new java.io.BufferedWriter;

        $r1 = new java.io.OutputStreamWriter;

        $r3 = <sun.nio.cs.UTF_8: sun.nio.cs.UTF_8 INSTANCE>;

        specialinvoke $r1.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r2, $r3);

        specialinvoke $r0.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r1);

        virtualinvoke $r0.<java.io.BufferedWriter: void write(java.lang.String)>("JarIndex-Version: 1.0\n\n");

        $r6 = r5.<jdk.internal.util.jar.JarIndex: java.lang.String[] jarFiles>;

        if $r6 == null goto label5;

        i1 = 0;

     label1:
        $r7 = r5.<jdk.internal.util.jar.JarIndex: java.lang.String[] jarFiles>;

        $i0 = lengthof $r7;

        if i1 >= $i0 goto label4;

        $r8 = r5.<jdk.internal.util.jar.JarIndex: java.lang.String[] jarFiles>;

        r9 = $r8[i1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.BufferedWriter: void write(java.lang.String)>($r13);

        $r14 = r5.<jdk.internal.util.jar.JarIndex: java.util.HashMap jarMap>;

        $r15 = virtualinvoke $r14.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9);

        r16 = (java.util.LinkedList) $r15;

        if r16 == null goto label3;

        r17 = virtualinvoke r16.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label3;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>()>();

        $r19 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        $r20 = (java.lang.String) $r19;

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.io.BufferedWriter: void write(java.lang.String)>($r23);

        goto label2;

     label3:
        virtualinvoke $r0.<java.io.BufferedWriter: void write(java.lang.String)>("\n");

        i1 = i1 + 1;

        goto label1;

     label4:
        virtualinvoke $r0.<java.io.BufferedWriter: void flush()>();

     label5:
        return;
    }

    public void read(java.io.InputStream) throws java.io.IOException
    {
        java.io.BufferedReader $r0;
        java.io.InputStreamReader $r1;
        java.io.InputStream r2;
        sun.nio.cs.UTF_8 $r3;
        java.util.Vector $r5;
        java.lang.String $r7, r13, r14;
        jdk.internal.util.jar.JarIndex r8;
        int $i0;
        java.lang.String[] $r9, $r11;
        java.lang.Object[] $r10;
        boolean $z0, $z1, $z2;

        r8 := @this: jdk.internal.util.jar.JarIndex;

        r2 := @parameter0: java.io.InputStream;

        $r0 = new java.io.BufferedReader;

        $r1 = new java.io.InputStreamReader;

        $r3 = <sun.nio.cs.UTF_8: sun.nio.cs.UTF_8 INSTANCE>;

        specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r2, $r3);

        specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1);

        r13 = null;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<java.util.Vector: void <init>()>();

     label1:
        $r7 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        r14 = $r7;

        if $r7 == null goto label2;

        $z2 = virtualinvoke $r7.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z2 != 0 goto label2;

        goto label1;

     label2:
        if r14 == null goto label6;

        $z0 = virtualinvoke r14.<java.lang.String: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        goto label5;

     label3:
        $z1 = virtualinvoke r14.<java.lang.String: boolean endsWith(java.lang.String)>(".jar");

        if $z1 == 0 goto label4;

        r13 = r14;

        virtualinvoke $r5.<java.util.Vector: boolean add(java.lang.Object)>(r14);

        goto label5;

     label4:
        virtualinvoke r8.<jdk.internal.util.jar.JarIndex: void addMapping(java.lang.String,java.lang.String)>(r14, r13);

     label5:
        r14 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>();

        goto label2;

     label6:
        $i0 = virtualinvoke $r5.<java.util.Vector: int size()>();

        $r9 = newarray (java.lang.String)[$i0];

        $r10 = virtualinvoke $r5.<java.util.Vector: java.lang.Object[] toArray(java.lang.Object[])>($r9);

        $r11 = (java.lang.String[]) $r10;

        r8.<jdk.internal.util.jar.JarIndex: java.lang.String[] jarFiles> = $r11;

        return;
    }

    public void merge(jdk.internal.util.jar.JarIndex, java.lang.String)
    {
        jdk.internal.util.jar.JarIndex r0, r13;
        java.util.HashMap $r1;
        java.util.Set $r2;
        java.util.Iterator r3, r10;
        boolean $z0, $z1;
        java.lang.Object $r4, $r6, $r8, $r11;
        java.util.Map$Entry r5;
        java.lang.String r7, r12, r14;
        java.util.LinkedList r9;

        r0 := @this: jdk.internal.util.jar.JarIndex;

        r13 := @parameter0: jdk.internal.util.jar.JarIndex;

        r12 := @parameter1: java.lang.String;

        $r1 = r0.<jdk.internal.util.jar.JarIndex: java.util.HashMap indexMap>;

        $r2 = virtualinvoke $r1.<java.util.HashMap: java.util.Set entrySet()>();

        r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label5;

        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r5 = (java.util.Map$Entry) $r4;

        $r6 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>();

        r7 = (java.lang.String) $r6;

        $r8 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>();

        r9 = (java.util.LinkedList) $r8;

        r10 = virtualinvoke r9.<java.util.LinkedList: java.util.Iterator iterator()>();

     label2:
        $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label4;

        $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>();

        r14 = (java.lang.String) $r11;

        if r12 == null goto label3;

        r14 = virtualinvoke r12.<java.lang.String: java.lang.String concat(java.lang.String)>(r14);

     label3:
        virtualinvoke r13.<jdk.internal.util.jar.JarIndex: void addMapping(java.lang.String,java.lang.String)>(r7, r14);

        goto label2;

     label4:
        goto label1;

     label5:
        return;
    }

    static void <clinit>()
    {
        java.lang.String $r0, $r1;
        boolean $z0;

        <jdk.internal.util.jar.JarIndex: java.lang.String INDEX_NAME> = "META-INF/INDEX.LIST";

        $r0 = "true";

        $r1 = staticinvoke <sun.security.action.GetPropertyAction: java.lang.String privilegedGetProperty(java.lang.String)>("sun.misc.JarIndex.metaInfFilenames");

        $z0 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>($r1);

        <jdk.internal.util.jar.JarIndex: boolean metaInfFilenames> = $z0;

        return;
    }
}
