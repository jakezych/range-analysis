public class jdk.internal.jimage.ImageStream extends java.lang.Object
{
    private java.nio.ByteBuffer buffer;

    public void <init>()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteOrder $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        specialinvoke r0.<jdk.internal.jimage.ImageStream: void <init>(int,java.nio.ByteOrder)>(1024, $r1);

        return;
    }

    public void <init>(int)
    {
        jdk.internal.jimage.ImageStream r0;
        int i0;
        java.nio.ByteOrder $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        $r1 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        specialinvoke r0.<jdk.internal.jimage.ImageStream: void <init>(int,java.nio.ByteOrder)>(i0, $r1);

        return;
    }

    public void <init>(byte[])
    {
        jdk.internal.jimage.ImageStream r0;
        byte[] r1;
        java.nio.ByteOrder $r2;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: byte[];

        $r2 = staticinvoke <java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()>();

        specialinvoke r0.<jdk.internal.jimage.ImageStream: void <init>(byte[],java.nio.ByteOrder)>(r1, $r2);

        return;
    }

    public void <init>(java.nio.ByteOrder)
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteOrder r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: java.nio.ByteOrder;

        specialinvoke r0.<jdk.internal.jimage.ImageStream: void <init>(int,java.nio.ByteOrder)>(1024, r1);

        return;
    }

    public void <init>(int, java.nio.ByteOrder)
    {
        jdk.internal.jimage.ImageStream r0;
        int i0;
        java.nio.ByteBuffer $r1, $r3;
        java.nio.ByteOrder r2, $r5;
        java.lang.Object $r4;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        r2 := @parameter1: java.nio.ByteOrder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(i0);

        r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer> = $r1;

        $r3 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $r4 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $r5 = (java.nio.ByteOrder) $r4;

        virtualinvoke $r3.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r5);

        return;
    }

    public void <init>(byte[], java.nio.ByteOrder)
    {
        jdk.internal.jimage.ImageStream r0;
        byte[] r1, $r3;
        java.lang.Object $r2, $r7;
        java.nio.ByteBuffer $r4, $r6;
        java.nio.ByteOrder r5, $r8;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: byte[];

        r5 := @parameter1: java.nio.ByteOrder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (byte[]) $r2;

        $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r3);

        r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer> = $r4;

        $r6 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $r7 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r5);

        $r8 = (java.nio.ByteOrder) $r7;

        virtualinvoke $r6.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>($r8);

        return;
    }

    public void <init>(java.nio.ByteBuffer)
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer r1, $r3;
        java.lang.Object $r2;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: java.nio.ByteBuffer;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (java.nio.ByteBuffer) $r2;

        r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer> = $r3;

        return;
    }

    public jdk.internal.jimage.ImageStream align(int)
    {
        jdk.internal.jimage.ImageStream r0;
        int $i0, i1, $i2, $i3, $i4, i5, i6;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i1 := @parameter0: int;

        $i0 = virtualinvoke r0.<jdk.internal.jimage.ImageStream: int getSize()>();

        $i4 = $i0 - 1;

        $i2 = 1 << i1;

        $i3 = $i2 - 1;

        i5 = $i4 & $i3;

        i6 = 0;

     label1:
        if i6 >= i5 goto label2;

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream put(byte)>(0);

        i6 = i6 + 1;

        goto label1;

     label2:
        return r0;
    }

    public void ensure(int)
    {
        int i0, $i1, i2, $i3, $i5, $i6;
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1, $r2, $r4, $r6, $r7, $r8, $r10;
        byte[] r3;
        java.nio.ByteOrder r5;
        java.lang.IndexOutOfBoundsException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;
        java.lang.String $r16;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r12 = new java.lang.IndexOutOfBoundsException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>()>();

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad value: ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r12.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r16);

        throw $r12;

     label1:
        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if i0 <= $i1 goto label4;

        $r2 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $r4 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        r5 = virtualinvoke $r4.<java.nio.ByteBuffer: java.nio.ByteOrder order()>();

        $r6 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        i2 = virtualinvoke $r6.<java.nio.ByteBuffer: int position()>();

        $i3 = lengthof r3;

        if i0 > $i3 goto label2;

        $i5 = lengthof r3;

        $i6 = $i5 << 1;

        goto label3;

     label2:
        $i6 = i2 + i0;

     label3:
        $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i6);

        r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer> = $r7;

        $r8 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r8.<java.nio.ByteBuffer: java.nio.ByteBuffer order(java.nio.ByteOrder)>(r5);

        $r10 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r10.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r3, 0, i2);

     label4:
        return;
    }

    public boolean hasByte()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        int $i0;
        boolean $z0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if $i0 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public boolean hasBytes(int)
    {
        int i0, $i1;
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        boolean $z0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int remaining()>();

        if i0 > $i1 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public void skip(int)
    {
        int i0, $i1, $i2;
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1, $r2;
        java.lang.IndexOutOfBoundsException $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        if i0 >= 0 goto label1;

        $r4 = new java.lang.IndexOutOfBoundsException;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("skip value = ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r4.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r8);

        throw $r4;

     label1:
        $r2 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i1 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        $i2 = $i1 + i0;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>($i2);

        return;
    }

    public int get()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        byte $b0;
        int $i1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $b0 = virtualinvoke $r1.<java.nio.ByteBuffer: byte get()>();

        $i1 = $b0 & 255;

        return $i1;
    }

    public void get(byte[], int, int)
    {
        jdk.internal.jimage.ImageStream r0;
        byte[] r1;
        int i0, i1;
        java.nio.ByteBuffer $r2;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        $r2 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer get(byte[],int,int)>(r1, i0, i1);

        return;
    }

    public int getShort()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        short $s0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $s0 = virtualinvoke $r1.<java.nio.ByteBuffer: short getShort()>();

        return $s0;
    }

    public int getInt()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        int $i0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int getInt()>();

        return $i0;
    }

    public long getLong()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        long $l0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $l0 = virtualinvoke $r1.<java.nio.ByteBuffer: long getLong()>();

        return $l0;
    }

    public jdk.internal.jimage.ImageStream put(byte)
    {
        jdk.internal.jimage.ImageStream r0;
        byte b0;
        java.nio.ByteBuffer $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        b0 := @parameter0: byte;

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: void ensure(int)>(1);

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte)>(b0);

        return r0;
    }

    public jdk.internal.jimage.ImageStream put(int)
    {
        jdk.internal.jimage.ImageStream r0, $r1;
        int i0;
        byte $b1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        $b1 = (byte) i0;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream put(byte)>($b1);

        return $r1;
    }

    public jdk.internal.jimage.ImageStream put(byte[], int, int)
    {
        jdk.internal.jimage.ImageStream r0;
        int i0, i1;
        byte[] r1;
        java.nio.ByteBuffer $r2;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: byte[];

        i1 := @parameter1: int;

        i0 := @parameter2: int;

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: void ensure(int)>(i0);

        $r2 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r2.<java.nio.ByteBuffer: java.nio.ByteBuffer put(byte[],int,int)>(r1, i1, i0);

        return r0;
    }

    public jdk.internal.jimage.ImageStream put(jdk.internal.jimage.ImageStream)
    {
        jdk.internal.jimage.ImageStream r0, r1;
        java.nio.ByteBuffer $r2, $r4;
        byte[] $r3;
        int $i0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        r1 := @parameter0: jdk.internal.jimage.ImageStream;

        $r2 = r1.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $r3 = virtualinvoke $r2.<java.nio.ByteBuffer: byte[] array()>();

        $r4 = r1.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r4.<java.nio.ByteBuffer: int position()>();

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream put(byte[],int,int)>($r3, 0, $i0);

        return r0;
    }

    public jdk.internal.jimage.ImageStream putShort(short)
    {
        jdk.internal.jimage.ImageStream r0;
        short s0;
        java.nio.ByteBuffer $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        s0 := @parameter0: short;

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: void ensure(int)>(2);

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putShort(short)>(s0);

        return r0;
    }

    public jdk.internal.jimage.ImageStream putShort(int)
    {
        jdk.internal.jimage.ImageStream r0, $r1;
        int i0;
        short $s1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        $s1 = (short) i0;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream putShort(short)>($s1);

        return $r1;
    }

    public jdk.internal.jimage.ImageStream putInt(int)
    {
        jdk.internal.jimage.ImageStream r0;
        int i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: void ensure(int)>(4);

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putInt(int)>(i0);

        return r0;
    }

    public jdk.internal.jimage.ImageStream putLong(long)
    {
        jdk.internal.jimage.ImageStream r0;
        long l0;
        java.nio.ByteBuffer $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        l0 := @parameter0: long;

        virtualinvoke r0.<jdk.internal.jimage.ImageStream: void ensure(int)>(8);

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer putLong(long)>(l0);

        return r0;
    }

    public java.nio.ByteBuffer getBuffer()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        return $r1;
    }

    public int getPosition()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        int $i0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        return $i0;
    }

    public int getSize()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        int $i0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r1.<java.nio.ByteBuffer: int position()>();

        return $i0;
    }

    public byte[] getBytes()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1;
        byte[] $r2;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        return $r2;
    }

    public void setPosition(int)
    {
        jdk.internal.jimage.ImageStream r0;
        int i0;
        java.nio.ByteBuffer $r1;

        r0 := @this: jdk.internal.jimage.ImageStream;

        i0 := @parameter0: int;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        virtualinvoke $r1.<java.nio.ByteBuffer: java.nio.ByteBuffer position(int)>(i0);

        return;
    }

    public byte[] toArray()
    {
        jdk.internal.jimage.ImageStream r0;
        java.nio.ByteBuffer $r1, $r3;
        byte[] $r2, $r4;
        int $i0;

        r0 := @this: jdk.internal.jimage.ImageStream;

        $r1 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $r2 = virtualinvoke $r1.<java.nio.ByteBuffer: byte[] array()>();

        $r3 = r0.<jdk.internal.jimage.ImageStream: java.nio.ByteBuffer buffer>;

        $i0 = virtualinvoke $r3.<java.nio.ByteBuffer: int position()>();

        $r4 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>($r2, $i0);

        return $r4;
    }
}
