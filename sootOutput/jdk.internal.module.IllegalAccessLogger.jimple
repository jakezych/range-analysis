public final class jdk.internal.module.IllegalAccessLogger extends java.lang.Object
{
    private static final jdk.internal.access.JavaLangAccess JLA;
    private static volatile jdk.internal.module.IllegalAccessLogger logger;
    private final jdk.internal.module.IllegalAccessLogger$Mode mode;
    private final java.io.PrintStream warningStream;
    private final java.util.Map moduleToConcealedPackages;
    private final java.util.Map moduleToExportedPackages;
    private final java.util.Map callerToUsages;

    private void <init>(jdk.internal.module.IllegalAccessLogger$Mode, java.io.PrintStream, java.util.Map, java.util.Map)
    {
        jdk.internal.module.IllegalAccessLogger r0;
        java.util.WeakHashMap $r1;
        jdk.internal.module.IllegalAccessLogger$Mode r2;
        java.io.PrintStream r3;
        java.util.Map r4, r5;

        r0 := @this: jdk.internal.module.IllegalAccessLogger;

        r2 := @parameter0: jdk.internal.module.IllegalAccessLogger$Mode;

        r3 := @parameter1: java.io.PrintStream;

        r4 := @parameter2: java.util.Map;

        r5 := @parameter3: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.WeakHashMap;

        specialinvoke $r1.<java.util.WeakHashMap: void <init>()>();

        r0.<jdk.internal.module.IllegalAccessLogger: java.util.Map callerToUsages> = $r1;

        r0.<jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger$Mode mode> = r2;

        r0.<jdk.internal.module.IllegalAccessLogger: java.io.PrintStream warningStream> = r3;

        r0.<jdk.internal.module.IllegalAccessLogger: java.util.Map moduleToConcealedPackages> = r4;

        r0.<jdk.internal.module.IllegalAccessLogger: java.util.Map moduleToExportedPackages> = r5;

        return;
    }

    public static jdk.internal.module.IllegalAccessLogger illegalAccessLogger()
    {
        jdk.internal.module.IllegalAccessLogger $r0;

        $r0 = <jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger logger>;

        return $r0;
    }

    public boolean isExportedForIllegalAccess(java.lang.Module, java.lang.String)
    {
        jdk.internal.module.IllegalAccessLogger r0;
        java.lang.Module r1;
        java.util.Map $r2;
        java.lang.Object $r3;
        java.util.Set r4;
        java.lang.String r5;
        boolean $z0;

        r0 := @this: jdk.internal.module.IllegalAccessLogger;

        r1 := @parameter0: java.lang.Module;

        r5 := @parameter1: java.lang.String;

        $r2 = r0.<jdk.internal.module.IllegalAccessLogger: java.util.Map moduleToConcealedPackages>;

        $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (java.util.Set) $r3;

        if r4 == null goto label1;

        $z0 = interfaceinvoke r4.<java.util.Set: boolean contains(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isOpenForIllegalAccess(java.lang.Module, java.lang.String)
    {
        jdk.internal.module.IllegalAccessLogger r0;
        java.lang.Module r1;
        java.lang.String r2;
        boolean $z0, $z1;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.util.Set r5;

        r0 := @this: jdk.internal.module.IllegalAccessLogger;

        r1 := @parameter0: java.lang.Module;

        r2 := @parameter1: java.lang.String;

        $z0 = virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger: boolean isExportedForIllegalAccess(java.lang.Module,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        $r3 = r0.<jdk.internal.module.IllegalAccessLogger: java.util.Map moduleToExportedPackages>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r5 = (java.util.Set) $r4;

        if r5 == null goto label2;

        $z1 = interfaceinvoke r5.<java.util.Set: boolean contains(java.lang.Object)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public void logIfExportedForIllegalAccess(java.lang.Class, java.lang.Class, java.util.function.Supplier)
    {
        java.lang.Class r0, r4;
        java.lang.Module r1, r5;
        java.lang.String r2, $r9;
        jdk.internal.module.IllegalAccessLogger r3;
        boolean $z0, $z1;
        jdk.internal.access.JavaLangAccess $r6;
        java.util.function.Supplier r7;
        java.lang.Object $r8;

        r3 := @this: jdk.internal.module.IllegalAccessLogger;

        r4 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.util.function.Supplier;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: boolean isExportedForIllegalAccess(java.lang.Module,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.Module getModule()>();

        $r6 = <jdk.internal.module.IllegalAccessLogger: jdk.internal.access.JavaLangAccess JLA>;

        $z1 = interfaceinvoke $r6.<jdk.internal.access.JavaLangAccess: boolean isReflectivelyExported(java.lang.Module,java.lang.String,java.lang.Module)>(r1, r2, r5);

        if $z1 != 0 goto label1;

        $r8 = interfaceinvoke r7.<java.util.function.Supplier: java.lang.Object get()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: void log(java.lang.Class,java.lang.String)>(r4, $r9);

     label1:
        return;
    }

    public void logIfOpenedForIllegalAccess(java.lang.Class, java.lang.Class, java.util.function.Supplier)
    {
        java.lang.Class r0, r4;
        java.lang.Module r1, r5;
        java.lang.String r2, $r9;
        jdk.internal.module.IllegalAccessLogger r3;
        boolean $z0, $z1;
        jdk.internal.access.JavaLangAccess $r6;
        java.util.function.Supplier r7;
        java.lang.Object $r8;

        r3 := @this: jdk.internal.module.IllegalAccessLogger;

        r4 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

        r7 := @parameter2: java.util.function.Supplier;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: boolean isOpenForIllegalAccess(java.lang.Module,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label1;

        r5 = virtualinvoke r4.<java.lang.Class: java.lang.Module getModule()>();

        $r6 = <jdk.internal.module.IllegalAccessLogger: jdk.internal.access.JavaLangAccess JLA>;

        $z1 = interfaceinvoke $r6.<jdk.internal.access.JavaLangAccess: boolean isReflectivelyOpened(java.lang.Module,java.lang.String,java.lang.Module)>(r1, r2, r5);

        if $z1 != 0 goto label1;

        $r8 = interfaceinvoke r7.<java.util.function.Supplier: java.lang.Object get()>();

        $r9 = (java.lang.String) $r8;

        virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: void log(java.lang.Class,java.lang.String)>(r4, $r9);

     label1:
        return;
    }

    public void logIfOpenedForIllegalAccess(java.lang.invoke.MethodHandles$Lookup, java.lang.Class)
    {
        java.lang.Class r0, r5;
        java.lang.Module r1, r6;
        java.lang.String r2, $r10, $r15, r17;
        jdk.internal.module.IllegalAccessLogger r3;
        boolean $z0, $z1;
        java.lang.invoke.MethodHandles$Lookup r4;
        jdk.internal.access.JavaLangAccess $r7;
        java.net.URL r8;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r14;
        java.util.function.Supplier $r16;

        r3 := @this: jdk.internal.module.IllegalAccessLogger;

        r4 := @parameter0: java.lang.invoke.MethodHandles$Lookup;

        r0 := @parameter1: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: boolean isOpenForIllegalAccess(java.lang.Module,java.lang.String)>(r1, r2);

        if $z0 == 0 goto label3;

        r5 = virtualinvoke r4.<java.lang.invoke.MethodHandles$Lookup: java.lang.Class lookupClass()>();

        r6 = virtualinvoke r5.<java.lang.Class: java.lang.Module getModule()>();

        $r7 = <jdk.internal.module.IllegalAccessLogger: jdk.internal.access.JavaLangAccess JLA>;

        $z1 = interfaceinvoke $r7.<jdk.internal.access.JavaLangAccess: boolean isReflectivelyOpened(java.lang.Module,java.lang.String,java.lang.Module)>(r1, r2, r6);

        if $z1 != 0 goto label3;

        r8 = virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: java.net.URL codeSource(java.lang.Class)>(r5);

        if r8 != null goto label1;

        r17 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        goto label2;

     label1:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke r5.<java.lang.Class: java.lang.String getName()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        $r15 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r16 = staticinvoke <jdk.internal.module.IllegalAccessLogger$lambda_logIfOpenedForIllegalAccess_0__22: java.util.function.Supplier bootstrap$(java.lang.String,java.lang.Class)>(r17, r0);

        virtualinvoke r3.<jdk.internal.module.IllegalAccessLogger: void log(java.lang.Class,java.lang.String,java.util.function.Supplier)>(r5, $r15, $r16);

     label3:
        return;
    }

    private void log(java.lang.Class, java.lang.String)
    {
        jdk.internal.module.IllegalAccessLogger r0;
        java.lang.Class r1;
        java.lang.String r2;
        java.util.function.Supplier $r3;

        r0 := @this: jdk.internal.module.IllegalAccessLogger;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        $r3 = staticinvoke <jdk.internal.module.IllegalAccessLogger$lambda_log_1__23: java.util.function.Supplier bootstrap$(jdk.internal.module.IllegalAccessLogger,java.lang.Class,java.lang.String)>(r0, r1, r2);

        virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger: void log(java.lang.Class,java.lang.String,java.util.function.Supplier)>(r1, r2, $r3);

        return;
    }

    private void log(java.lang.Class, java.lang.String, java.util.function.Supplier)
    {
        jdk.internal.module.IllegalAccessLogger r0, $r21;
        jdk.internal.module.IllegalAccessLogger$Mode $r1, $r2, $r16, $r17;
        java.lang.StackWalker $r3;
        java.util.function.Function $r4, $r11;
        java.lang.Object $r5, $r12, $r15;
        jdk.internal.module.IllegalAccessLogger$Usage $r6;
        java.lang.String r7, $r23, r32;
        int $i0;
        java.lang.Class r9;
        java.util.Map $r10;
        jdk.internal.module.IllegalAccessLogger$Usages $r13;
        boolean z0;
        java.util.function.Supplier r14;
        java.io.PrintStream $r18, $r22;
        java.lang.StringBuilder $r19;
        java.util.function.Consumer $r20;
        java.lang.Throwable $r24, $r25;
        java.util.List r28;

        r0 := @this: jdk.internal.module.IllegalAccessLogger;

        r9 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.String;

        r14 := @parameter2: java.util.function.Supplier;

        $r2 = r0.<jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger$Mode mode>;

        $r1 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode ONESHOT>;

        if $r2 != $r1 goto label08;

        entermonitor class "Ljdk/internal/module/IllegalAccessLogger;";

     label01:
        $r21 = <jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger logger>;

        if $r21 != null goto label03;

        exitmonitor class "Ljdk/internal/module/IllegalAccessLogger;";

     label02:
        return;

     label03:
        <jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger logger> = null;

        exitmonitor class "Ljdk/internal/module/IllegalAccessLogger;";

     label04:
        goto label07;

     label05:
        $r25 := @caughtexception;

        exitmonitor class "Ljdk/internal/module/IllegalAccessLogger;";

     label06:
        throw $r25;

     label07:
        $r22 = r0.<jdk.internal.module.IllegalAccessLogger: java.io.PrintStream warningStream>;

        $r23 = virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger: java.lang.String loudWarning(java.lang.Class,java.util.function.Supplier)>(r9, r14);

        virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r23);

        return;

     label08:
        $r3 = <jdk.internal.module.IllegalAccessLogger$StackWalkerHolder: java.lang.StackWalker INSTANCE>;

        $r4 = staticinvoke <jdk.internal.module.IllegalAccessLogger$lambda_log_2__24: java.util.function.Function bootstrap$(jdk.internal.module.IllegalAccessLogger)>(r0);

        $r5 = virtualinvoke $r3.<java.lang.StackWalker: java.lang.Object walk(java.util.function.Function)>($r4);

        r28 = (java.util.List) $r5;

        $r6 = new jdk.internal.module.IllegalAccessLogger$Usage;

        $i0 = virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger: int hash(java.util.List)>(r28);

        specialinvoke $r6.<jdk.internal.module.IllegalAccessLogger$Usage: void <init>(java.lang.String,int)>(r7, $i0);

        entermonitor r0;

     label09:
        $r10 = r0.<jdk.internal.module.IllegalAccessLogger: java.util.Map callerToUsages>;

        $r11 = staticinvoke <jdk.internal.module.IllegalAccessLogger$lambda_log_3__25: java.util.function.Function bootstrap$()>();

        $r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object computeIfAbsent(java.lang.Object,java.util.function.Function)>(r9, $r11);

        $r13 = (jdk.internal.module.IllegalAccessLogger$Usages) $r12;

        z0 = virtualinvoke $r13.<jdk.internal.module.IllegalAccessLogger$Usages: boolean add(jdk.internal.module.IllegalAccessLogger$Usage)>($r6);

        exitmonitor r0;

     label10:
        goto label13;

     label11:
        $r24 := @caughtexception;

        exitmonitor r0;

     label12:
        throw $r24;

     label13:
        if z0 == 0 goto label15;

        $r15 = interfaceinvoke r14.<java.util.function.Supplier: java.lang.Object get()>();

        r32 = (java.lang.String) $r15;

        $r17 = r0.<jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger$Mode mode>;

        $r16 = <jdk.internal.module.IllegalAccessLogger$Mode: jdk.internal.module.IllegalAccessLogger$Mode DEBUG>;

        if $r17 != $r16 goto label14;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>(r32);

        $r20 = staticinvoke <jdk.internal.module.IllegalAccessLogger$lambda_log_4__26: java.util.function.Consumer bootstrap$(java.lang.StringBuilder)>($r19);

        interfaceinvoke r28.<java.util.List: void forEach(java.util.function.Consumer)>($r20);

        r32 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

     label14:
        $r18 = r0.<jdk.internal.module.IllegalAccessLogger: java.io.PrintStream warningStream>;

        virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>(r32);

     label15:
        return;

        catch java.lang.Throwable from label01 to label02 with label05;
        catch java.lang.Throwable from label03 to label04 with label05;
        catch java.lang.Throwable from label05 to label06 with label05;
        catch java.lang.Throwable from label09 to label10 with label11;
        catch java.lang.Throwable from label11 to label12 with label11;
    }

    private java.net.URL codeSource(java.lang.Class)
    {
        java.lang.Class r0;
        java.security.PrivilegedAction r2;
        java.lang.Object $r3;
        java.security.ProtectionDomain $r4;
        java.security.CodeSource r5;
        jdk.internal.module.IllegalAccessLogger r6;
        java.net.URL $r7;

        r6 := @this: jdk.internal.module.IllegalAccessLogger;

        r0 := @parameter0: java.lang.Class;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r2 = staticinvoke <jdk.internal.module.IllegalAccessLogger$getProtectionDomain__27: java.security.PrivilegedAction bootstrap$(java.lang.Class)>(r0);

        $r3 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(r2);

        $r4 = (java.security.ProtectionDomain) $r3;

        r5 = virtualinvoke $r4.<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>();

        if r5 == null goto label1;

        $r7 = virtualinvoke r5.<java.security.CodeSource: java.net.URL getLocation()>();

        goto label2;

     label1:
        $r7 = null;

     label2:
        return $r7;
    }

    private java.lang.String loudWarning(java.lang.Class, java.util.function.Supplier)
    {
        java.util.StringJoiner $r0;
        java.lang.String $r1, $r11, $r13, $r17;
        java.util.function.Supplier r4;
        java.lang.Object $r5;
        java.lang.CharSequence $r6;
        java.lang.StringBuilder $r8, $r9, $r12;
        java.lang.Class r10;
        jdk.internal.module.IllegalAccessLogger r18;

        r18 := @this: jdk.internal.module.IllegalAccessLogger;

        r10 := @parameter0: java.lang.Class;

        r4 := @parameter1: java.util.function.Supplier;

        $r0 = new java.util.StringJoiner;

        $r1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        specialinvoke $r0.<java.util.StringJoiner: void <init>(java.lang.CharSequence)>($r1);

        virtualinvoke $r0.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("WARNING: An illegal reflective access operation has occurred");

        $r5 = interfaceinvoke r4.<java.util.function.Supplier: java.lang.Object get()>();

        $r6 = (java.lang.CharSequence) $r5;

        virtualinvoke $r0.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r6);

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Please consider reporting this to the maintainers of ");

        $r11 = virtualinvoke r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r0.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>($r13);

        virtualinvoke $r0.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations");

        virtualinvoke $r0.<java.util.StringJoiner: java.util.StringJoiner add(java.lang.CharSequence)>("WARNING: All illegal access operations will be denied in a future release");

        $r17 = virtualinvoke $r0.<java.util.StringJoiner: java.lang.String toString()>();

        return $r17;
    }

    public boolean isJavaBase(java.lang.StackWalker$StackFrame)
    {
        java.lang.StackWalker$StackFrame r0;
        java.lang.Class $r1;
        java.lang.Module r2;
        java.lang.String $r3, $r4;
        boolean $z0;
        jdk.internal.module.IllegalAccessLogger r5;

        r5 := @this: jdk.internal.module.IllegalAccessLogger;

        r0 := @parameter0: java.lang.StackWalker$StackFrame;

        $r1 = interfaceinvoke r0.<java.lang.StackWalker$StackFrame: java.lang.Class getDeclaringClass()>();

        r2 = virtualinvoke $r1.<java.lang.Class: java.lang.Module getModule()>();

        $r3 = "java.base";

        $r4 = virtualinvoke r2.<java.lang.Module: java.lang.String getName()>();

        $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>($r4);

        return $z0;
    }

    private int hash(java.util.List)
    {
        java.util.List r0;
        java.util.Iterator r1;
        boolean $z0;
        java.lang.Object $r2;
        java.lang.StackWalker$StackFrame r3;
        java.lang.Object[] $r4;
        int $i0, $i1, $i2, i3;
        java.lang.Class $r5;
        java.lang.String $r6;
        java.lang.Integer $r7;
        jdk.internal.module.IllegalAccessLogger r8;

        r8 := @this: jdk.internal.module.IllegalAccessLogger;

        r0 := @parameter0: java.util.List;

        i3 = 0;

        r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>();

     label1:
        $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label2;

        $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.lang.StackWalker$StackFrame) $r2;

        $i0 = 31 * i3;

        $r4 = newarray (java.lang.Object)[3];

        $r5 = interfaceinvoke r3.<java.lang.StackWalker$StackFrame: java.lang.Class getDeclaringClass()>();

        $r4[0] = $r5;

        $r6 = interfaceinvoke r3.<java.lang.StackWalker$StackFrame: java.lang.String getMethodName()>();

        $r4[1] = $r6;

        $i1 = interfaceinvoke r3.<java.lang.StackWalker$StackFrame: int getByteCodeIndex()>();

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        $r4[2] = $r7;

        $i2 = staticinvoke <java.util.Objects: int hash(java.lang.Object[])>($r4);

        i3 = $i0 + $i2;

        goto label1;

     label2:
        return i3;
    }

    public static void lambda$log$4(java.lang.StringBuilder, java.lang.StackWalker$StackFrame)
    {
        java.lang.StringBuilder r0, $r2, $r3, $r4, $r6;
        java.lang.String $r1, $r7;
        java.lang.StackWalker$StackFrame r5;

        r0 := @parameter0: java.lang.StringBuilder;

        r5 := @parameter1: java.lang.StackWalker$StackFrame;

        $r1 = staticinvoke <java.lang.System: java.lang.String lineSeparator()>();

        $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tat ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        return;
    }

    public static jdk.internal.module.IllegalAccessLogger$Usages lambda$log$3(java.lang.Class)
    {
        jdk.internal.module.IllegalAccessLogger$Usages $r0;
        java.lang.Class r1;

        r1 := @parameter0: java.lang.Class;

        $r0 = new jdk.internal.module.IllegalAccessLogger$Usages;

        specialinvoke $r0.<jdk.internal.module.IllegalAccessLogger$Usages: void <init>()>();

        return $r0;
    }

    public java.util.List lambda$log$2(java.util.stream.Stream)
    {
        java.util.stream.Stream r0, $r3, $r4;
        jdk.internal.module.IllegalAccessLogger r1;
        java.util.function.Predicate $r2;
        java.util.stream.Collector $r5;
        java.lang.Object $r6;
        java.util.List $r7;

        r1 := @this: jdk.internal.module.IllegalAccessLogger;

        r0 := @parameter0: java.util.stream.Stream;

        $r2 = staticinvoke <jdk.internal.module.IllegalAccessLogger$isJavaBase__28: java.util.function.Predicate bootstrap$(jdk.internal.module.IllegalAccessLogger)>(r1);

        $r3 = interfaceinvoke r0.<java.util.stream.Stream: java.util.stream.Stream dropWhile(java.util.function.Predicate)>($r2);

        $r4 = interfaceinvoke $r3.<java.util.stream.Stream: java.util.stream.Stream limit(long)>(32L);

        $r5 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toList()>();

        $r6 = interfaceinvoke $r4.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r5);

        $r7 = (java.util.List) $r6;

        return $r7;
    }

    public java.lang.String lambda$log$1(java.lang.Class, java.lang.String)
    {
        jdk.internal.module.IllegalAccessLogger r0;
        java.lang.Class r1;
        java.net.URL r2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r12, $r13, $r14;
        java.lang.String r7, $r9, r15;

        r0 := @this: jdk.internal.module.IllegalAccessLogger;

        r1 := @parameter0: java.lang.Class;

        r7 := @parameter1: java.lang.String;

        r2 = virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger: java.net.URL codeSource(java.lang.Class)>(r1);

        r15 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>();

        if r2 == null goto label1;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>()>();

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Illegal reflective access by ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public static java.lang.String lambda$logIfOpenedForIllegalAccess$0(java.lang.String, java.lang.Class)
    {
        java.lang.StringBuilder $r0, $r1, $r3, $r4, $r6;
        java.lang.String r2, $r7;
        java.lang.Class r5;

        r2 := @parameter0: java.lang.String;

        r5 := @parameter1: java.lang.Class;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WARNING: Illegal reflective access using Lookup on ");

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaLangAccess $r0;

        $r0 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangAccess getJavaLangAccess()>();

        <jdk.internal.module.IllegalAccessLogger: jdk.internal.access.JavaLangAccess JLA> = $r0;

        return;
    }
}
