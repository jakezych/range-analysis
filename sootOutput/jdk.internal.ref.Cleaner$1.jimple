class jdk.internal.ref.Cleaner$1 extends java.lang.Object implements java.security.PrivilegedAction
{
    final java.lang.Throwable val$x;
    final jdk.internal.ref.Cleaner this$0;

    void <init>(jdk.internal.ref.Cleaner, java.lang.Throwable)
    {
        jdk.internal.ref.Cleaner$1 r0;
        jdk.internal.ref.Cleaner r1;
        java.lang.Throwable r2;

        r0 := @this: jdk.internal.ref.Cleaner$1;

        r1 := @parameter0: jdk.internal.ref.Cleaner;

        r2 := @parameter1: java.lang.Throwable;

        r0.<jdk.internal.ref.Cleaner$1: jdk.internal.ref.Cleaner this$0> = r1;

        r0.<jdk.internal.ref.Cleaner$1: java.lang.Throwable val$x> = r2;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public java.lang.Void run()
    {
        java.io.PrintStream $r0;
        java.lang.Error $r1;
        jdk.internal.ref.Cleaner$1 r2;
        java.lang.Throwable $r3;

        r2 := @this: jdk.internal.ref.Cleaner$1;

        $r0 = <java.lang.System: java.io.PrintStream err>;

        if $r0 == null goto label1;

        $r1 = new java.lang.Error;

        $r3 = r2.<jdk.internal.ref.Cleaner$1: java.lang.Throwable val$x>;

        specialinvoke $r1.<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>("Cleaner terminated abnormally", $r3);

        virtualinvoke $r1.<java.lang.Error: void printStackTrace()>();

     label1:
        staticinvoke <java.lang.System: void exit(int)>(1);

        return null;
    }

    public volatile java.lang.Object run()
    {
        jdk.internal.ref.Cleaner$1 r0;
        java.lang.Void $r1;

        r0 := @this: jdk.internal.ref.Cleaner$1;

        $r1 = virtualinvoke r0.<jdk.internal.ref.Cleaner$1: java.lang.Void run()>();

        return $r1;
    }
}
