public class jdk.internal.math.FDBigInteger extends java.lang.Object
{
    static final int[] SMALL_5_POW;
    static final long[] LONG_5_POW;
    private static final int MAX_FIVE_POW;
    private static final jdk.internal.math.FDBigInteger[] POW_5_CACHE;
    public static final jdk.internal.math.FDBigInteger ZERO;
    private static java.lang.Object[] archivedCaches;
    private static final long LONG_MASK;
    private int[] data;
    private int offset;
    private int nWords;
    private boolean isImmutable;
    static final boolean $assertionsDisabled;

    private void <init>(int[], int)
    {
        jdk.internal.math.FDBigInteger r0;
        int[] r1;
        int i0, $i1;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.math.FDBigInteger: boolean isImmutable> = 0;

        r0.<jdk.internal.math.FDBigInteger: int[] data> = r1;

        r0.<jdk.internal.math.FDBigInteger: int offset> = i0;

        $i1 = lengthof r1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i1;

        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

        return;
    }

    public void <init>(long, char[], int, int)
    {
        jdk.internal.math.FDBigInteger r0;
        int i0, $i1, $i2, i3, $i5, $i7, i8, i9, $i10, $i12, $i13, $i14, $i16, $i18, $i19, i20, i21, i22, i23, i24;
        int[] $r1, $r2, $r3;
        long l4, $l6;
        char[] r4;
        char $c11, $c15, $c17;

        r0 := @this: jdk.internal.math.FDBigInteger;

        l4 := @parameter0: long;

        r4 := @parameter1: char[];

        i8 := @parameter2: int;

        i0 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.math.FDBigInteger: boolean isImmutable> = 0;

        $i1 = i0 + 8;

        $i2 = $i1 / 9;

        i3 = staticinvoke <java.lang.Math: int max(int,int)>($i2, 2);

        $r1 = newarray (int)[i3];

        r0.<jdk.internal.math.FDBigInteger: int[] data> = $r1;

        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i5 = (int) l4;

        $r2[0] = $i5;

        $r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $l6 = l4 >>> 32;

        $i7 = (int) $l6;

        $r3[1] = $i7;

        r0.<jdk.internal.math.FDBigInteger: int offset> = 0;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = 2;

        i20 = i8;

        i9 = i0 - 5;

     label1:
        if i20 >= i9 goto label4;

        i21 = i20 + 5;

        $i14 = i20;

        i20 = i20 + 1;

        $c15 = r4[$i14];

        i22 = $c15 - 48;

     label2:
        if i20 >= i21 goto label3;

        $i18 = 10 * i22;

        $i16 = i20;

        i20 = i20 + 1;

        $c17 = r4[$i16];

        $i19 = $i18 + $c17;

        i22 = $i19 - 48;

        goto label2;

     label3:
        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void multAddMe(int,int)>(100000, i22);

        goto label1;

     label4:
        i23 = 1;

        i24 = 0;

     label5:
        if i20 >= i0 goto label6;

        $i12 = 10 * i24;

        $i10 = i20;

        i20 = i20 + 1;

        $c11 = r4[$i10];

        $i13 = $i12 + $c11;

        i24 = $i13 - 48;

        i23 = i23 * 10;

        goto label5;

     label6:
        if i23 == 1 goto label7;

        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void multAddMe(int,int)>(i23, i24);

     label7:
        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

        return;
    }

    public static jdk.internal.math.FDBigInteger valueOfPow52(int, int)
    {
        int i0, i1, $i2, i3, i4, i5, $i6, $i7, $i8;
        jdk.internal.math.FDBigInteger $r0, $r2, $r3, $r5, $r7, $r9;
        int[] $r1, $r4, $r6, $r8;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 == 0 goto label4;

        if i1 != 0 goto label1;

        $r9 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5pow(int)>(i0);

        return $r9;

     label1:
        $r1 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i2 = lengthof $r1;

        if i0 >= $i2 goto label3;

        $r4 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        i3 = $r4[i0];

        i4 = i1 >> 5;

        i5 = i1 & 31;

        if i5 != 0 goto label2;

        $r7 = new jdk.internal.math.FDBigInteger;

        $r8 = newarray (int)[1];

        $r8[0] = i3;

        specialinvoke $r7.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r8, i4);

        return $r7;

     label2:
        $r5 = new jdk.internal.math.FDBigInteger;

        $r6 = newarray (int)[2];

        $i6 = i3 << i5;

        $r6[0] = $i6;

        $i7 = 32 - i5;

        $i8 = i3 >>> $i7;

        $r6[1] = $i8;

        specialinvoke $r5.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r6, i4);

        return $r5;

     label3:
        $r2 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5pow(int)>(i0);

        $r3 = virtualinvoke $r2.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger leftShift(int)>(i1);

        return $r3;

     label4:
        $r0 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger valueOfPow2(int)>(i1);

        return $r0;
    }

    public static jdk.internal.math.FDBigInteger valueOfMulPow52(long, int, int)
    {
        boolean $z0, $z1;
        long l0, $l1, $l23, $l24, $l25, $l26, $l27, $l28, $l29, l44, l45, l47, l48;
        int i2, i3, i4, i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, i30, $i31, $i32, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, i42, i43, i46, i49, $i52;
        jdk.internal.math.FDBigInteger $r0, $r2, $r4, $r10, $r12, r16, $r18, $r19;
        int[] $r1, $r3, $r5, $r6, $r7, $r8, $r9, $r11, $r13, r17;
        java.lang.AssertionError $r14, $r15;
        byte $b50, $b51;

        l0 := @parameter0: long;

        i5 := @parameter1: int;

        i2 := @parameter2: int;

        $z0 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        if i5 >= 0 goto label01;

        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>(int)>(i5);

        throw $r15;

     label01:
        $z1 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z1 != 0 goto label02;

        if i2 >= 0 goto label02;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(int)>(i2);

        throw $r14;

     label02:
        i42 = (int) l0;

        $l1 = l0 >>> 32;

        i43 = (int) $l1;

        i3 = i2 >> 5;

        i4 = i2 & 31;

        if i5 == 0 goto label11;

        $r6 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i13 = lengthof $r6;

        if i5 >= $i13 goto label04;

        $r9 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i22 = $r9[i5];

        $l23 = (long) $i22;

        l44 = $l23 & 4294967295L;

        $l24 = (long) i42;

        $l25 = $l24 & 4294967295L;

        l45 = $l25 * l44;

        i46 = (int) l45;

        l47 = l45 >>> 32;

        $l26 = (long) i43;

        $l27 = $l26 & 4294967295L;

        $l28 = $l27 * l44;

        l48 = $l28 + l47;

        i49 = (int) l48;

        $l29 = l48 >>> 32;

        i30 = (int) $l29;

        if i4 != 0 goto label03;

        $r12 = new jdk.internal.math.FDBigInteger;

        $r13 = newarray (int)[3];

        $r13[0] = i46;

        $r13[1] = i49;

        $r13[2] = i30;

        specialinvoke $r12.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r13, i3);

        return $r12;

     label03:
        $r10 = new jdk.internal.math.FDBigInteger;

        $r11 = newarray (int)[4];

        $i31 = i46 << i4;

        $r11[0] = $i31;

        $i34 = i49 << i4;

        $i32 = 32 - i4;

        $i33 = i46 >>> $i32;

        $i35 = $i34 | $i33;

        $r11[1] = $i35;

        $i38 = i30 << i4;

        $i36 = 32 - i4;

        $i37 = i49 >>> $i36;

        $i39 = $i38 | $i37;

        $r11[2] = $i39;

        $i40 = 32 - i4;

        $i41 = i30 >>> $i40;

        $r11[3] = $i41;

        specialinvoke $r10.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r11, i3);

        return $r10;

     label04:
        r16 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5pow(int)>(i5);

        if i43 != 0 goto label07;

        $i18 = r16.<jdk.internal.math.FDBigInteger: int nWords>;

        $i19 = $i18 + 1;

        if i2 == 0 goto label05;

        $b50 = 1;

        goto label06;

     label05:
        $b50 = 0;

     label06:
        $i20 = $i19 + $b50;

        r17 = newarray (int)[$i20];

        $r8 = r16.<jdk.internal.math.FDBigInteger: int[] data>;

        $i21 = r16.<jdk.internal.math.FDBigInteger: int nWords>;

        staticinvoke <jdk.internal.math.FDBigInteger: void mult(int[],int,int,int[])>($r8, $i21, i42, r17);

        goto label10;

     label07:
        $i14 = r16.<jdk.internal.math.FDBigInteger: int nWords>;

        $i15 = $i14 + 2;

        if i2 == 0 goto label08;

        $b51 = 1;

        goto label09;

     label08:
        $b51 = 0;

     label09:
        $i16 = $i15 + $b51;

        r17 = newarray (int)[$i16];

        $r7 = r16.<jdk.internal.math.FDBigInteger: int[] data>;

        $i17 = r16.<jdk.internal.math.FDBigInteger: int nWords>;

        staticinvoke <jdk.internal.math.FDBigInteger: void mult(int[],int,int,int,int[])>($r7, $i17, i42, i43, r17);

     label10:
        $r18 = new jdk.internal.math.FDBigInteger;

        $i52 = r16.<jdk.internal.math.FDBigInteger: int offset>;

        specialinvoke $r18.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r17, $i52);

        $r19 = virtualinvoke $r18.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger leftShift(int)>(i2);

        return $r19;

     label11:
        if i2 == 0 goto label13;

        if i4 != 0 goto label12;

        $r4 = new jdk.internal.math.FDBigInteger;

        $r5 = newarray (int)[2];

        $r5[0] = i42;

        $r5[1] = i43;

        specialinvoke $r4.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r5, i3);

        return $r4;

     label12:
        $r2 = new jdk.internal.math.FDBigInteger;

        $r3 = newarray (int)[3];

        $i6 = i42 << i4;

        $r3[0] = $i6;

        $i9 = i43 << i4;

        $i7 = 32 - i4;

        $i8 = i42 >>> $i7;

        $i10 = $i9 | $i8;

        $r3[1] = $i10;

        $i11 = 32 - i4;

        $i12 = i43 >>> $i11;

        $r3[2] = $i12;

        specialinvoke $r2.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r3, i3);

        return $r2;

     label13:
        $r0 = new jdk.internal.math.FDBigInteger;

        $r1 = newarray (int)[2];

        $r1[0] = i42;

        $r1[1] = i43;

        specialinvoke $r0.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r1, 0);

        return $r0;
    }

    private static jdk.internal.math.FDBigInteger valueOfPow2(int)
    {
        int i0, i1, i2, $i3;
        jdk.internal.math.FDBigInteger $r0;
        int[] $r1;

        i0 := @parameter0: int;

        i1 = i0 >> 5;

        i2 = i0 & 31;

        $r0 = new jdk.internal.math.FDBigInteger;

        $r1 = newarray (int)[1];

        $i3 = 1 << i2;

        $r1[0] = $i3;

        specialinvoke $r0.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r1, i1);

        return $r0;
    }

    private void trimLeadingZeros()
    {
        jdk.internal.math.FDBigInteger r0;
        int[] $r1, $r2;
        int $i0, $i1, $i2, i3, i4;

        r0 := @this: jdk.internal.math.FDBigInteger;

        i3 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i3 <= 0 goto label3;

        $r1 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i4 = i3 + -1;

        $i0 = $r1[i4];

        if $i0 != 0 goto label3;

     label1:
        if i4 <= 0 goto label2;

        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i1 = i4 - 1;

        $i2 = $r2[$i1];

        if $i2 != 0 goto label2;

        i4 = i4 + -1;

        goto label1;

     label2:
        r0.<jdk.internal.math.FDBigInteger: int nWords> = i4;

        if i4 != 0 goto label3;

        r0.<jdk.internal.math.FDBigInteger: int offset> = 0;

     label3:
        return;
    }

    public int getNormalizationBias()
    {
        jdk.internal.math.FDBigInteger r0;
        int $i0, $i1, $i2, $i3, i4, $i5;
        int[] $r1;
        java.lang.IllegalArgumentException $r2;

        r0 := @this: jdk.internal.math.FDBigInteger;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i0 != 0 goto label1;

        $r2 = new java.lang.IllegalArgumentException;

        specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Zero value cannot be normalized");

        throw $r2;

     label1:
        $r1 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i1 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i2 = $i1 - 1;

        $i3 = $r1[$i2];

        i4 = staticinvoke <java.lang.Integer: int numberOfLeadingZeros(int)>($i3);

        if i4 >= 4 goto label2;

        $i5 = 28 + i4;

        goto label3;

     label2:
        $i5 = i4 - 4;

     label3:
        return $i5;
    }

    private static void leftShift(int[], int, int[], int, int, int)
    {
        int i0, $i1, i2, $i3, i4, i5, i6, i7, i8;
        int[] r0, r1;

        r1 := @parameter0: int[];

        i4 := @parameter1: int;

        r0 := @parameter2: int[];

        i0 := @parameter3: int;

        i2 := @parameter4: int;

        i5 := @parameter5: int;

     label1:
        if i4 <= 0 goto label2;

        i6 = i5 << i0;

        $i1 = i4 - 1;

        i5 = r1[$i1];

        $i3 = i5 >>> i2;

        i7 = i6 | $i3;

        r0[i4] = i7;

        i4 = i4 + -1;

        goto label1;

     label2:
        i8 = i5 << i0;

        r0[0] = i8;

        return;
    }

    public jdk.internal.math.FDBigInteger leftShift(int)
    {
        int i0, $i1, i2, i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, i31, i32, i33, i34, i35, i36, i37, i38, i39, i40, i41, i42, i43, $i44, $i45;
        jdk.internal.math.FDBigInteger r0, $r14, $r15;
        boolean $z0;
        int[] $r1, $r2, r3, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r13, $r16, $r17, r18, r19;

        r0 := @this: jdk.internal.math.FDBigInteger;

        i0 := @parameter0: int;

        if i0 == 0 goto label01;

        $i1 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i1 != 0 goto label02;

     label01:
        return r0;

     label02:
        i2 = i0 >> 5;

        i3 = i0 & 31;

        $z0 = r0.<jdk.internal.math.FDBigInteger: boolean isImmutable>;

        if $z0 == 0 goto label06;

        if i3 != 0 goto label03;

        $r15 = new jdk.internal.math.FDBigInteger;

        $r16 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i28 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r17 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r16, $i28);

        $i29 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i30 = $i29 + i2;

        specialinvoke $r15.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r17, $i30);

        return $r15;

     label03:
        i31 = 32 - i3;

        $i21 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        i32 = $i21 - 1;

        $r12 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i33 = $r12[i32];

        i34 = i33 >>> i31;

        if i34 == 0 goto label04;

        $i25 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i26 = $i25 + 1;

        r18 = newarray (int)[$i26];

        $i27 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        r18[$i27] = i34;

        goto label05;

     label04:
        $i22 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        r18 = newarray (int)[$i22];

     label05:
        $r13 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        staticinvoke <jdk.internal.math.FDBigInteger: void leftShift(int[],int,int[],int,int,int)>($r13, i32, r18, i3, i31, i33);

        $r14 = new jdk.internal.math.FDBigInteger;

        $i23 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i24 = $i23 + i2;

        specialinvoke $r14.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r18, $i24);

        return $r14;

     label06:
        if i3 == 0 goto label13;

        i35 = 32 - i3;

        $r1 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i4 = $r1[0];

        $i5 = $i4 << i3;

        if $i5 != 0 goto label10;

        i36 = 0;

        $r7 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i37 = $r7[0];

     label07:
        $i13 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i14 = $i13 - 1;

        if i36 >= $i14 goto label08;

        i38 = i37 >>> i35;

        $r10 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i19 = i36 + 1;

        i37 = $r10[$i19];

        $i20 = i37 << i3;

        i39 = i38 | $i20;

        $r11 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $r11[i36] = i39;

        i36 = i36 + 1;

        goto label07;

     label08:
        i40 = i37 >>> i35;

        $r8 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $r8[i36] = i40;

        if i40 != 0 goto label09;

        $i17 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i18 = $i17 - 1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i18;

     label09:
        $i15 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i16 = $i15 + 1;

        r0.<jdk.internal.math.FDBigInteger: int offset> = $i16;

        goto label13;

     label10:
        $i6 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        i41 = $i6 - 1;

        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i42 = $r2[i41];

        i43 = i42 >>> i35;

        r19 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        if i43 == 0 goto label12;

        $i8 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i7 = lengthof $r4;

        if $i8 != $i7 goto label11;

        $i11 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i12 = $i11 + 1;

        $r5 = newarray (int)[$i12];

        r19 = $r5;

        r0.<jdk.internal.math.FDBigInteger: int[] data> = $r5;

     label11:
        $i9 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i10 = $i9 + 1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i10;

        r19[$i9] = i43;

     label12:
        staticinvoke <jdk.internal.math.FDBigInteger: void leftShift(int[],int,int[],int,int,int)>(r3, i41, r19, i3, i35, i42);

     label13:
        $i44 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i45 = $i44 + i2;

        r0.<jdk.internal.math.FDBigInteger: int offset> = $i45;

        return r0;
    }

    private int size()
    {
        jdk.internal.math.FDBigInteger r0;
        int $i0, $i1, $i2;

        r0 := @this: jdk.internal.math.FDBigInteger;

        $i1 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i2 = $i1 + $i0;

        return $i2;
    }

    public int quoRemIteration(jdk.internal.math.FDBigInteger) throws java.lang.IllegalArgumentException
    {
        boolean $z0, $z1, $z2, $z3;
        jdk.internal.math.FDBigInteger r0, r1;
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i14, $i15, $i16, $i17, i18, $i20, $i23, $i25, $i30, $i31, $i32, $i33, i34, i37, i38, i40;
        int[] $r2, $r3, $r4, $r5, r7, r8, $r11, $r12, $r13;
        long $l5, $l9, $l10, $l11, l12, $l24, $l26, $l27, $l28, $l29, l35, l36, l39;
        byte $b13, $b19, $b21, $b22;
        java.lang.AssertionError $r6, $r9, $r14;
        java.lang.IllegalArgumentException $r10;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r1 := @parameter0: jdk.internal.math.FDBigInteger;

        $z0 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $z3 = r0.<jdk.internal.math.FDBigInteger: boolean isImmutable>;

        if $z3 == 0 goto label01;

        $r14 = new java.lang.AssertionError;

        specialinvoke $r14.<java.lang.AssertionError: void <init>(java.lang.Object)>("cannot modify immutable value");

        throw $r14;

     label01:
        i0 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int size()>();

        i1 = virtualinvoke r1.<jdk.internal.math.FDBigInteger: int size()>();

        if i0 >= i1 goto label04;

        $r12 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i31 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r11 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i34 = staticinvoke <jdk.internal.math.FDBigInteger: int multAndCarryBy10(int[],int,int[])>($r12, $i31, $r11);

        if i34 == 0 goto label02;

        $r13 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i32 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i33 = $i32 + 1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i33;

        $r13[$i32] = i34;

        goto label03;

     label02:
        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

     label03:
        return 0;

     label04:
        if i0 <= i1 goto label05;

        $r10 = new java.lang.IllegalArgumentException;

        specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("disparate values");

        throw $r10;

     label05:
        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i2 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i3 = $i2 - 1;

        $i4 = $r2[$i3];

        $l5 = (long) $i4;

        $l11 = $l5 & 4294967295L;

        $r3 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        $i6 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        $i7 = $i6 - 1;

        $i8 = $r3[$i7];

        $l9 = (long) $i8;

        $l10 = $l9 & 4294967295L;

        l35 = $l11 / $l10;

        l12 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: long multDiffMe(long,jdk.internal.math.FDBigInteger)>(l35, r1);

        $b13 = l12 cmp 0L;

        if $b13 == 0 goto label10;

        l36 = 0L;

        $i17 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        $i16 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        i18 = $i17 - $i16;

        r7 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        r8 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

     label06:
        $b19 = l36 cmp 0L;

        if $b19 != 0 goto label10;

        i37 = 0;

        i38 = i18;

     label07:
        $i20 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i38 >= $i20 goto label08;

        $i23 = r8[i38];

        $l24 = (long) $i23;

        $l28 = $l24 & 4294967295L;

        $i25 = r7[i37];

        $l26 = (long) $i25;

        $l27 = $l26 & 4294967295L;

        $l29 = $l28 + $l27;

        l39 = l36 + $l29;

        $i30 = (int) l39;

        r8[i38] = $i30;

        l36 = l39 >>> 32;

        i37 = i37 + 1;

        i38 = i38 + 1;

        goto label07;

     label08:
        $z2 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z2 != 0 goto label09;

        $b21 = l36 cmp 0L;

        if $b21 == 0 goto label09;

        $b22 = l36 cmp 1L;

        if $b22 == 0 goto label09;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(long)>(l36);

        throw $r9;

     label09:
        l35 = l35 - 1L;

        goto label06;

     label10:
        $r5 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i14 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i40 = staticinvoke <jdk.internal.math.FDBigInteger: int multAndCarryBy10(int[],int,int[])>($r5, $i14, $r4);

        $z1 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z1 != 0 goto label11;

        if i40 == 0 goto label11;

        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>(int)>(i40);

        throw $r6;

     label11:
        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

        $i15 = (int) l35;

        return $i15;
    }

    public jdk.internal.math.FDBigInteger multBy10()
    {
        jdk.internal.math.FDBigInteger r0, $r11;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, i17, $i18, $i19;
        boolean $z0;
        int[] $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, r12, $r13;

        r0 := @this: jdk.internal.math.FDBigInteger;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $z0 = r0.<jdk.internal.math.FDBigInteger: boolean isImmutable>;

        if $z0 == 0 goto label2;

        $i11 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i12 = $i11 + 1;

        r12 = newarray (int)[$i12];

        $i14 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r10 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i13 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i15 = staticinvoke <jdk.internal.math.FDBigInteger: int multAndCarryBy10(int[],int,int[])>($r10, $i13, r12);

        r12[$i14] = $i15;

        $r11 = new jdk.internal.math.FDBigInteger;

        $i16 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        specialinvoke $r11.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r12, $i16);

        return $r11;

     label2:
        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i1 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r1 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i17 = staticinvoke <jdk.internal.math.FDBigInteger: int multAndCarryBy10(int[],int,int[])>($r2, $i1, $r1);

        if i17 == 0 goto label5;

        $i3 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i2 = lengthof $r3;

        if $i3 != $i2 goto label4;

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i4 = $r4[0];

        if $i4 != 0 goto label3;

        $r8 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $r9 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i7 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i8 = $i7 - 1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i8;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r8, 1, $r9, 0, $i8);

        $i9 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i10 = $i9 + 1;

        r0.<jdk.internal.math.FDBigInteger: int offset> = $i10;

        goto label4;

     label3:
        $r6 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $r5 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i5 = lengthof $r5;

        $i6 = $i5 + 1;

        $r7 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>($r6, $i6);

        r0.<jdk.internal.math.FDBigInteger: int[] data> = $r7;

     label4:
        $r13 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i18 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i19 = $i18 + 1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i19;

        $r13[$i18] = i17;

        goto label6;

     label5:
        virtualinvoke r0.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

     label6:
        return r0;
    }

    public jdk.internal.math.FDBigInteger multByPow52(int, int)
    {
        jdk.internal.math.FDBigInteger r0, r2, $r5, $r8, r9, $r12;
        int $i0, i1, i2, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16, $i17, $i18, $i19;
        int[] $r1, $r3, $r4, $r6, $r7, r10, r11;
        byte $b20;

        r0 := @this: jdk.internal.math.FDBigInteger;

        i1 := @parameter0: int;

        i2 := @parameter1: int;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        r9 = r0;

        if i1 == 0 goto label5;

        if i2 == 0 goto label2;

        $b20 = 1;

        goto label3;

     label2:
        $b20 = 0;

     label3:
        $r1 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i4 = lengthof $r1;

        if i1 >= $i4 goto label4;

        $i14 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i15 = $i14 + 1;

        $i16 = $i15 + $b20;

        r10 = newarray (int)[$i16];

        $r7 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i18 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r6 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i17 = $r6[i1];

        staticinvoke <jdk.internal.math.FDBigInteger: void mult(int[],int,int,int[])>($r7, $i18, $i17, r10);

        $r8 = new jdk.internal.math.FDBigInteger;

        $i19 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        specialinvoke $r8.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r10, $i19);

        r9 = $r8;

        goto label5;

     label4:
        r2 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5pow(int)>(i1);

        $i5 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i6 = virtualinvoke r2.<jdk.internal.math.FDBigInteger: int size()>();

        $i7 = $i5 + $i6;

        $i8 = $i7 + $b20;

        r11 = newarray (int)[$i8];

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i10 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r3 = r2.<jdk.internal.math.FDBigInteger: int[] data>;

        $i9 = r2.<jdk.internal.math.FDBigInteger: int nWords>;

        staticinvoke <jdk.internal.math.FDBigInteger: void mult(int[],int,int[],int,int[])>($r4, $i10, $r3, $i9, r11);

        $r5 = new jdk.internal.math.FDBigInteger;

        $i12 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i11 = r2.<jdk.internal.math.FDBigInteger: int offset>;

        $i13 = $i12 + $i11;

        specialinvoke $r5.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r11, $i13);

        r9 = $r5;

     label5:
        $r12 = virtualinvoke r9.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger leftShift(int)>(i2);

        return $r12;
    }

    private static void mult(int[], int, int[], int, int[])
    {
        int i0, $i1, i4, $i5, $i6, $i7, $i8, $i10, $i16, $i17, i18, i20;
        int[] r0, r1, r2;
        long $l2, l3, $l9, $l11, $l12, $l13, $l14, $l15, l19, l21;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r2 := @parameter2: int[];

        i4 := @parameter3: int;

        r1 := @parameter4: int[];

        i18 = 0;

     label1:
        if i18 >= i0 goto label4;

        $i1 = r0[i18];

        $l2 = (long) $i1;

        l3 = $l2 & 4294967295L;

        l19 = 0L;

        i20 = 0;

     label2:
        if i20 >= i4 goto label3;

        $i7 = i18 + i20;

        $i8 = r1[$i7];

        $l9 = (long) $i8;

        $l14 = $l9 & 4294967295L;

        $i10 = r2[i20];

        $l11 = (long) $i10;

        $l12 = $l11 & 4294967295L;

        $l13 = l3 * $l12;

        $l15 = $l14 + $l13;

        l21 = l19 + $l15;

        $i17 = i18 + i20;

        $i16 = (int) l21;

        r1[$i17] = $i16;

        l19 = l21 >>> 32;

        i20 = i20 + 1;

        goto label2;

     label3:
        $i6 = i18 + i4;

        $i5 = (int) l19;

        r1[$i6] = $i5;

        i18 = i18 + 1;

        goto label1;

     label4:
        return;
    }

    public jdk.internal.math.FDBigInteger leftInplaceSub(jdk.internal.math.FDBigInteger)
    {
        boolean $z0, $z1, $z2;
        jdk.internal.math.FDBigInteger r0, r1, $r5, r10;
        int $i0, $i1, i2, $i4, $i7, $i8, $i10, $i16, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, i26, i27, i28, i30, i31;
        int[] r2, r4, $r6, $r8, r11;
        byte $b3, $b32;
        java.lang.AssertionError $r3, $r9;
        long $l5, $l6, $l9, $l11, $l12, $l13, $l14, l15, l29, l33;
        java.lang.Object $r7;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r1 := @parameter0: jdk.internal.math.FDBigInteger;

        $z0 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i24 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int size()>();

        $i25 = virtualinvoke r1.<jdk.internal.math.FDBigInteger: int size()>();

        if $i24 >= $i25 goto label01;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("result should be positive");

        throw $r9;

     label01:
        $z1 = r0.<jdk.internal.math.FDBigInteger: boolean isImmutable>;

        if $z1 == 0 goto label02;

        $r5 = new jdk.internal.math.FDBigInteger;

        $r6 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (int[]) $r7;

        $i23 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        specialinvoke $r5.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r8, $i23);

        r10 = $r5;

        goto label03;

     label02:
        r10 = r0;

     label03:
        $i1 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        $i0 = r10.<jdk.internal.math.FDBigInteger: int offset>;

        i26 = $i1 - $i0;

        r2 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        r11 = r10.<jdk.internal.math.FDBigInteger: int[] data>;

        i2 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        i27 = r10.<jdk.internal.math.FDBigInteger: int nWords>;

        if i26 >= 0 goto label06;

        i28 = i27 - i26;

        $i17 = lengthof r11;

        if i28 >= $i17 goto label04;

        $i20 = neg i26;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r11, $i20, i27);

        $i21 = neg i26;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r11, 0, $i21, 0);

        goto label05;

     label04:
        r4 = newarray (int)[i28];

        $i18 = neg i26;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r4, $i18, i27);

        r11 = r4;

        r10.<jdk.internal.math.FDBigInteger: int[] data> = r4;

     label05:
        $i19 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        r10.<jdk.internal.math.FDBigInteger: int offset> = $i19;

        i27 = i28;

        r10.<jdk.internal.math.FDBigInteger: int nWords> = i28;

        i26 = 0;

     label06:
        l29 = 0L;

        i30 = i26;

        i31 = 0;

     label07:
        if i31 >= i2 goto label08;

        if i30 >= i27 goto label08;

        $i8 = r11[i30];

        $l9 = (long) $i8;

        $l13 = $l9 & 4294967295L;

        $i10 = r2[i31];

        $l11 = (long) $i10;

        $l12 = $l11 & 4294967295L;

        $l14 = $l13 - $l12;

        l15 = $l14 + l29;

        $i16 = (int) l15;

        r11[i30] = $i16;

        l29 = l15 >> 32;

        i31 = i31 + 1;

        i30 = i30 + 1;

        goto label07;

     label08:
        $b32 = l29 cmp 0L;

        if $b32 == 0 goto label09;

        if i30 >= i27 goto label09;

        $i4 = r11[i30];

        $l5 = (long) $i4;

        $l6 = $l5 & 4294967295L;

        l33 = $l6 + l29;

        $i7 = (int) l33;

        r11[i30] = $i7;

        l29 = l33 >> 32;

        i30 = i30 + 1;

        goto label08;

     label09:
        $z2 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z2 != 0 goto label10;

        $b3 = l29 cmp 0L;

        if $b3 == 0 goto label10;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(long)>(l29);

        throw $r3;

     label10:
        virtualinvoke r10.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

        return r10;
    }

    public jdk.internal.math.FDBigInteger rightInplaceSub(jdk.internal.math.FDBigInteger)
    {
        boolean $z0, $z1, $z2;
        jdk.internal.math.FDBigInteger r0, $r5, r10;
        int $i0, $i1, i2, $i3, $i5, $i7, $i13, $i14, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, i27, i28, i31, i32, i35;
        int[] r2, $r4, $r6, $r8, r11, r12;
        byte $b4;
        java.lang.AssertionError $r3, $r9;
        long $l6, $l8, $l9, $l10, $l11, l12, $l15, $l16, $l17, l33, l34;
        java.lang.Object $r7;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r10 := @parameter0: jdk.internal.math.FDBigInteger;

        $z0 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label01;

        $i25 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int size()>();

        $i26 = virtualinvoke r10.<jdk.internal.math.FDBigInteger: int size()>();

        if $i25 >= $i26 goto label01;

        $r9 = new java.lang.AssertionError;

        specialinvoke $r9.<java.lang.AssertionError: void <init>(java.lang.Object)>("result should be positive");

        throw $r9;

     label01:
        $z1 = r10.<jdk.internal.math.FDBigInteger: boolean isImmutable>;

        if $z1 == 0 goto label02;

        $r5 = new jdk.internal.math.FDBigInteger;

        $r6 = r10.<jdk.internal.math.FDBigInteger: int[] data>;

        $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.Object clone()>();

        $r8 = (int[]) $r7;

        $i24 = r10.<jdk.internal.math.FDBigInteger: int offset>;

        specialinvoke $r5.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r8, $i24);

        r10 = $r5;

     label02:
        $i1 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i0 = r10.<jdk.internal.math.FDBigInteger: int offset>;

        i27 = $i1 - $i0;

        r11 = r10.<jdk.internal.math.FDBigInteger: int[] data>;

        r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i28 = r10.<jdk.internal.math.FDBigInteger: int nWords>;

        i2 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i27 >= 0 goto label05;

        $i19 = lengthof r11;

        if i2 >= $i19 goto label03;

        $i22 = neg i27;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r11, $i22, i28);

        $i23 = neg i27;

        staticinvoke <java.util.Arrays: void fill(int[],int,int,int)>(r11, 0, $i23, 0);

        goto label04;

     label03:
        r12 = newarray (int)[i2];

        $i20 = neg i27;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r11, 0, r12, $i20, i28);

        r11 = r12;

        r10.<jdk.internal.math.FDBigInteger: int[] data> = r12;

     label04:
        $i21 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        r10.<jdk.internal.math.FDBigInteger: int offset> = $i21;

        i27 = 0;

        goto label06;

     label05:
        i31 = i2 + i27;

        $i3 = lengthof r11;

        if i31 < $i3 goto label06;

        $r4 = staticinvoke <java.util.Arrays: int[] copyOf(int[],int)>(r11, i31);

        r11 = $r4;

        r10.<jdk.internal.math.FDBigInteger: int[] data> = $r4;

     label06:
        i32 = 0;

        l33 = 0L;

     label07:
        if i32 >= i27 goto label08;

        $i14 = r11[i32];

        $l15 = (long) $i14;

        $l16 = $l15 & 4294967295L;

        $l17 = 0L - $l16;

        l34 = $l17 + l33;

        $i18 = (int) l34;

        r11[i32] = $i18;

        l33 = l34 >> 32;

        i32 = i32 + 1;

        goto label07;

     label08:
        i35 = 0;

     label09:
        if i35 >= i2 goto label10;

        $i5 = r2[i35];

        $l6 = (long) $i5;

        $l10 = $l6 & 4294967295L;

        $i7 = r11[i32];

        $l8 = (long) $i7;

        $l9 = $l8 & 4294967295L;

        $l11 = $l10 - $l9;

        l12 = $l11 + l33;

        $i13 = (int) l12;

        r11[i32] = $i13;

        l33 = l12 >> 32;

        i32 = i32 + 1;

        i35 = i35 + 1;

        goto label09;

     label10:
        $z2 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z2 != 0 goto label11;

        $b4 = l33 cmp 0L;

        if $b4 == 0 goto label11;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(long)>(l33);

        throw $r3;

     label11:
        r10.<jdk.internal.math.FDBigInteger: int nWords> = i32;

        virtualinvoke r10.<jdk.internal.math.FDBigInteger: void trimLeadingZeros()>();

        return r10;
    }

    private static int checkZeroTail(int[], int)
    {
        int[] r0;
        int $i0, i1;

        r0 := @parameter0: int[];

        i1 := @parameter1: int;

     label1:
        if i1 <= 0 goto label2;

        i1 = i1 + -1;

        $i0 = r0[i1];

        if $i0 == 0 goto label1;

        return 1;

     label2:
        return 0;
    }

    public int 'cmp'(jdk.internal.math.FDBigInteger)
    {
        jdk.internal.math.FDBigInteger r0, r1;
        int $i0, $i1, i2, $i3, $i4, i5, $i6, $i7, $i8, i9, i10, i16, i17;
        int[] $r2, $r3, $r4, $r5;
        long $l11, $l12, $l13, $l14;
        byte $b15, $b18;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r1 := @parameter0: jdk.internal.math.FDBigInteger;

        $i1 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        i2 = $i1 + $i0;

        $i4 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        $i3 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        i5 = $i4 + $i3;

        if i2 <= i5 goto label1;

        return 1;

     label1:
        if i2 >= i5 goto label2;

        return -1;

     label2:
        i16 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        i17 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

     label3:
        if i16 <= 0 goto label7;

        if i17 <= 0 goto label7;

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i16 = i16 + -1;

        i9 = $r4[i16];

        $r5 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        i17 = i17 + -1;

        i10 = $r5[i17];

        if i9 == i10 goto label6;

        $l11 = (long) i9;

        $l14 = $l11 & 4294967295L;

        $l12 = (long) i10;

        $l13 = $l12 & 4294967295L;

        $b15 = $l14 cmp $l13;

        if $b15 >= 0 goto label4;

        $b18 = -1;

        goto label5;

     label4:
        $b18 = 1;

     label5:
        return $b18;

     label6:
        goto label3;

     label7:
        if i16 <= 0 goto label8;

        $r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i8 = staticinvoke <jdk.internal.math.FDBigInteger: int checkZeroTail(int[],int)>($r3, i16);

        return $i8;

     label8:
        if i17 <= 0 goto label9;

        $r2 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        $i6 = staticinvoke <jdk.internal.math.FDBigInteger: int checkZeroTail(int[],int)>($r2, i17);

        $i7 = neg $i6;

        return $i7;

     label9:
        return 0;
    }

    public int cmpPow52(int, int)
    {
        int i0, i1, $i2, i3, i4, $i5, $i6, i7, $i8, $i9, $i10, $i11, i12, i13, $i14, $i15, $i16;
        jdk.internal.math.FDBigInteger r0, $r1, $r2;
        int[] $r3, $r4;
        long $l17, $l18, $l19, $l20;
        byte $b21, $b22;

        r0 := @this: jdk.internal.math.FDBigInteger;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        if i0 != 0 goto label6;

        i3 = i1 >> 5;

        i4 = i1 & 31;

        $i6 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i5 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        i7 = $i6 + $i5;

        $i8 = i3 + 1;

        if i7 <= $i8 goto label1;

        return 1;

     label1:
        $i9 = i3 + 1;

        if i7 >= $i9 goto label2;

        return -1;

     label2:
        $r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i10 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i11 = $i10 - 1;

        i12 = $r3[$i11];

        i13 = 1 << i4;

        if i12 == i13 goto label5;

        $l17 = (long) i12;

        $l20 = $l17 & 4294967295L;

        $l18 = (long) i13;

        $l19 = $l18 & 4294967295L;

        $b21 = $l20 cmp $l19;

        if $b21 >= 0 goto label3;

        $b22 = -1;

        goto label4;

     label3:
        $b22 = 1;

     label4:
        return $b22;

     label5:
        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i14 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i15 = $i14 - 1;

        $i16 = staticinvoke <jdk.internal.math.FDBigInteger: int checkZeroTail(int[],int)>($r4, $i15);

        return $i16;

     label6:
        $r1 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5pow(int)>(i0);

        $r2 = virtualinvoke $r1.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger leftShift(int)>(i1);

        $i2 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int 'cmp'(jdk.internal.math.FDBigInteger)>($r2);

        return $i2;
    }

    public int addAndCmp(jdk.internal.math.FDBigInteger, jdk.internal.math.FDBigInteger)
    {
        jdk.internal.math.FDBigInteger r0, r1, r2, r7, r8, $r9;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i10, $i11, $i12, $i13, $i21, $i22, $i23, $i28, $i29, $i30, $i33, i34, i35, $i41;
        int[] $r3, $r4, $r5, $r6;
        long $l7, $l8, $l14, $l16, $l18, $l19, $l24, $l26, $l31, $l32, l37, l38, l39, l40;
        byte $b9, $b15, $b17, $b20, $b25, $b27, $b36;

        r2 := @this: jdk.internal.math.FDBigInteger;

        r0 := @parameter0: jdk.internal.math.FDBigInteger;

        r1 := @parameter1: jdk.internal.math.FDBigInteger;

        i0 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int size()>();

        i1 = virtualinvoke r1.<jdk.internal.math.FDBigInteger: int size()>();

        if i0 < i1 goto label01;

        r7 = r0;

        r8 = r1;

        i34 = i0;

        i35 = i1;

        goto label02;

     label01:
        r7 = r1;

        r8 = r0;

        i34 = i1;

        i35 = i0;

     label02:
        i2 = virtualinvoke r2.<jdk.internal.math.FDBigInteger: int size()>();

        if i34 != 0 goto label05;

        if i2 != 0 goto label03;

        $b36 = 0;

        goto label04;

     label03:
        $b36 = 1;

     label04:
        return $b36;

     label05:
        if i35 != 0 goto label06;

        $i33 = virtualinvoke r2.<jdk.internal.math.FDBigInteger: int 'cmp'(jdk.internal.math.FDBigInteger)>(r7);

        return $i33;

     label06:
        if i34 <= i2 goto label07;

        return -1;

     label07:
        $i3 = i34 + 1;

        if $i3 >= i2 goto label08;

        return 1;

     label08:
        $r3 = r7.<jdk.internal.math.FDBigInteger: int[] data>;

        $i4 = r7.<jdk.internal.math.FDBigInteger: int nWords>;

        $i5 = $i4 - 1;

        $i6 = $r3[$i5];

        $l7 = (long) $i6;

        l37 = $l7 & 4294967295L;

        if i35 != i34 goto label09;

        $r6 = r8.<jdk.internal.math.FDBigInteger: int[] data>;

        $i28 = r8.<jdk.internal.math.FDBigInteger: int nWords>;

        $i29 = $i28 - 1;

        $i30 = $r6[$i29];

        $l31 = (long) $i30;

        $l32 = $l31 & 4294967295L;

        l37 = l37 + $l32;

     label09:
        $l8 = l37 >>> 32;

        $b9 = $l8 cmp 0L;

        if $b9 != 0 goto label13;

        $l18 = l37 + 1L;

        $l19 = $l18 >>> 32;

        $b20 = $l19 cmp 0L;

        if $b20 != 0 goto label16;

        if i34 >= i2 goto label10;

        return 1;

     label10:
        $r5 = r2.<jdk.internal.math.FDBigInteger: int[] data>;

        $i21 = r2.<jdk.internal.math.FDBigInteger: int nWords>;

        $i22 = $i21 - 1;

        $i23 = $r5[$i22];

        $l24 = (long) $i23;

        l38 = $l24 & 4294967295L;

        $b25 = l38 cmp l37;

        if $b25 >= 0 goto label11;

        return -1;

     label11:
        $l26 = l37 + 1L;

        $b27 = l38 cmp $l26;

        if $b27 <= 0 goto label12;

        return 1;

     label12:
        goto label16;

     label13:
        $i10 = i34 + 1;

        if $i10 <= i2 goto label14;

        return -1;

     label14:
        l39 = l37 >>> 32;

        $r4 = r2.<jdk.internal.math.FDBigInteger: int[] data>;

        $i11 = r2.<jdk.internal.math.FDBigInteger: int nWords>;

        $i12 = $i11 - 1;

        $i13 = $r4[$i12];

        $l14 = (long) $i13;

        l40 = $l14 & 4294967295L;

        $b15 = l40 cmp l39;

        if $b15 >= 0 goto label15;

        return -1;

     label15:
        $l16 = l39 + 1L;

        $b17 = l40 cmp $l16;

        if $b17 <= 0 goto label16;

        return 1;

     label16:
        $r9 = virtualinvoke r7.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger add(jdk.internal.math.FDBigInteger)>(r8);

        $i41 = virtualinvoke r2.<jdk.internal.math.FDBigInteger: int 'cmp'(jdk.internal.math.FDBigInteger)>($r9);

        return $i41;
    }

    public void makeImmutable()
    {
        jdk.internal.math.FDBigInteger r0;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r0.<jdk.internal.math.FDBigInteger: boolean isImmutable> = 1;

        return;
    }

    private jdk.internal.math.FDBigInteger mult(int)
    {
        jdk.internal.math.FDBigInteger r0, $r3;
        int $i0, $i1, $i2, i3, $i4, $i5;
        int[] r1, $r2;

        r0 := @this: jdk.internal.math.FDBigInteger;

        i3 := @parameter0: int;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i2 = $i1 + 1;

        r1 = newarray (int)[$i2];

        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i4 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        staticinvoke <jdk.internal.math.FDBigInteger: void mult(int[],int,int,int[])>($r2, $i4, i3, r1);

        $r3 = new jdk.internal.math.FDBigInteger;

        $i5 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        specialinvoke $r3.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r1, $i5);

        return $r3;
    }

    private jdk.internal.math.FDBigInteger mult(jdk.internal.math.FDBigInteger)
    {
        jdk.internal.math.FDBigInteger r0, r1, $r5, $r7, $r9;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        int[] r2, $r3, $r4, $r6, $r8;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r1 := @parameter0: jdk.internal.math.FDBigInteger;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i0 != 0 goto label1;

        return r0;

     label1:
        $i1 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int size()>();

        if $i1 != 1 goto label2;

        $r8 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i13 = $r8[0];

        $r9 = virtualinvoke r1.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger mult(int)>($i13);

        return $r9;

     label2:
        $i2 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i2 != 0 goto label3;

        return r1;

     label3:
        $i3 = virtualinvoke r1.<jdk.internal.math.FDBigInteger: int size()>();

        if $i3 != 1 goto label4;

        $r6 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        $i12 = $r6[0];

        $r7 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger mult(int)>($i12);

        return $r7;

     label4:
        $i5 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i4 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        $i6 = $i5 + $i4;

        r2 = newarray (int)[$i6];

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i8 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $r3 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        $i7 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        staticinvoke <jdk.internal.math.FDBigInteger: void mult(int[],int,int[],int,int[])>($r4, $i8, $r3, $i7, r2);

        $r5 = new jdk.internal.math.FDBigInteger;

        $i10 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i9 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        $i11 = $i10 + $i9;

        specialinvoke $r5.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r2, $i11);

        return $r5;
    }

    private jdk.internal.math.FDBigInteger add(jdk.internal.math.FDBigInteger)
    {
        jdk.internal.math.FDBigInteger r0, r1, $r3, r7, r8;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, $i13, $i14, $i16, $i17, $i18, $i19, i21, i22, i23, $i30;
        int[] r2, $r4, $r5, $r6;
        long $l8, $l10, $l15, $l20, l24, $l25, $l26, $l27, $l28, l29, $l31, l32;

        r0 := @this: jdk.internal.math.FDBigInteger;

        r1 := @parameter0: jdk.internal.math.FDBigInteger;

        i0 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: int size()>();

        i1 = virtualinvoke r1.<jdk.internal.math.FDBigInteger: int size()>();

        if i0 < i1 goto label01;

        r7 = r0;

        i21 = i0;

        r8 = r1;

        i22 = i1;

        goto label02;

     label01:
        r7 = r1;

        i21 = i1;

        r8 = r0;

        i22 = i0;

     label02:
        $i2 = i21 + 1;

        r2 = newarray (int)[$i2];

        i23 = 0;

        l24 = 0L;

     label03:
        if i23 >= i22 goto label08;

        $l25 = l24;

        $i11 = r7.<jdk.internal.math.FDBigInteger: int offset>;

        if i23 >= $i11 goto label04;

        $l26 = 0L;

        goto label05;

     label04:
        $r5 = r7.<jdk.internal.math.FDBigInteger: int[] data>;

        $i12 = r7.<jdk.internal.math.FDBigInteger: int offset>;

        $i13 = i23 - $i12;

        $i14 = $r5[$i13];

        $l15 = (long) $i14;

        $l26 = $l15 & 4294967295L;

     label05:
        $i16 = r8.<jdk.internal.math.FDBigInteger: int offset>;

        if i23 >= $i16 goto label06;

        $l27 = 0L;

        goto label07;

     label06:
        $r6 = r8.<jdk.internal.math.FDBigInteger: int[] data>;

        $i17 = r8.<jdk.internal.math.FDBigInteger: int offset>;

        $i18 = i23 - $i17;

        $i19 = $r6[$i18];

        $l20 = (long) $i19;

        $l27 = $l20 & 4294967295L;

     label07:
        $l28 = $l26 + $l27;

        l29 = $l25 + $l28;

        $i30 = (int) l29;

        r2[i23] = $i30;

        l24 = l29 >> 32;

        i23 = i23 + 1;

        goto label03;

     label08:
        if i23 >= i21 goto label11;

        $l10 = l24;

        $i4 = r7.<jdk.internal.math.FDBigInteger: int offset>;

        if i23 >= $i4 goto label09;

        $l31 = 0L;

        goto label10;

     label09:
        $r4 = r7.<jdk.internal.math.FDBigInteger: int[] data>;

        $i5 = r7.<jdk.internal.math.FDBigInteger: int offset>;

        $i6 = i23 - $i5;

        $i7 = $r4[$i6];

        $l8 = (long) $i7;

        $l31 = $l8 & 4294967295L;

     label10:
        l32 = $l10 + $l31;

        $i9 = (int) l32;

        r2[i23] = $i9;

        l24 = l32 >> 32;

        i23 = i23 + 1;

        goto label08;

     label11:
        $i3 = (int) l24;

        r2[i21] = $i3;

        $r3 = new jdk.internal.math.FDBigInteger;

        specialinvoke $r3.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>(r2, 0);

        return $r3;
    }

    private void multAddMe(int, int)
    {
        int i0, $i3, i6, $i10, $i11, $i13, $i14, $i15, $i16, $i20, i23;
        long $l1, l2, $l4, $l5, $l7, $l8, $l9, $l17, $l18, $l19, l21, l22, l24;
        jdk.internal.math.FDBigInteger r0;
        int[] $r1, $r2, $r3, $r4, $r5;
        byte $b12;

        r0 := @this: jdk.internal.math.FDBigInteger;

        i0 := @parameter0: int;

        i6 := @parameter1: int;

        $l1 = (long) i0;

        l2 = $l1 & 4294967295L;

        $r1 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i3 = $r1[0];

        $l4 = (long) $i3;

        $l5 = $l4 & 4294967295L;

        $l9 = l2 * $l5;

        $l7 = (long) i6;

        $l8 = $l7 & 4294967295L;

        l21 = $l9 + $l8;

        $r2 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i10 = (int) l21;

        $r2[0] = $i10;

        l22 = l21 >>> 32;

        i23 = 1;

     label1:
        $i11 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i23 >= $i11 goto label2;

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i16 = $r4[i23];

        $l17 = (long) $i16;

        $l18 = $l17 & 4294967295L;

        $l19 = l2 * $l18;

        l24 = l22 + $l19;

        $r5 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i20 = (int) l24;

        $r5[i23] = $i20;

        l22 = l24 >>> 32;

        i23 = i23 + 1;

        goto label1;

     label2:
        $b12 = l22 cmp 0L;

        if $b12 == 0 goto label3;

        $r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i13 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i14 = $i13 + 1;

        r0.<jdk.internal.math.FDBigInteger: int nWords> = $i14;

        $i15 = (int) l22;

        $r3[$i13] = $i15;

     label3:
        return;
    }

    private long multDiffMe(long, jdk.internal.math.FDBigInteger)
    {
        long l0, $l11, $l13, $l14, $l15, $l16, $l17, $l21, $l22, $l23, $l27, $l29, $l30, $l31, $l32, $l33, l35, l39, l43, l46;
        byte $b1;
        jdk.internal.math.FDBigInteger r0, r1;
        int $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i12, $i18, $i19, $i20, $i24, $i25, $i26, $i28, $i34, i36, i37, i38, i40, i41, i42, i44, $i45;
        int[] r2, r3, r4, r5, r6;

        r1 := @this: jdk.internal.math.FDBigInteger;

        l0 := @parameter0: long;

        r0 := @parameter1: jdk.internal.math.FDBigInteger;

        l35 = 0L;

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label8;

        $i3 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i2 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        i36 = $i3 - $i2;

        if i36 < 0 goto label3;

        r3 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        r4 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

        i37 = 0;

        i38 = i36;

     label1:
        $i25 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i37 >= $i25 goto label2;

        $i26 = r4[i38];

        $l27 = (long) $i26;

        $l32 = $l27 & 4294967295L;

        $i28 = r3[i37];

        $l29 = (long) $i28;

        $l30 = $l29 & 4294967295L;

        $l31 = l0 * $l30;

        $l33 = $l32 - $l31;

        l39 = l35 + $l33;

        $i34 = (int) l39;

        r4[i38] = $i34;

        l35 = l39 >> 32;

        i37 = i37 + 1;

        i38 = i38 + 1;

        goto label1;

     label2:
        goto label8;

     label3:
        i40 = neg i36;

        $i4 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        $i5 = $i4 + i40;

        r5 = newarray (int)[$i5];

        i41 = 0;

        i42 = 0;

        r6 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

     label4:
        if i42 >= i40 goto label5;

        $i19 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i41 >= $i19 goto label5;

        $i20 = r6[i41];

        $l21 = (long) $i20;

        $l22 = $l21 & 4294967295L;

        $l23 = l0 * $l22;

        l43 = l35 - $l23;

        $i24 = (int) l43;

        r5[i42] = $i24;

        l35 = l43 >> 32;

        i41 = i41 + 1;

        i42 = i42 + 1;

        goto label4;

     label5:
        i44 = 0;

        r2 = r1.<jdk.internal.math.FDBigInteger: int[] data>;

     label6:
        $i45 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i41 >= $i45 goto label7;

        $i10 = r2[i44];

        $l11 = (long) $i10;

        $l16 = $l11 & 4294967295L;

        $i12 = r6[i41];

        $l13 = (long) $i12;

        $l14 = $l13 & 4294967295L;

        $l15 = l0 * $l14;

        $l17 = $l16 - $l15;

        l46 = l35 + $l17;

        $i18 = (int) l46;

        r5[i42] = $i18;

        l35 = l46 >> 32;

        i41 = i41 + 1;

        i44 = i44 + 1;

        i42 = i42 + 1;

        goto label6;

     label7:
        $i6 = r1.<jdk.internal.math.FDBigInteger: int nWords>;

        $i7 = $i6 + i40;

        r1.<jdk.internal.math.FDBigInteger: int nWords> = $i7;

        $i8 = r1.<jdk.internal.math.FDBigInteger: int offset>;

        $i9 = $i8 - i40;

        r1.<jdk.internal.math.FDBigInteger: int offset> = $i9;

        r1.<jdk.internal.math.FDBigInteger: int[] data> = r5;

     label8:
        return l35;
    }

    private static int multAndCarryBy10(int[], int, int[])
    {
        int i0, $i1, $i2, $i7, i9;
        int[] r0, r1;
        long $l3, $l4, $l5, l6, l8;

        r0 := @parameter0: int[];

        i0 := @parameter1: int;

        r1 := @parameter2: int[];

        l8 = 0L;

        i9 = 0;

     label1:
        if i9 >= i0 goto label2;

        $i2 = r0[i9];

        $l3 = (long) $i2;

        $l4 = $l3 & 4294967295L;

        $l5 = $l4 * 10L;

        l6 = $l5 + l8;

        $i7 = (int) l6;

        r1[i9] = $i7;

        l8 = l6 >>> 32;

        i9 = i9 + 1;

        goto label1;

     label2:
        $i1 = (int) l8;

        return $i1;
    }

    private static void mult(int[], int, int, int[])
    {
        int i0, i3, $i4, $i5, $i10, i12;
        long $l1, l2, $l6, $l7, $l8, l9, l11;
        int[] r0, r1;

        r1 := @parameter0: int[];

        i3 := @parameter1: int;

        i0 := @parameter2: int;

        r0 := @parameter3: int[];

        $l1 = (long) i0;

        l2 = $l1 & 4294967295L;

        l11 = 0L;

        i12 = 0;

     label1:
        if i12 >= i3 goto label2;

        $i5 = r1[i12];

        $l6 = (long) $i5;

        $l7 = $l6 & 4294967295L;

        $l8 = $l7 * l2;

        l9 = $l8 + l11;

        $i10 = (int) l9;

        r0[i12] = $i10;

        l11 = l9 >>> 32;

        i12 = i12 + 1;

        goto label1;

     label2:
        $i4 = (int) l11;

        r0[i3] = $i4;

        return;
    }

    private static void mult(int[], int, int, int, int[])
    {
        int i0, i2, $i3, i4, $i6, $i7, $i8, $i9, $i11, $i17, $i18, $i19, $i23, i26, i30;
        long $l1, $l5, $l10, $l12, $l13, $l14, $l15, $l16, $l20, $l21, $l22, l24, l25, l27, l28, l29, l31;
        int[] r0, r1;

        r1 := @parameter0: int[];

        i2 := @parameter1: int;

        i0 := @parameter2: int;

        i4 := @parameter3: int;

        r0 := @parameter4: int[];

        $l1 = (long) i0;

        l24 = $l1 & 4294967295L;

        l25 = 0L;

        i26 = 0;

     label1:
        if i26 >= i2 goto label2;

        $i19 = r1[i26];

        $l20 = (long) $i19;

        $l21 = $l20 & 4294967295L;

        $l22 = l24 * $l21;

        l27 = $l22 + l25;

        $i23 = (int) l27;

        r0[i26] = $i23;

        l25 = l27 >>> 32;

        i26 = i26 + 1;

        goto label1;

     label2:
        $i3 = (int) l25;

        r0[i2] = $i3;

        $l5 = (long) i4;

        l28 = $l5 & 4294967295L;

        l29 = 0L;

        i30 = 0;

     label3:
        if i30 >= i2 goto label4;

        $i8 = i30 + 1;

        $i9 = r0[$i8];

        $l10 = (long) $i9;

        $l15 = $l10 & 4294967295L;

        $i11 = r1[i30];

        $l12 = (long) $i11;

        $l13 = $l12 & 4294967295L;

        $l14 = l28 * $l13;

        $l16 = $l15 + $l14;

        l31 = $l16 + l29;

        $i18 = i30 + 1;

        $i17 = (int) l31;

        r0[$i18] = $i17;

        l29 = l31 >>> 32;

        i30 = i30 + 1;

        goto label3;

     label4:
        $i7 = i2 + 1;

        $i6 = (int) l29;

        r0[$i7] = $i6;

        return;
    }

    private static jdk.internal.math.FDBigInteger big5pow(int)
    {
        boolean $z0;
        int i0;
        jdk.internal.math.FDBigInteger $r0, $r2;
        jdk.internal.math.FDBigInteger[] $r1;
        java.lang.AssertionError $r3;

        i0 := @parameter0: int;

        $z0 = <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 >= 0 goto label1;

        $r3 = new java.lang.AssertionError;

        specialinvoke $r3.<java.lang.AssertionError: void <init>(int)>(i0);

        throw $r3;

     label1:
        if i0 >= 340 goto label2;

        $r1 = <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger[] POW_5_CACHE>;

        $r2 = $r1[i0];

        return $r2;

     label2:
        $r0 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5powRec(int)>(i0);

        return $r0;
    }

    private static jdk.internal.math.FDBigInteger big5powRec(int)
    {
        int i0, i1, i2, $i3, $i4;
        jdk.internal.math.FDBigInteger r0, $r2, $r3, $r5, $r7;
        int[] $r1, $r4;
        jdk.internal.math.FDBigInteger[] $r6;

        i0 := @parameter0: int;

        if i0 >= 340 goto label1;

        $r6 = <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger[] POW_5_CACHE>;

        $r7 = $r6[i0];

        return $r7;

     label1:
        i1 = i0 >> 1;

        i2 = i0 - i1;

        r0 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5powRec(int)>(i1);

        $r1 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i3 = lengthof $r1;

        if i2 >= $i3 goto label2;

        $r4 = <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW>;

        $i4 = $r4[i2];

        $r5 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger mult(int)>($i4);

        return $r5;

     label2:
        $r2 = staticinvoke <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger big5powRec(int)>(i2);

        $r3 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger mult(jdk.internal.math.FDBigInteger)>($r2);

        return $r3;
    }

    public java.lang.String toHexString()
    {
        jdk.internal.math.FDBigInteger r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, i7, i8, i9;
        java.lang.StringBuilder $r1;
        java.lang.String $r3, r6;
        int[] $r5;

        r0 := @this: jdk.internal.math.FDBigInteger;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if $i0 != 0 goto label1;

        return "0";

     label1:
        $r1 = new java.lang.StringBuilder;

        $i2 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i1 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i3 = $i2 + $i1;

        $i4 = $i3 * 8;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i4);

        $i5 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        i7 = $i5 - 1;

     label2:
        if i7 < 0 goto label5;

        $r5 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        $i6 = $r5[i7];

        r6 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i6);

        i8 = virtualinvoke r6.<java.lang.String: int length()>();

     label3:
        if i8 >= 8 goto label4;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48);

        i8 = i8 + 1;

        goto label3;

     label4:
        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        i7 = i7 + -1;

        goto label2;

     label5:
        i9 = r0.<jdk.internal.math.FDBigInteger: int offset>;

     label6:
        if i9 <= 0 goto label7;

        virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("00000000");

        i9 = i9 + -1;

        goto label6;

     label7:
        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public java.math.BigInteger toBigInteger()
    {
        jdk.internal.math.FDBigInteger r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, i6, $i7, $i8, $i9, $i11, $i12, $i13, $i14, $i15, $i17, $i18, $i19, $i20, $i21, $i23, $i24, $i25, $i26, $i27, $i29, i30;
        byte[] r1;
        java.math.BigInteger $r2, $r3;
        int[] $r4;
        byte $b10, $b16, $b22, $b28;

        r0 := @this: jdk.internal.math.FDBigInteger;

        $i0 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        $i1 = $i0 * 4;

        $i2 = $i1 + 1;

        r1 = newarray (byte)[$i2];

        i30 = 0;

     label1:
        $i3 = r0.<jdk.internal.math.FDBigInteger: int nWords>;

        if i30 >= $i3 goto label2;

        $r4 = r0.<jdk.internal.math.FDBigInteger: int[] data>;

        i6 = $r4[i30];

        $i8 = lengthof r1;

        $i7 = 4 * i30;

        $i9 = $i8 - $i7;

        $i11 = $i9 - 1;

        $b10 = (byte) i6;

        r1[$i11] = $b10;

        $i13 = lengthof r1;

        $i12 = 4 * i30;

        $i14 = $i13 - $i12;

        $i17 = $i14 - 2;

        $i15 = i6 >> 8;

        $b16 = (byte) $i15;

        r1[$i17] = $b16;

        $i19 = lengthof r1;

        $i18 = 4 * i30;

        $i20 = $i19 - $i18;

        $i23 = $i20 - 3;

        $i21 = i6 >> 16;

        $b22 = (byte) $i21;

        r1[$i23] = $b22;

        $i25 = lengthof r1;

        $i24 = 4 * i30;

        $i26 = $i25 - $i24;

        $i29 = $i26 - 4;

        $i27 = i6 >> 24;

        $b28 = (byte) $i27;

        r1[$i29] = $b28;

        i30 = i30 + 1;

        goto label1;

     label2:
        $r2 = new java.math.BigInteger;

        specialinvoke $r2.<java.math.BigInteger: void <init>(byte[])>(r1);

        $i4 = r0.<jdk.internal.math.FDBigInteger: int offset>;

        $i5 = $i4 * 32;

        $r3 = virtualinvoke $r2.<java.math.BigInteger: java.math.BigInteger shiftLeft(int)>($i5);

        return $r3;
    }

    public java.lang.String toString()
    {
        jdk.internal.math.FDBigInteger r0;
        java.math.BigInteger $r1;
        java.lang.String $r2;

        r0 := @this: jdk.internal.math.FDBigInteger;

        $r1 = virtualinvoke r0.<jdk.internal.math.FDBigInteger: java.math.BigInteger toBigInteger()>();

        $r2 = virtualinvoke $r1.<java.math.BigInteger: java.lang.String toString()>();

        return $r2;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        java.lang.Object $r1, $r3, $r5, $r7;
        int[] $r2, $r11, $r15, $r20;
        long[] $r4, $r9;
        jdk.internal.math.FDBigInteger[] $r6, r13;
        jdk.internal.math.FDBigInteger $r8, $r14, $r18, $r19, r23;
        int $i0, $i1, $i2, i3;
        java.lang.Object[] $r17, r21;

        <jdk.internal.math.FDBigInteger: long LONG_MASK> = 4294967295L;

        <jdk.internal.math.FDBigInteger: int MAX_FIVE_POW> = 340;

        $r0 = class "Ljdk/internal/math/FDBigInteger;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <jdk.internal.math.FDBigInteger: boolean $assertionsDisabled> = $z1;

        staticinvoke <jdk.internal.misc.VM: void initializeFromArchive(java.lang.Class)>(class "Ljdk/internal/math/FDBigInteger;");

        r21 = <jdk.internal.math.FDBigInteger: java.lang.Object[] archivedCaches>;

        if r21 != null goto label7;

        $r9 = newarray (long)[27];

        $r9[0] = 1L;

        $r9[1] = 5L;

        $r9[2] = 25L;

        $r9[3] = 125L;

        $r9[4] = 625L;

        $r9[5] = 3125L;

        $r9[6] = 15625L;

        $r9[7] = 78125L;

        $r9[8] = 390625L;

        $r9[9] = 1953125L;

        $r9[10] = 9765625L;

        $r9[11] = 48828125L;

        $r9[12] = 244140625L;

        $r9[13] = 1220703125L;

        $r9[14] = 6103515625L;

        $r9[15] = 30517578125L;

        $r9[16] = 152587890625L;

        $r9[17] = 762939453125L;

        $r9[18] = 3814697265625L;

        $r9[19] = 19073486328125L;

        $r9[20] = 95367431640625L;

        $r9[21] = 476837158203125L;

        $r9[22] = 2384185791015625L;

        $r9[23] = 11920928955078125L;

        $r9[24] = 59604644775390625L;

        $r9[25] = 298023223876953125L;

        $r9[26] = 1490116119384765625L;

        $r11 = newarray (int)[14];

        $r11[0] = 1;

        $r11[1] = 5;

        $r11[2] = 25;

        $r11[3] = 125;

        $r11[4] = 625;

        $r11[5] = 3125;

        $r11[6] = 15625;

        $r11[7] = 78125;

        $r11[8] = 390625;

        $r11[9] = 1953125;

        $r11[10] = 9765625;

        $r11[11] = 48828125;

        $r11[12] = 244140625;

        $r11[13] = 1220703125;

        r13 = newarray (jdk.internal.math.FDBigInteger)[340];

        i3 = 0;

     label3:
        $i0 = lengthof $r11;

        if i3 >= $i0 goto label4;

        $r19 = new jdk.internal.math.FDBigInteger;

        $r20 = newarray (int)[1];

        $i2 = $r11[i3];

        $r20[0] = $i2;

        specialinvoke $r19.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r20, 0);

        virtualinvoke $r19.<jdk.internal.math.FDBigInteger: void makeImmutable()>();

        r13[i3] = $r19;

        i3 = i3 + 1;

        goto label3;

     label4:
        $i1 = i3 - 1;

        r23 = r13[$i1];

     label5:
        if i3 >= 340 goto label6;

        $r18 = virtualinvoke r23.<jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger mult(int)>(5);

        r23 = $r18;

        r13[i3] = $r18;

        virtualinvoke $r18.<jdk.internal.math.FDBigInteger: void makeImmutable()>();

        i3 = i3 + 1;

        goto label5;

     label6:
        $r14 = new jdk.internal.math.FDBigInteger;

        $r15 = newarray (int)[0];

        specialinvoke $r14.<jdk.internal.math.FDBigInteger: void <init>(int[],int)>($r15, 0);

        virtualinvoke $r14.<jdk.internal.math.FDBigInteger: void makeImmutable()>();

        $r17 = newarray (java.lang.Object)[4];

        $r17[0] = $r11;

        $r17[1] = $r9;

        $r17[2] = r13;

        $r17[3] = $r14;

        r21 = $r17;

        <jdk.internal.math.FDBigInteger: java.lang.Object[] archivedCaches> = $r17;

     label7:
        $r1 = r21[0];

        $r2 = (int[]) $r1;

        <jdk.internal.math.FDBigInteger: int[] SMALL_5_POW> = $r2;

        $r3 = r21[1];

        $r4 = (long[]) $r3;

        <jdk.internal.math.FDBigInteger: long[] LONG_5_POW> = $r4;

        $r5 = r21[2];

        $r6 = (jdk.internal.math.FDBigInteger[]) $r5;

        <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger[] POW_5_CACHE> = $r6;

        $r7 = r21[3];

        $r8 = (jdk.internal.math.FDBigInteger) $r7;

        <jdk.internal.math.FDBigInteger: jdk.internal.math.FDBigInteger ZERO> = $r8;

        return;
    }
}
