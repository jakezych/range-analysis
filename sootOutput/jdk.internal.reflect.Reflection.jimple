public class jdk.internal.reflect.Reflection extends java.lang.Object
{
    private static volatile java.util.Map fieldFilterMap;
    private static volatile java.util.Map methodFilterMap;
    private static final java.lang.String WILDCARD;
    public static final java.util.Set ALL_MEMBERS;

    public void <init>()
    {
        jdk.internal.reflect.Reflection r0;

        r0 := @this: jdk.internal.reflect.Reflection;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static native java.lang.Class getCallerClass();

    public static native int getClassAccessFlags(java.lang.Class);

    public static void ensureMemberAccess(java.lang.Class, java.lang.Class, java.lang.Class, int) throws java.lang.IllegalAccessException
    {
        java.lang.Class r0, r1, r2;
        int i0;
        boolean $z0;
        java.lang.IllegalAccessException $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.Class;

        r2 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        $z0 = staticinvoke <jdk.internal.reflect.Reflection: boolean verifyMemberAccess(java.lang.Class,java.lang.Class,java.lang.Class,int)>(r0, r1, r2, i0);

        if $z0 != 0 goto label1;

        $r3 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.IllegalAccessException newIllegalAccessException(java.lang.Class,java.lang.Class,java.lang.Class,int)>(r0, r1, r2, i0);

        throw $r3;

     label1:
        return;
    }

    public static boolean verifyMemberAccess(java.lang.Class, java.lang.Class, java.lang.Class, int)
    {
        java.lang.Class r0, r2, r5;
        java.lang.Module $r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, z10, z11, z12;
        int $i0, i1;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r5 := @parameter2: java.lang.Class;

        i1 := @parameter3: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        if r0 != r2 goto label01;

        return 1;

     label01:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        $z0 = staticinvoke <jdk.internal.reflect.Reflection: boolean verifyModuleAccess(java.lang.Module,java.lang.Class)>($r4, r2);

        if $z0 != 0 goto label02;

        return 0;

     label02:
        z10 = 0;

        z11 = 0;

        $i0 = staticinvoke <jdk.internal.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>(r2);

        $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i0);

        if $z1 != 0 goto label03;

        z11 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(r0, r2);

        z10 = 1;

        if z11 != 0 goto label03;

        return 0;

     label03:
        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i1);

        if $z2 == 0 goto label04;

        return 1;

     label04:
        $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i1);

        if $z3 == 0 goto label05;

        $z9 = staticinvoke <jdk.internal.reflect.Reflection: boolean areNestMates(java.lang.Class,java.lang.Class)>(r0, r2);

        if $z9 == 0 goto label05;

        return 1;

     label05:
        z12 = 0;

        $z4 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i1);

        if $z4 == 0 goto label06;

        $z8 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(r0, r2);

        if $z8 == 0 goto label06;

        z12 = 1;

     label06:
        if z12 != 0 goto label08;

        $z7 = staticinvoke <java.lang.reflect.Modifier: boolean isPrivate(int)>(i1);

        if $z7 != 0 goto label08;

        if z10 != 0 goto label07;

        z11 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(r0, r2);

        z10 = 1;

     label07:
        if z11 == 0 goto label08;

        z12 = 1;

     label08:
        if z12 != 0 goto label09;

        return 0;

     label09:
        if r5 == null goto label11;

        $z5 = staticinvoke <java.lang.reflect.Modifier: boolean isProtected(int)>(i1);

        if $z5 == 0 goto label11;

        if r5 == r0 goto label11;

        if z10 != 0 goto label10;

        z11 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>(r0, r2);

     label10:
        if z11 != 0 goto label11;

        $z6 = staticinvoke <jdk.internal.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>(r5, r0);

        if $z6 != 0 goto label11;

        return 0;

     label11:
        return 1;
    }

    public static boolean verifyPublicMemberAccess(java.lang.Class, int)
    {
        java.lang.Class r0;
        java.lang.Module r1;
        int i0, $i1;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>(i0);

        if $z0 == 0 goto label1;

        $r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r1.<java.lang.Module: boolean isExported(java.lang.String)>($r2);

        if $z1 == 0 goto label1;

        $i1 = staticinvoke <jdk.internal.reflect.Reflection: int getClassAccessFlags(java.lang.Class)>(r0);

        $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i1);

        if $z2 == 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        return $z3;
    }

    public static boolean verifyModuleAccess(java.lang.Module, java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.Module r1, r2;
        java.lang.String r3;
        boolean $z0;

        r2 := @parameter0: java.lang.Module;

        r0 := @parameter1: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        if r2 != r1 goto label1;

        return 1;

     label1:
        r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $z0 = virtualinvoke r1.<java.lang.Module: boolean isExported(java.lang.String,java.lang.Module)>(r3, r2);

        return $z0;
    }

    private static boolean isSameClassPackage(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r2;
        java.lang.ClassLoader $r1, $r3;
        java.lang.String $r4, $r5;
        boolean $z0;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $r3 = virtualinvoke r2.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        if $r1 == $r3 goto label1;

        return 0;

     label1:
        $r4 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $r5 = virtualinvoke r2.<java.lang.Class: java.lang.String getPackageName()>();

        $z0 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r4, $r5);

        return $z0;
    }

    static boolean isSubclassOf(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;

        r1 := @parameter0: java.lang.Class;

        r0 := @parameter1: java.lang.Class;

     label1:
        if r1 == null goto label3;

        if r1 != r0 goto label2;

        return 1;

     label2:
        r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>();

        goto label1;

     label3:
        return 0;
    }

    public static synchronized void registerFieldsToFilter(java.lang.Class, java.util.Set)
    {
        java.lang.Class r0;
        java.util.Set r1;
        java.util.Map $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.Set;

        $r2 = <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap>;

        $r3 = staticinvoke <jdk.internal.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.util.Set)>($r2, r0, r1);

        <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap> = $r3;

        return;
    }

    public static synchronized void registerMethodsToFilter(java.lang.Class, java.util.Set)
    {
        java.lang.Class r0;
        java.util.Set r1;
        java.util.Map $r2, $r3;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.util.Set;

        $r2 = <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap>;

        $r3 = staticinvoke <jdk.internal.reflect.Reflection: java.util.Map registerFilter(java.util.Map,java.lang.Class,java.util.Set)>($r2, r0, r1);

        <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap> = $r3;

        return;
    }

    private static java.util.Map registerFilter(java.util.Map, java.lang.Class, java.util.Set)
    {
        java.lang.Class r0;
        java.lang.Object $r1;
        java.util.HashMap $r2;
        java.util.Set r3, $r4;
        java.lang.IllegalArgumentException $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        java.util.Map r11;

        r11 := @parameter0: java.util.Map;

        r0 := @parameter1: java.lang.Class;

        r3 := @parameter2: java.util.Set;

        $r1 = interfaceinvoke r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        if $r1 == null goto label1;

        $r6 = new java.lang.IllegalArgumentException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Filter already registered: ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10);

        throw $r6;

     label1:
        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>(java.util.Map)>(r11);

        $r4 = staticinvoke <java.util.Set: java.util.Set copyOf(java.util.Collection)>(r3);

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r4);

        return $r2;
    }

    public static java.lang.reflect.Field[] filterFields(java.lang.Class, java.lang.reflect.Field[])
    {
        java.util.Map $r0, $r3;
        java.lang.reflect.Field[] r1, $r7;
        java.lang.Class r2;
        java.lang.Object $r4;
        java.util.Set $r5;
        java.lang.reflect.Member[] $r6;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Field[];

        $r0 = <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap>;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r3 = <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.util.Set) $r4;

        $r6 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.util.Set)>(r1, $r5);

        $r7 = (java.lang.reflect.Field[]) $r6;

        return $r7;
    }

    public static java.lang.reflect.Method[] filterMethods(java.lang.Class, java.lang.reflect.Method[])
    {
        java.util.Map $r0, $r3;
        java.lang.reflect.Method[] r1, $r7;
        java.lang.Class r2;
        java.lang.Object $r4;
        java.util.Set $r5;
        java.lang.reflect.Member[] $r6;

        r2 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.reflect.Method[];

        $r0 = <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap>;

        if $r0 != null goto label1;

        return r1;

     label1:
        $r3 = <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r5 = (java.util.Set) $r4;

        $r6 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.util.Set)>(r1, $r5);

        $r7 = (java.lang.reflect.Method[]) $r6;

        return $r7;
    }

    private static java.lang.reflect.Member[] filter(java.lang.reflect.Member[], java.util.Set)
    {
        java.util.Set r0;
        java.lang.reflect.Member[] r1, $r9, r12;
        int $i0, $i1, i2, i3, i4, i5, i6, i7;
        java.lang.reflect.Member $r2, r5, r11;
        java.lang.Class r3;
        boolean $z0, $z1, $z2;
        java.lang.Object $r4, $r8;
        java.lang.String $r6, $r7;

        r1 := @parameter0: java.lang.reflect.Member[];

        r0 := @parameter1: java.util.Set;

        if r0 == null goto label1;

        $i0 = lengthof r1;

        if $i0 != 0 goto label2;

     label1:
        return r1;

     label2:
        $r2 = r1[0];

        r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>();

        $z0 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>("*");

        if $z0 == 0 goto label3;

        $r8 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r3, 0);

        $r9 = (java.lang.reflect.Member[]) $r8;

        return $r9;

     label3:
        i2 = 0;

        i3 = lengthof r1;

        i4 = 0;

     label4:
        if i4 >= i3 goto label6;

        r11 = r1[i4];

        $r7 = interfaceinvoke r11.<java.lang.reflect.Member: java.lang.String getName()>();

        $z2 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r7);

        if $z2 != 0 goto label5;

        i2 = i2 + 1;

     label5:
        i4 = i4 + 1;

        goto label4;

     label6:
        $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>(r3, i2);

        r12 = (java.lang.reflect.Member[]) $r4;

        i5 = 0;

        i6 = lengthof r1;

        i7 = 0;

     label7:
        if i7 >= i6 goto label9;

        r5 = r1[i7];

        $r6 = interfaceinvoke r5.<java.lang.reflect.Member: java.lang.String getName()>();

        $z1 = interfaceinvoke r0.<java.util.Set: boolean contains(java.lang.Object)>($r6);

        if $z1 != 0 goto label8;

        $i1 = i5;

        i5 = i5 + 1;

        r12[$i1] = r5;

     label8:
        i7 = i7 + 1;

        goto label7;

     label9:
        return r12;
    }

    public static boolean isCallerSensitive(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class $r1;
        java.lang.ClassLoader r2;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>();

        r2 = virtualinvoke $r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>();

        $z0 = staticinvoke <jdk.internal.misc.VM: boolean isSystemDomainLoader(java.lang.ClassLoader)>(r2);

        if $z0 == 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.reflect.Method: boolean isAnnotationPresent(java.lang.Class)>(class "Ljdk/internal/reflect/CallerSensitive;");

        return $z1;

     label1:
        return 0;
    }

    public static java.lang.IllegalAccessException newIllegalAccessException(java.lang.Class, java.lang.Class, java.lang.Class, int)
    {
        java.lang.Class r0, r2, r39;
        java.lang.Module r1, r3;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String r4, $r27, r40, r41, r42, r43;
        java.lang.StringBuilder $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r36, $r37;
        int i0;
        java.lang.IllegalAccessException $r38, $r44;

        r0 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class;

        r39 := @parameter2: java.lang.Class;

        i0 := @parameter3: int;

        if r0 != null goto label1;

        $r38 = staticinvoke <jdk.internal.reflect.Reflection: java.lang.IllegalAccessException newIllegalAccessException(java.lang.Class,int)>(r2, i0);

        return $r38;

     label1:
        r40 = "";

        r41 = "";

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        $z0 = virtualinvoke r1.<java.lang.Module: boolean isNamed()>();

        if $z0 == 0 goto label2;

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>()>();

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r40 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

     label2:
        r3 = virtualinvoke r2.<java.lang.Class: java.lang.Module getModule()>();

        $z1 = virtualinvoke r3.<java.lang.Module: boolean isNamed()>();

        if $z1 == 0 goto label3;

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in ");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r41 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getPackageName()>();

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r40);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot access ");

        r42 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $z2 = virtualinvoke r3.<java.lang.Module: boolean isExported(java.lang.String,java.lang.Module)>(r4, r1);

        if $z2 == 0 goto label4;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a member of ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with modifiers \"");

        $r27 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r43 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label5;

     label4:
        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r42);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r41);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not export ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        r43 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $z3 = virtualinvoke r3.<java.lang.Module: boolean isNamed()>();

        if $z3 == 0 goto label5;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>()>();

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r43);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        r43 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

     label5:
        $r44 = new java.lang.IllegalAccessException;

        specialinvoke $r44.<java.lang.IllegalAccessException: void <init>(java.lang.String)>(r43);

        return $r44;
    }

    private static java.lang.IllegalAccessException newIllegalAccessException(java.lang.Class, int)
    {
        java.lang.Class r0;
        java.lang.Module r1;
        boolean $z0, $z1;
        java.lang.String r2, $r18, r25, r27;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r22, $r23, $r24;
        java.lang.IllegalAccessException $r11;
        int i0;

        r0 := @parameter0: java.lang.Class;

        i0 := @parameter1: int;

        r25 = "";

        r1 = virtualinvoke r0.<java.lang.Class: java.lang.Module getModule()>();

        $z0 = virtualinvoke r1.<java.lang.Module: boolean isNamed()>();

        if $z0 == 0 goto label1;

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>()>();

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (in ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

     label1:
        r2 = virtualinvoke r0.<java.lang.Class: java.lang.String getPackageName()>();

        $z1 = virtualinvoke r1.<java.lang.Module: boolean isExported(java.lang.String)>(r2);

        if $z1 == 0 goto label2;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>()>();

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JNI attached native thread (null caller frame) cannot access ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("a member of ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with modifiers \"");

        $r18 = staticinvoke <java.lang.reflect.Modifier: java.lang.String toString(int)>(i0);

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"");

        r27 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        goto label3;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("JNI attached native thread (null caller frame) cannot access ");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because ");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not export ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        r27 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

     label3:
        $r11 = new java.lang.IllegalAccessException;

        specialinvoke $r11.<java.lang.IllegalAccessException: void <init>(java.lang.String)>(r27);

        return $r11;
    }

    public static native boolean areNestMates(java.lang.Class, java.lang.Class);

    static void <clinit>()
    {
        java.util.Set $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9;
        java.util.Map $r10, $r11;

        <jdk.internal.reflect.Reflection: java.lang.String WILDCARD> = "*";

        $r0 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>("*");

        <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS> = $r0;

        $r1 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r2 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r3 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>("classLoader");

        $r4 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r5 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r6 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r7 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r8 = <jdk.internal.reflect.Reflection: java.util.Set ALL_MEMBERS>;

        $r9 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>("security");

        $r10 = staticinvoke <java.util.Map: java.util.Map of(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>(class "Ljdk/internal/reflect/Reflection;", $r1, class "Ljava/lang/reflect/AccessibleObject;", $r2, class "Ljava/lang/Class;", $r3, class "Ljava/lang/ClassLoader;", $r4, class "Ljava/lang/reflect/Constructor;", $r5, class "Ljava/lang/reflect/Field;", $r6, class "Ljava/lang/reflect/Method;", $r7, class "Ljava/lang/Module;", $r8, class "Ljava/lang/System;", $r9);

        <jdk.internal.reflect.Reflection: java.util.Map fieldFilterMap> = $r10;

        $r11 = staticinvoke <java.util.Map: java.util.Map of()>();

        <jdk.internal.reflect.Reflection: java.util.Map methodFilterMap> = $r11;

        return;
    }
}
