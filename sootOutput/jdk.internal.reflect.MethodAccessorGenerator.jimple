class jdk.internal.reflect.MethodAccessorGenerator extends jdk.internal.reflect.AccessorGenerator
{
    private static final short NUM_BASE_CPOOL_ENTRIES;
    private static final short NUM_METHODS;
    private static final short NUM_SERIALIZATION_CPOOL_ENTRIES;
    private static volatile int methodSymnum;
    private static volatile int constructorSymnum;
    private static volatile int serializationConstructorSymnum;
    private java.lang.Class declaringClass;
    private java.lang.Class[] parameterTypes;
    private java.lang.Class returnType;
    private boolean isConstructor;
    private boolean forSerialization;
    private short targetMethodRef;
    private short invokeIdx;
    private short invokeDescriptorIdx;
    private short nonPrimitiveParametersBaseIdx;

    void <init>()
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        specialinvoke r0.<jdk.internal.reflect.AccessorGenerator: void <init>()>();

        return;
    }

    public jdk.internal.reflect.MethodAccessor generateMethod(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int)
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, r4;
        java.lang.String r2;
        java.lang.Class[] r3, r5;
        int i0;
        jdk.internal.reflect.MagicAccessorImpl $r6;
        jdk.internal.reflect.MethodAccessor $r7;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.String;

        r3 := @parameter2: java.lang.Class[];

        r4 := @parameter3: java.lang.Class;

        r5 := @parameter4: java.lang.Class[];

        i0 := @parameter5: int;

        $r6 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(r1, r2, r3, r4, r5, i0, 0, 0, null);

        $r7 = (jdk.internal.reflect.MethodAccessor) $r6;

        return $r7;
    }

    public jdk.internal.reflect.ConstructorAccessor generateConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int)
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, $r4;
        java.lang.Class[] r2, r3;
        int i0;
        jdk.internal.reflect.MagicAccessorImpl $r5;
        jdk.internal.reflect.ConstructorAccessor $r6;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Class[];

        i0 := @parameter3: int;

        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        $r5 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(r1, "<init>", r2, $r4, r3, i0, 1, 0, null);

        $r6 = (jdk.internal.reflect.ConstructorAccessor) $r5;

        return $r6;
    }

    public jdk.internal.reflect.SerializationConstructorAccessorImpl generateSerializationConstructor(java.lang.Class, java.lang.Class[], java.lang.Class[], int, java.lang.Class)
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class r1, r4, $r5;
        java.lang.Class[] r2, r3;
        int i0;
        jdk.internal.reflect.MagicAccessorImpl $r6;
        jdk.internal.reflect.SerializationConstructorAccessorImpl $r7;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        r1 := @parameter0: java.lang.Class;

        r2 := @parameter1: java.lang.Class[];

        r3 := @parameter2: java.lang.Class[];

        i0 := @parameter3: int;

        r4 := @parameter4: java.lang.Class;

        $r5 = <java.lang.Void: java.lang.Class TYPE>;

        $r6 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>(r1, "<init>", r2, $r5, r3, i0, 1, 1, r4);

        $r7 = (jdk.internal.reflect.SerializationConstructorAccessorImpl) $r6;

        return $r7;
    }

    private jdk.internal.reflect.MagicAccessorImpl generate(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Class, java.lang.Class[], int, boolean, boolean, java.lang.Class)
    {
        jdk.internal.reflect.ByteVector r0;
        jdk.internal.reflect.MethodAccessorGenerator r1;
        jdk.internal.reflect.ClassFileAssembler $r2, $r6, $r7, $r9, $r10, $r11, $r12, $r13, $r15, $r16, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, $r33, $r34, $r35, $r42, $r49, $r51, $r52, $r53, $r54, $r55, $r56, $r57, $r58, $r60, $r62, $r63, $r64, $r65, $r66, $r68, $r69, $r70, $r71, $r73, $r74, $r75, $r76;
        java.lang.Class r3, r5, r48, r59;
        java.lang.Class[] r4, r67;
        int i0, $i1, $i2, $i4, $i26, $i27, i36, $i37;
        boolean z0, z1, z2, $z3, $z4;
        short $s3, $s5, $s6, $s7, $s8, $s9, $s10, $s11, $s12, $s13, $s14, $s15, $s16, $s17, $s18, $s19, $s20, $s21, $s22, $s23, $s24, $s25, s28, s29, $s30, $s31, $s32, $s33, s34, $s35;
        java.lang.String r8, r14, $r17, $r47, $r50, $r61, $r72;
        jdk.internal.reflect.MethodAccessorGenerator$1 $r36;
        java.lang.Object $r37;
        jdk.internal.reflect.MagicAccessorImpl $r38;
        java.lang.InternalError $r39;
        java.lang.StringBuilder $r40, $r41, $r43, $r44, $r45, $r46;
        byte[] r77;

        r1 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        r3 := @parameter0: java.lang.Class;

        r14 := @parameter1: java.lang.String;

        r4 := @parameter2: java.lang.Class[];

        r5 := @parameter3: java.lang.Class;

        r67 := @parameter4: java.lang.Class[];

        i0 := @parameter5: int;

        z0 := @parameter6: boolean;

        z1 := @parameter7: boolean;

        r59 := @parameter8: java.lang.Class;

        r0 = staticinvoke <jdk.internal.reflect.ByteVectorFactory: jdk.internal.reflect.ByteVector create()>();

        $r2 = new jdk.internal.reflect.ClassFileAssembler;

        specialinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void <init>(jdk.internal.reflect.ByteVector)>(r0);

        r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm> = $r2;

        r1.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class declaringClass> = r3;

        r1.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes> = r4;

        r1.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType> = r5;

        r1.<jdk.internal.reflect.MethodAccessorGenerator: int modifiers> = i0;

        r1.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor> = z0;

        r1.<jdk.internal.reflect.MethodAccessorGenerator: boolean forSerialization> = z1;

        $r6 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r6.<jdk.internal.reflect.ClassFileAssembler: void emitMagicAndVersion()>();

        s28 = 42;

        z2 = virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: boolean usesPrimitiveTypes()>();

        if z2 == 0 goto label01;

        $i27 = 42 + 73;

        s28 = (short) $i27;

     label01:
        if z1 == 0 goto label02;

        $i26 = s28 + 2;

        s28 = (short) $i26;

     label02:
        $i1 = virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: int numNonPrimitiveParameterTypes()>();

        $i2 = 2 * $i1;

        $s3 = (short) $i2;

        $i4 = s28 + $s3;

        s29 = (short) $i4;

        $r7 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s5 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short add(short,short)>(s29, 1);

        virtualinvoke $r7.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($s5);

        r8 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String generateName(boolean,boolean)>(z0, z1);

        $r9 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r9.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>(r8);

        $r11 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r10 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s6 = virtualinvoke $r10.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r11.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s6);

        $r12 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s7 = virtualinvoke $r12.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short thisClass> = $s7;

        if z0 == 0 goto label04;

        if z1 == 0 goto label03;

        $r66 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r66.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("jdk/internal/reflect/SerializationConstructorAccessorImpl");

        goto label05;

     label03:
        $r65 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r65.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("jdk/internal/reflect/ConstructorAccessorImpl");

        goto label05;

     label04:
        $r13 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r13.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("jdk/internal/reflect/MethodAccessorImpl");

     label05:
        $r68 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r69 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s30 = virtualinvoke $r69.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r68.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s30);

        $r70 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s31 = virtualinvoke $r70.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short superClass> = $s31;

        $r71 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r72 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(r3, 0);

        virtualinvoke $r71.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r72);

        $r73 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r74 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s32 = virtualinvoke $r74.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r73.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s32);

        $r75 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s33 = virtualinvoke $r75.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass> = $s33;

        s34 = 0;

        if z1 == 0 goto label06;

        $r60 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r61 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(r59, 0);

        virtualinvoke $r60.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r61);

        $r63 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r62 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s25 = virtualinvoke $r62.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r63.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s25);

        $r64 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        s34 = virtualinvoke $r64.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

     label06:
        $r15 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r15.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>(r14);

        $r16 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r17 = virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>();

        virtualinvoke $r16.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r17);

        $r19 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r18 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s8 = virtualinvoke $r18.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $s9 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short sub(short,short)>($s8, 1);

        $r20 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s10 = virtualinvoke $r20.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r19.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>($s9, $s10);

        $z3 = virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: boolean isInterface()>();

        if $z3 == 0 goto label07;

        $r58 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s23 = r1.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        $r57 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s24 = virtualinvoke $r57.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r58.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolInterfaceMethodref(short,short)>($s23, $s24);

        goto label09;

     label07:
        if z1 == 0 goto label08;

        $r56 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r55 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s22 = virtualinvoke $r55.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r56.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>(s34, $s22);

        goto label09;

     label08:
        $r22 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s11 = r1.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        $r21 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s12 = virtualinvoke $r21.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r22.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>($s11, $s12);

     label09:
        $r76 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s35 = virtualinvoke $r76.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef> = $s35;

        if z0 == 0 goto label10;

        $r54 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r54.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("newInstance");

        goto label11;

     label10:
        $r23 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r23.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("invoke");

     label11:
        $r24 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s13 = virtualinvoke $r24.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short invokeIdx> = $s13;

        if z0 == 0 goto label12;

        $r53 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r53.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("([Ljava/lang/Object;)Ljava/lang/Object;");

        goto label13;

     label12:
        $r25 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r25.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>("(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;");

     label13:
        $r26 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s14 = virtualinvoke $r26.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short invokeDescriptorIdx> = $s14;

        $r27 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s15 = virtualinvoke $r27.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $s16 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short add(short,short)>($s15, 2);

        r1.<jdk.internal.reflect.MethodAccessorGenerator: short nonPrimitiveParametersBaseIdx> = $s16;

        i36 = 0;

     label14:
        $i37 = lengthof r4;

        if i36 >= $i37 goto label16;

        r48 = r4[i36];

        $z4 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>(r48);

        if $z4 != 0 goto label15;

        $r49 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r50 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>(r48, 0);

        virtualinvoke $r49.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>($r50);

        $r52 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $r51 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s21 = virtualinvoke $r51.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        virtualinvoke $r52.<jdk.internal.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>($s21);

     label15:
        i36 = i36 + 1;

        goto label14;

     label16:
        virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: void emitCommonConstantPoolEntries()>();

        if z2 == 0 goto label17;

        virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: void emitBoxingContantPoolEntries()>();

     label17:
        $r28 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s17 = virtualinvoke $r28.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        if $s17 == s29 goto label18;

        $r39 = new java.lang.InternalError;

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>()>();

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Adjust this code (cpi = ");

        $r42 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s20 = virtualinvoke $r42.<jdk.internal.reflect.ClassFileAssembler: short cpi()>();

        $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($s20);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", numCPEntries = ");

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(s29);

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r39.<java.lang.InternalError: void <init>(java.lang.String)>($r47);

        throw $r39;

     label18:
        $r29 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r29.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(1);

        $r30 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s18 = r1.<jdk.internal.reflect.MethodAccessorGenerator: short thisClass>;

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($s18);

        $r31 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        $s19 = r1.<jdk.internal.reflect.MethodAccessorGenerator: short superClass>;

        virtualinvoke $r31.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($s19);

        $r32 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r32.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(0);

        $r33 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r33.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(0);

        $r34 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r34.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(2);

        virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: void emitConstructor()>();

        virtualinvoke r1.<jdk.internal.reflect.MethodAccessorGenerator: void emitInvoke()>();

        $r35 = r1.<jdk.internal.reflect.MethodAccessorGenerator: jdk.internal.reflect.ClassFileAssembler asm>;

        virtualinvoke $r35.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(0);

        interfaceinvoke r0.<jdk.internal.reflect.ByteVector: void trim()>();

        r77 = interfaceinvoke r0.<jdk.internal.reflect.ByteVector: byte[] getData()>();

        $r36 = new jdk.internal.reflect.MethodAccessorGenerator$1;

        specialinvoke $r36.<jdk.internal.reflect.MethodAccessorGenerator$1: void <init>(jdk.internal.reflect.MethodAccessorGenerator,java.lang.String,byte[],java.lang.Class)>(r1, r8, r77, r3);

        $r37 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r36);

        $r38 = (jdk.internal.reflect.MagicAccessorImpl) $r37;

        return $r38;
    }

    private void emitInvoke()
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class[] $r1, $r4, $r13, $r16, $r23, $r25, $r28;
        int $i0, $i1, $i6, $i8, $i10, $i12, $i14, $i16, $i23, $i29, i32, $i33, i34, $i35;
        jdk.internal.reflect.ClassFileAssembler $r2, $r30;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        short $s2, $s3, $s4, $s5, $s7, $s9, $s11, $s13, $s17, $s18, $s19, $s20, $s21, $s22, $s24, $s25, $s26, $s27, s28, s30, s36, s37, s38, $s39, $s40, $s41, s42, $s43, $s44, $s45, $s46, $s47, $s48, $s49, $s50;
        java.lang.Class $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, r26, r29;
        byte $b15, b31;
        jdk.internal.reflect.Label $r14, $r17, $r18, $r21, r24, r27;
        java.lang.InternalError $r15, $r19;
        short[] $r32;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $r1 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i0 = lengthof $r1;

        if $i0 <= 65535 goto label01;

        $r19 = new java.lang.InternalError;

        specialinvoke $r19.<java.lang.InternalError: void <init>(java.lang.String)>("Can\'t handle more than 65535 parameters");

        throw $r19;

     label01:
        $r2 = new jdk.internal.reflect.ClassFileAssembler;

        specialinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void <init>()>();

        $z0 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z0 == 0 goto label02;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void setMaxLocals(int)>(2);

        goto label03;

     label02:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void setMaxLocals(int)>(3);

     label03:
        s28 = 0;

        $z1 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z1 == 0 goto label04;

        $s27 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($s27);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        goto label05;

     label04:
        $z2 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isStatic()>();

        if $z2 != 0 goto label05;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        $r18 = new jdk.internal.reflect.Label;

        specialinvoke $r18.<jdk.internal.reflect.Label: void <init>()>();

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_ifnonnull(jdk.internal.reflect.Label)>($r18);

        $s24 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short nullPointerClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($s24);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        $s25 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short nullPointerCtorIdx>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s25, 0, 0);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        virtualinvoke $r18.<jdk.internal.reflect.Label: void bind()>();

        s28 = virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        $s26 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short targetClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_checkcast(short)>($s26);

     label05:
        $r21 = new jdk.internal.reflect.Label;

        specialinvoke $r21.<jdk.internal.reflect.Label: void <init>()>();

        $r23 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i29 = lengthof $r23;

        if $i29 != 0 goto label08;

        $z13 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z13 == 0 goto label06;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        goto label07;

     label06:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

     label07:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_ifnull(jdk.internal.reflect.Label)>($r21);

     label08:
        $z14 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z14 == 0 goto label09;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        goto label10;

     label09:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

     label10:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_arraylength()>();

        $r4 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i1 = lengthof $r4;

        $s2 = (short) $i1;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_sipush(short)>($s2);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_if_icmpeq(jdk.internal.reflect.Label)>($r21);

        $s3 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($s3);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        $s4 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentCtorIdx>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s4, 0, 0);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        virtualinvoke $r21.<jdk.internal.reflect.Label: void bind()>();

        s30 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short nonPrimitiveParametersBaseIdx>;

        r24 = null;

        b31 = 1;

        i32 = 0;

     label11:
        $r25 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i33 = lengthof $r25;

        if i32 >= $i33 goto label28;

        $r13 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        r26 = $r13[i32];

        $i14 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>(r26);

        $b15 = (byte) $i14;

        $i16 = b31 + $b15;

        b31 = (byte) $i16;

        if r24 == null goto label12;

        virtualinvoke r24.<jdk.internal.reflect.Label: void bind()>();

        r24 = null;

     label12:
        $z7 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z7 == 0 goto label13;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_1()>();

        goto label14;

     label13:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

     label14:
        $s17 = (short) i32;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_sipush(short)>($s17);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aaload()>();

        $z8 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>(r26);

        if $z8 == 0 goto label26;

        $z9 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z9 == 0 goto label15;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_astore_2()>();

        goto label16;

     label15:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_astore_3()>();

     label16:
        r27 = null;

        $r14 = new jdk.internal.reflect.Label;

        specialinvoke $r14.<jdk.internal.reflect.Label: void <init>()>();

        r24 = $r14;

        i34 = 0;

     label17:
        $r28 = <jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] primitiveTypes>;

        $i35 = lengthof $r28;

        if i34 >= $i35 goto label24;

        $r16 = <jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] primitiveTypes>;

        r29 = $r16[i34];

        $z10 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean canWidenTo(java.lang.Class,java.lang.Class)>(r29, r26);

        if $z10 == 0 goto label23;

        if r27 == null goto label18;

        virtualinvoke r27.<jdk.internal.reflect.Label: void bind()>();

     label18:
        $z11 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z11 == 0 goto label19;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

        goto label20;

     label19:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_3()>();

     label20:
        $s20 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>(r29);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_instanceof(short)>($s20);

        $r17 = new jdk.internal.reflect.Label;

        specialinvoke $r17.<jdk.internal.reflect.Label: void <init>()>();

        r27 = $r17;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_ifeq(jdk.internal.reflect.Label)>($r17);

        $z12 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z12 == 0 goto label21;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_2()>();

        goto label22;

     label21:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aload_3()>();

     label22:
        $s21 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: short indexForPrimitiveType(java.lang.Class)>(r29);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_checkcast(short)>($s21);

        $s22 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>(r29);

        $i23 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>(r29);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>($s22, 0, $i23);

        staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: void emitWideningBytecodeForPrimitiveConversion(jdk.internal.reflect.ClassFileAssembler,java.lang.Class,java.lang.Class)>($r2, r29, r26);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_goto(jdk.internal.reflect.Label)>($r14);

     label23:
        i34 = i34 + 1;

        goto label17;

     label24:
        if r27 != null goto label25;

        $r15 = new java.lang.InternalError;

        specialinvoke $r15.<java.lang.InternalError: void <init>(java.lang.String)>("Must have found at least identity conversion");

        throw $r15;

     label25:
        virtualinvoke r27.<jdk.internal.reflect.Label: void bind()>();

        $s18 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($s18);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_dup()>();

        $s19 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentCtorIdx>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s19, 0, 0);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        goto label27;

     label26:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_checkcast(short)>(s30);

        s30 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: short add(short,short)>(s30, 2);

     label27:
        i32 = i32 + 1;

        goto label11;

     label28:
        if r24 == null goto label29;

        virtualinvoke r24.<jdk.internal.reflect.Label: void bind()>();

     label29:
        s36 = virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        $z3 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z3 == 0 goto label30;

        $s13 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s13, b31, 0);

        goto label33;

     label30:
        $z4 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isStatic()>();

        if $z4 == 0 goto label31;

        $s11 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        $r12 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $i12 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r12);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokestatic(short,int,int)>($s11, b31, $i12);

        goto label33;

     label31:
        $z5 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isInterface()>();

        if $z5 == 0 goto label32;

        $s9 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        $r11 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $i10 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r11);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokeinterface(short,int,byte,int)>($s9, b31, b31, $i10);

        goto label33;

     label32:
        $s5 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short targetMethodRef>;

        $r5 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $i6 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r5);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>($s5, b31, $i6);

     label33:
        s37 = virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        $z15 = r0.<jdk.internal.reflect.MethodAccessorGenerator: boolean isConstructor>;

        if $z15 != 0 goto label35;

        $r6 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $z6 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: boolean isPrimitive(java.lang.Class)>($r6);

        if $z6 == 0 goto label34;

        $r9 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $s7 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: short boxingMethodForPrimitiveType(java.lang.Class)>($r9);

        $r10 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $i8 = virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>($r10);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokestatic(short,int,int)>($s7, $i8, 0);

        goto label35;

     label34:
        $r8 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if $r8 != $r7 goto label35;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_aconst_null()>();

     label35:
        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_areturn()>();

        s38 = virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void setStack(int)>(1);

        $s39 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short toStringIdx>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s39, 0, 1);

        $s40 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($s40);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_dup_x1()>();

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_swap()>();

        $s41 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short illegalArgumentStringCtorIdx>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s41, 1, 0);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        s42 = virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: short getLength()>();

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void setStack(int)>(1);

        $s43 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short invocationTargetClass>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_new(short)>($s43);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_dup_x1()>();

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_swap()>();

        $s44 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short invocationTargetCtorIdx>;

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>($s44, 1, 0);

        virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: void opc_athrow()>();

        $r30 = new jdk.internal.reflect.ClassFileAssembler;

        specialinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void <init>()>();

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s28);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s36);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s38);

        $s45 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short classCastClass>;

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($s45);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s28);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s36);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s38);

        $s46 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short nullPointerClass>;

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($s46);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s36);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s37);

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>(s42);

        $s47 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short throwableClass>;

        virtualinvoke $r30.<jdk.internal.reflect.ClassFileAssembler: void emitShort(short)>($s47);

        $s48 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short invokeIdx>;

        $s49 = virtualinvoke $r2.<jdk.internal.reflect.ClassFileAssembler: short getMaxLocals()>();

        $r32 = newarray (short)[1];

        $s50 = r0.<jdk.internal.reflect.MethodAccessorGenerator: short invocationTargetClass>;

        $r32[0] = $s50;

        virtualinvoke r0.<jdk.internal.reflect.MethodAccessorGenerator: void emitMethod(short,int,jdk.internal.reflect.ClassFileAssembler,jdk.internal.reflect.ClassFileAssembler,short[])>($s48, $s49, $r2, $r30, $r32);

        return;
    }

    private boolean usesPrimitiveTypes()
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class $r1, $r4;
        boolean $z0, $z1;
        java.lang.Class[] $r2, $r3;
        int $i0, i1;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $r1 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label1;

        return 1;

     label1:
        i1 = 0;

     label2:
        $r2 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i0 = lengthof $r2;

        if i1 >= $i0 goto label4;

        $r3 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $r4 = $r3[i1];

        $z1 = virtualinvoke $r4.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label3;

        return 1;

     label3:
        i1 = i1 + 1;

        goto label2;

     label4:
        return 0;
    }

    private int numNonPrimitiveParameterTypes()
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class[] $r1, $r2;
        int $i0, i1, i2;
        java.lang.Class $r3;
        boolean $z0;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        i1 = 0;

        i2 = 0;

     label1:
        $r1 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i0 = lengthof $r1;

        if i2 >= $i0 goto label3;

        $r2 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $r3 = $r2[i2];

        $z0 = virtualinvoke $r3.<java.lang.Class: boolean isPrimitive()>();

        if $z0 != 0 goto label2;

        i1 = i1 + 1;

     label2:
        i2 = i2 + 1;

        goto label1;

     label3:
        return i1;
    }

    private boolean isInterface()
    {
        jdk.internal.reflect.MethodAccessorGenerator r0;
        java.lang.Class $r1;
        boolean $z0;

        r0 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $r1 = r0.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class declaringClass>;

        $z0 = virtualinvoke $r1.<java.lang.Class: boolean isInterface()>();

        return $z0;
    }

    private java.lang.String buildInternalSignature()
    {
        java.lang.StringBuilder $r0;
        jdk.internal.reflect.MethodAccessorGenerator r3;
        java.lang.Class[] $r4, $r10;
        int $i0, i1;
        java.lang.Class $r6, $r11;
        java.lang.String $r7, $r9, $r12;

        r3 := @this: jdk.internal.reflect.MethodAccessorGenerator;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(");

        i1 = 0;

     label1:
        $r4 = r3.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $i0 = lengthof $r4;

        if i1 >= $i0 goto label2;

        $r10 = r3.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class[] parameterTypes>;

        $r11 = $r10[i1];

        $r12 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($r11, 1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")");

        $r6 = r3.<jdk.internal.reflect.MethodAccessorGenerator: java.lang.Class returnType>;

        $r7 = staticinvoke <jdk.internal.reflect.MethodAccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>($r6, 1);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

        $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    private static synchronized java.lang.String generateName(boolean, boolean)
    {
        boolean z0, z1;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        java.lang.StringBuilder $r0, $r1, $r2, $r4, $r5, $r6, $r8, $r9, $r10;
        java.lang.String $r3, $r7, $r11;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        if z0 == 0 goto label2;

        if z1 == 0 goto label1;

        $i4 = <jdk.internal.reflect.MethodAccessorGenerator: int serializationConstructorSymnum>;

        $i5 = $i4 + 1;

        <jdk.internal.reflect.MethodAccessorGenerator: int serializationConstructorSymnum> = $i5;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk/internal/reflect/GeneratedSerializationConstructorAccessor");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r11;

     label1:
        $i2 = <jdk.internal.reflect.MethodAccessorGenerator: int constructorSymnum>;

        $i3 = $i2 + 1;

        <jdk.internal.reflect.MethodAccessorGenerator: int constructorSymnum> = $i3;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk/internal/reflect/GeneratedConstructorAccessor");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;

     label2:
        $i0 = <jdk.internal.reflect.MethodAccessorGenerator: int methodSymnum>;

        $i1 = $i0 + 1;

        <jdk.internal.reflect.MethodAccessorGenerator: int methodSymnum> = $i1;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("jdk/internal/reflect/GeneratedMethodAccessor");

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static void <clinit>()
    {
        <jdk.internal.reflect.MethodAccessorGenerator: short NUM_SERIALIZATION_CPOOL_ENTRIES> = 2;

        <jdk.internal.reflect.MethodAccessorGenerator: short NUM_METHODS> = 2;

        <jdk.internal.reflect.MethodAccessorGenerator: short NUM_BASE_CPOOL_ENTRIES> = 12;

        return;
    }
}
