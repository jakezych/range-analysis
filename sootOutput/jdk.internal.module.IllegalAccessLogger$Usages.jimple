class jdk.internal.module.IllegalAccessLogger$Usages extends java.util.LinkedHashMap
{

    void <init>()
    {
        jdk.internal.module.IllegalAccessLogger$Usages r0;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Usages;

        specialinvoke r0.<java.util.LinkedHashMap: void <init>()>();

        return;
    }

    boolean add(jdk.internal.module.IllegalAccessLogger$Usage)
    {
        jdk.internal.module.IllegalAccessLogger$Usages r0;
        jdk.internal.module.IllegalAccessLogger$Usage r1;
        java.lang.Boolean $r2;
        java.lang.Object $r3;
        boolean $z0;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Usages;

        r1 := @parameter0: jdk.internal.module.IllegalAccessLogger$Usage;

        $r2 = <java.lang.Boolean: java.lang.Boolean TRUE>;

        $r3 = virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger$Usages: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r1, $r2);

        if $r3 != null goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    protected boolean removeEldestEntry(java.util.Map$Entry)
    {
        jdk.internal.module.IllegalAccessLogger$Usages r0;
        int $i0;
        java.util.Map$Entry r1;
        boolean $z0;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Usages;

        r1 := @parameter0: java.util.Map$Entry;

        $i0 = virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger$Usages: int size()>();

        if $i0 <= 16 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }
}
