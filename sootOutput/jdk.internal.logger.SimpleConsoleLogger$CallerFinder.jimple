final class jdk.internal.logger.SimpleConsoleLogger$CallerFinder extends java.lang.Object implements java.util.function.Predicate
{
    private static final java.lang.StackWalker WALKER;
    private boolean lookingForLogger;

    void <init>()
    {
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder r0;

        r0 := @this: jdk.internal.logger.SimpleConsoleLogger$CallerFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.logger.SimpleConsoleLogger$CallerFinder: boolean lookingForLogger> = 1;

        return;
    }

    java.util.Optional get()
    {
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder r0;
        java.lang.StackWalker $r1;
        java.util.function.Function $r2;
        java.lang.Object $r3;
        java.util.Optional $r4;

        r0 := @this: jdk.internal.logger.SimpleConsoleLogger$CallerFinder;

        $r1 = <jdk.internal.logger.SimpleConsoleLogger$CallerFinder: java.lang.StackWalker WALKER>;

        $r2 = staticinvoke <jdk.internal.logger.SimpleConsoleLogger$CallerFinder$lambda_get_0__147: java.util.function.Function bootstrap$(jdk.internal.logger.SimpleConsoleLogger$CallerFinder)>(r0);

        $r3 = virtualinvoke $r1.<java.lang.StackWalker: java.lang.Object walk(java.util.function.Function)>($r2);

        $r4 = (java.util.Optional) $r3;

        return $r4;
    }

    public boolean test(java.lang.StackWalker$StackFrame)
    {
        java.lang.StackWalker$StackFrame r0;
        java.lang.String r1;
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder r2;
        boolean $z0, $z1, $z2, $z3, $z4;

        r2 := @this: jdk.internal.logger.SimpleConsoleLogger$CallerFinder;

        r0 := @parameter0: java.lang.StackWalker$StackFrame;

        r1 = interfaceinvoke r0.<java.lang.StackWalker$StackFrame: java.lang.String getClassName()>();

        $z0 = r2.<jdk.internal.logger.SimpleConsoleLogger$CallerFinder: boolean lookingForLogger>;

        if $z0 == 0 goto label3;

        $z2 = virtualinvoke r2.<jdk.internal.logger.SimpleConsoleLogger$CallerFinder: boolean isLoggerImplFrame(java.lang.String)>(r1);

        if $z2 != 0 goto label1;

        $z3 = 1;

        goto label2;

     label1:
        $z3 = 0;

     label2:
        r2.<jdk.internal.logger.SimpleConsoleLogger$CallerFinder: boolean lookingForLogger> = $z3;

        return 0;

     label3:
        $z1 = staticinvoke <jdk.internal.logger.SimpleConsoleLogger$Formatting: boolean isFilteredFrame(java.lang.StackWalker$StackFrame)>(r0);

        if $z1 != 0 goto label4;

        $z4 = 1;

        goto label5;

     label4:
        $z4 = 0;

     label5:
        return $z4;
    }

    private boolean isLoggerImplFrame(java.lang.String)
    {
        java.lang.String r0;
        boolean $z0, $z1, $z2;
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder r1;

        r1 := @this: jdk.internal.logger.SimpleConsoleLogger$CallerFinder;

        r0 := @parameter0: java.lang.String;

        $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("sun.util.logging.PlatformLogger");

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("jdk.internal.logger.SimpleConsoleLogger");

        if $z1 == 0 goto label2;

     label1:
        $z2 = 1;

        goto label3;

     label2:
        $z2 = 0;

     label3:
        return $z2;
    }

    public volatile boolean test(java.lang.Object)
    {
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder r0;
        java.lang.Object r1;
        java.lang.StackWalker$StackFrame $r2;
        boolean $z0;

        r0 := @this: jdk.internal.logger.SimpleConsoleLogger$CallerFinder;

        r1 := @parameter0: java.lang.Object;

        $r2 = (java.lang.StackWalker$StackFrame) r1;

        $z0 = virtualinvoke r0.<jdk.internal.logger.SimpleConsoleLogger$CallerFinder: boolean test(java.lang.StackWalker$StackFrame)>($r2);

        return $z0;
    }

    public java.util.Optional lambda$get$0(java.util.stream.Stream)
    {
        java.util.stream.Stream r0, $r2;
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder r1;
        java.util.Optional $r3;

        r1 := @this: jdk.internal.logger.SimpleConsoleLogger$CallerFinder;

        r0 := @parameter0: java.util.stream.Stream;

        $r2 = interfaceinvoke r0.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>(r1);

        $r3 = interfaceinvoke $r2.<java.util.stream.Stream: java.util.Optional findFirst()>();

        return $r3;
    }

    static void <clinit>()
    {
        jdk.internal.logger.SimpleConsoleLogger$CallerFinder$1 $r0;
        java.lang.Object $r2;
        java.lang.StackWalker $r3;

        $r0 = new jdk.internal.logger.SimpleConsoleLogger$CallerFinder$1;

        specialinvoke $r0.<jdk.internal.logger.SimpleConsoleLogger$CallerFinder$1: void <init>()>();

        $r2 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>($r0);

        $r3 = (java.lang.StackWalker) $r2;

        <jdk.internal.logger.SimpleConsoleLogger$CallerFinder: java.lang.StackWalker WALKER> = $r3;

        return;
    }
}
