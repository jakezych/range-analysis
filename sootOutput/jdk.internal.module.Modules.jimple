public class jdk.internal.module.Modules extends java.lang.Object
{
    private static final jdk.internal.access.JavaLangAccess JLA;
    private static final jdk.internal.access.JavaLangModuleAccess JLMA;
    private static volatile java.lang.ModuleLayer topLayer;
    static final boolean $assertionsDisabled;

    private void <init>()
    {
        jdk.internal.module.Modules r0;

        r0 := @this: jdk.internal.module.Modules;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static java.lang.Module defineModule(java.lang.ClassLoader, java.lang.module.ModuleDescriptor, java.net.URI)
    {
        java.lang.ClassLoader r0;
        java.lang.module.ModuleDescriptor r1;
        java.net.URI r2;
        jdk.internal.access.JavaLangAccess $r3;
        java.lang.Module $r4;

        r0 := @parameter0: java.lang.ClassLoader;

        r1 := @parameter1: java.lang.module.ModuleDescriptor;

        r2 := @parameter2: java.net.URI;

        $r3 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        $r4 = interfaceinvoke $r3.<jdk.internal.access.JavaLangAccess: java.lang.Module defineModule(java.lang.ClassLoader,java.lang.module.ModuleDescriptor,java.net.URI)>(r0, r1, r2);

        return $r4;
    }

    public static void addReads(java.lang.Module, java.lang.Module)
    {
        java.lang.Module r0, r1;
        jdk.internal.access.JavaLangAccess $r2;

        r0 := @parameter0: java.lang.Module;

        r1 := @parameter1: java.lang.Module;

        $r2 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r2.<jdk.internal.access.JavaLangAccess: void addReads(java.lang.Module,java.lang.Module)>(r0, r1);

        return;
    }

    public static void addReadsAllUnnamed(java.lang.Module)
    {
        java.lang.Module r0;
        jdk.internal.access.JavaLangAccess $r1;

        r0 := @parameter0: java.lang.Module;

        $r1 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r1.<jdk.internal.access.JavaLangAccess: void addReadsAllUnnamed(java.lang.Module)>(r0);

        return;
    }

    public static void addExports(java.lang.Module, java.lang.String, java.lang.Module)
    {
        java.lang.Module r0, r2;
        java.lang.String r1;
        jdk.internal.access.JavaLangAccess $r3;

        r0 := @parameter0: java.lang.Module;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Module;

        $r3 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r3.<jdk.internal.access.JavaLangAccess: void addExports(java.lang.Module,java.lang.String,java.lang.Module)>(r0, r1, r2);

        return;
    }

    public static void addExportsToAllUnnamed(java.lang.Module, java.lang.String)
    {
        java.lang.Module r0;
        java.lang.String r1;
        jdk.internal.access.JavaLangAccess $r2;

        r0 := @parameter0: java.lang.Module;

        r1 := @parameter1: java.lang.String;

        $r2 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r2.<jdk.internal.access.JavaLangAccess: void addExportsToAllUnnamed(java.lang.Module,java.lang.String)>(r0, r1);

        return;
    }

    public static void addOpens(java.lang.Module, java.lang.String, java.lang.Module)
    {
        java.lang.Module r0, r2;
        java.lang.String r1;
        jdk.internal.access.JavaLangAccess $r3;

        r0 := @parameter0: java.lang.Module;

        r1 := @parameter1: java.lang.String;

        r2 := @parameter2: java.lang.Module;

        $r3 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r3.<jdk.internal.access.JavaLangAccess: void addOpens(java.lang.Module,java.lang.String,java.lang.Module)>(r0, r1, r2);

        return;
    }

    public static void addOpensToAllUnnamed(java.lang.Module, java.lang.String)
    {
        java.lang.Module r0;
        java.lang.String r1;
        jdk.internal.access.JavaLangAccess $r2;

        r0 := @parameter0: java.lang.Module;

        r1 := @parameter1: java.lang.String;

        $r2 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r2.<jdk.internal.access.JavaLangAccess: void addOpensToAllUnnamed(java.lang.Module,java.lang.String)>(r0, r1);

        return;
    }

    public static void addUses(java.lang.Module, java.lang.Class)
    {
        java.lang.Module r0;
        java.lang.Class r1;
        jdk.internal.access.JavaLangAccess $r2;

        r0 := @parameter0: java.lang.Module;

        r1 := @parameter1: java.lang.Class;

        $r2 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r2.<jdk.internal.access.JavaLangAccess: void addUses(java.lang.Module,java.lang.Class)>(r0, r1);

        return;
    }

    public static void addProvides(java.lang.Module, java.lang.Class, java.lang.Class)
    {
        java.lang.Module r0;
        java.lang.ModuleLayer r1;
        java.security.PrivilegedAction r3;
        java.lang.Object $r4;
        java.lang.ClassLoader r5, r6;
        java.lang.Class r7, r8;
        jdk.internal.access.JavaLangAccess $r9;
        jdk.internal.module.ServicesCatalog $r10, r11;

        r0 := @parameter0: java.lang.Module;

        r7 := @parameter1: java.lang.Class;

        r8 := @parameter2: java.lang.Class;

        r1 = virtualinvoke r0.<java.lang.Module: java.lang.ModuleLayer getLayer()>();

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r3 = staticinvoke <jdk.internal.module.Modules$getClassLoader__100: java.security.PrivilegedAction bootstrap$(java.lang.Module)>(r0);

        $r4 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedAction)>(r3);

        r5 = (java.lang.ClassLoader) $r4;

        r6 = staticinvoke <jdk.internal.loader.ClassLoaders: java.lang.ClassLoader platformClassLoader()>();

        if r1 == null goto label1;

        if r5 == null goto label1;

        if r5 != r6 goto label4;

     label1:
        if r5 != null goto label2;

        r11 = staticinvoke <jdk.internal.loader.BootLoader: jdk.internal.module.ServicesCatalog getServicesCatalog()>();

        goto label3;

     label2:
        r11 = staticinvoke <jdk.internal.module.ServicesCatalog: jdk.internal.module.ServicesCatalog getServicesCatalog(java.lang.ClassLoader)>(r5);

     label3:
        virtualinvoke r11.<jdk.internal.module.ServicesCatalog: void addProvider(java.lang.Module,java.lang.Class,java.lang.Class)>(r0, r7, r8);

     label4:
        if r1 == null goto label5;

        $r9 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        $r10 = interfaceinvoke $r9.<jdk.internal.access.JavaLangAccess: jdk.internal.module.ServicesCatalog getServicesCatalog(java.lang.ModuleLayer)>(r1);

        virtualinvoke $r10.<jdk.internal.module.ServicesCatalog: void addProvider(java.lang.Module,java.lang.Class,java.lang.Class)>(r0, r7, r8);

     label5:
        return;
    }

    public static java.lang.module.Configuration newBootLayerConfiguration(java.lang.module.ModuleFinder, java.util.Collection, java.io.PrintStream)
    {
        java.lang.module.ModuleFinder r0;
        java.util.Collection r1;
        java.io.PrintStream r2;
        jdk.internal.access.JavaLangModuleAccess $r3;
        java.lang.module.Configuration $r4;

        r0 := @parameter0: java.lang.module.ModuleFinder;

        r1 := @parameter1: java.util.Collection;

        r2 := @parameter2: java.io.PrintStream;

        $r3 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangModuleAccess JLMA>;

        $r4 = interfaceinvoke $r3.<jdk.internal.access.JavaLangModuleAccess: java.lang.module.Configuration resolveAndBind(java.lang.module.ModuleFinder,java.util.Collection,java.io.PrintStream)>(r0, r1, r2);

        return $r4;
    }

    public static void transformedByAgent(java.lang.Module)
    {
        java.lang.Module r0, $r1, $r3;
        java.lang.ClassLoader $r2;

        r0 := @parameter0: java.lang.Module;

        $r1 = staticinvoke <jdk.internal.loader.BootLoader: java.lang.Module getUnnamedModule()>();

        staticinvoke <jdk.internal.module.Modules: void addReads(java.lang.Module,java.lang.Module)>(r0, $r1);

        $r2 = staticinvoke <jdk.internal.loader.ClassLoaders: java.lang.ClassLoader appClassLoader()>();

        $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Module getUnnamedModule()>();

        staticinvoke <jdk.internal.module.Modules: void addReads(java.lang.Module,java.lang.Module)>(r0, $r3);

        return;
    }

    public static synchronized java.lang.Module loadModule(java.lang.String)
    {
        java.lang.String r0, r28;
        java.util.Optional $r1, $r21;
        java.lang.Object $r2, $r17, $r23, $r25, $r29, $r33, $r35;
        java.lang.Module r3, $r24, r51;
        java.nio.file.Path[] $r4;
        java.lang.module.ModuleFinder r5, r6;
        java.util.Set r7, $r12, $r20, $r32, $r37, $r43;
        java.lang.module.Configuration $r8, r9;
        java.util.function.Function r10, $r14, $r15;
        java.lang.ModuleLayer r11, r48, r49, $r53;
        java.util.stream.Stream $r13, $r38, $r40, $r44, $r46;
        java.util.stream.Collector $r16;
        java.util.Map r18;
        jdk.internal.access.JavaLangAccess $r19;
        boolean $z0, $z1, $z2, $z3;
        java.util.function.Supplier $r22;
        java.lang.module.ModuleReference r26;
        java.lang.module.ModuleDescriptor $r27, $r36, $r42;
        java.lang.ClassLoader r30;
        jdk.internal.loader.BuiltinClassLoader $r31;
        int $i0;
        java.lang.AssertionError $r34;
        java.util.function.Predicate $r39, $r45;
        java.util.function.Consumer $r41, $r47;
        java.util.Iterator r50, r54;
        java.util.List r52;
        java.lang.module.ResolvedModule r55;

        r0 := @parameter0: java.lang.String;

        r48 = <jdk.internal.module.Modules: java.lang.ModuleLayer topLayer>;

        if r48 != null goto label01;

        r48 = staticinvoke <java.lang.ModuleLayer: java.lang.ModuleLayer boot()>();

     label01:
        $r1 = virtualinvoke r48.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r0);

        $r2 = virtualinvoke $r1.<java.util.Optional: java.lang.Object orElse(java.lang.Object)>(null);

        r3 = (java.lang.Module) $r2;

        if r3 == null goto label02;

        return r3;

     label02:
        $r4 = newarray (java.nio.file.Path)[0];

        r5 = staticinvoke <java.lang.module.ModuleFinder: java.lang.module.ModuleFinder of(java.nio.file.Path[])>($r4);

        r6 = staticinvoke <jdk.internal.module.ModuleBootstrap: java.lang.module.ModuleFinder unlimitedFinder()>();

        r7 = staticinvoke <java.util.Set: java.util.Set of(java.lang.Object)>(r0);

        $r8 = virtualinvoke r48.<java.lang.ModuleLayer: java.lang.module.Configuration configuration()>();

        r9 = virtualinvoke $r8.<java.lang.module.Configuration: java.lang.module.Configuration resolveAndBind(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)>(r5, r6, r7);

        r10 = staticinvoke <jdk.internal.module.ModuleLoaderMap: java.util.function.Function mappingFunction(java.lang.module.Configuration)>(r9);

        r11 = virtualinvoke r48.<java.lang.ModuleLayer: java.lang.ModuleLayer defineModules(java.lang.module.Configuration,java.util.function.Function)>(r9, r10);

        $r12 = virtualinvoke r11.<java.lang.ModuleLayer: java.util.Set modules()>();

        $r13 = interfaceinvoke $r12.<java.util.Set: java.util.stream.Stream stream()>();

        $r14 = staticinvoke <jdk.internal.module.Modules$getName__101: java.util.function.Function bootstrap$()>();

        $r15 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r16 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r14, $r15);

        $r17 = interfaceinvoke $r13.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r16);

        r18 = (java.util.Map) $r17;

        r49 = r48;

     label03:
        if r49 == null goto label09;

        $r32 = virtualinvoke r49.<java.lang.ModuleLayer: java.util.Set modules()>();

        r50 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

     label04:
        $z1 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label05;

        $r35 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>();

        r51 = (java.lang.Module) $r35;

        $r36 = virtualinvoke r51.<java.lang.Module: java.lang.module.ModuleDescriptor getDescriptor()>();

        $r37 = virtualinvoke $r36.<java.lang.module.ModuleDescriptor: java.util.Set exports()>();

        $r38 = interfaceinvoke $r37.<java.util.Set: java.util.stream.Stream stream()>();

        $r39 = staticinvoke <jdk.internal.module.Modules$isQualified__103: java.util.function.Predicate bootstrap$()>();

        $r40 = interfaceinvoke $r38.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r39);

        $r41 = staticinvoke <jdk.internal.module.Modules$lambda_loadModule_1__104: java.util.function.Consumer bootstrap$(java.util.Map,java.lang.Module)>(r18, r51);

        interfaceinvoke $r40.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r41);

        $r42 = virtualinvoke r51.<java.lang.Module: java.lang.module.ModuleDescriptor getDescriptor()>();

        $r43 = virtualinvoke $r42.<java.lang.module.ModuleDescriptor: java.util.Set opens()>();

        $r44 = interfaceinvoke $r43.<java.util.Set: java.util.stream.Stream stream()>();

        $r45 = staticinvoke <jdk.internal.module.Modules$isQualified__105: java.util.function.Predicate bootstrap$()>();

        $r46 = interfaceinvoke $r44.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r45);

        $r47 = staticinvoke <jdk.internal.module.Modules$lambda_loadModule_3__106: java.util.function.Consumer bootstrap$(java.util.Map,java.lang.Module)>(r18, r51);

        interfaceinvoke $r46.<java.util.stream.Stream: void forEach(java.util.function.Consumer)>($r47);

        goto label04;

     label05:
        r52 = virtualinvoke r49.<java.lang.ModuleLayer: java.util.List parents()>();

        $z2 = <jdk.internal.module.Modules: boolean $assertionsDisabled>;

        if $z2 != 0 goto label06;

        $i0 = interfaceinvoke r52.<java.util.List: int size()>();

        if $i0 <= 1 goto label06;

        $r34 = new java.lang.AssertionError;

        specialinvoke $r34.<java.lang.AssertionError: void <init>()>();

        throw $r34;

     label06:
        $z3 = interfaceinvoke r52.<java.util.List: boolean isEmpty()>();

        if $z3 == 0 goto label07;

        $r53 = null;

        goto label08;

     label07:
        $r33 = interfaceinvoke r52.<java.util.List: java.lang.Object get(int)>(0);

        $r53 = (java.lang.ModuleLayer) $r33;

     label08:
        r49 = $r53;

        goto label03;

     label09:
        $r19 = <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA>;

        interfaceinvoke $r19.<jdk.internal.access.JavaLangAccess: void addNonExportedPackages(java.lang.ModuleLayer)>(r11);

        $r20 = virtualinvoke r9.<java.lang.module.Configuration: java.util.Set modules()>();

        r54 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>();

     label10:
        $z0 = interfaceinvoke r54.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label13;

        $r25 = interfaceinvoke r54.<java.util.Iterator: java.lang.Object next()>();

        r55 = (java.lang.module.ResolvedModule) $r25;

        r26 = virtualinvoke r55.<java.lang.module.ResolvedModule: java.lang.module.ModuleReference reference()>();

        $r27 = virtualinvoke r26.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        r28 = virtualinvoke $r27.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        $r29 = interfaceinvoke r10.<java.util.function.Function: java.lang.Object apply(java.lang.Object)>(r28);

        r30 = (java.lang.ClassLoader) $r29;

        if r30 != null goto label11;

        staticinvoke <jdk.internal.loader.BootLoader: void loadModule(java.lang.module.ModuleReference)>(r26);

        goto label12;

     label11:
        $r31 = (jdk.internal.loader.BuiltinClassLoader) r30;

        virtualinvoke $r31.<jdk.internal.loader.BuiltinClassLoader: void loadModule(java.lang.module.ModuleReference)>(r26);

     label12:
        goto label10;

     label13:
        <jdk.internal.module.Modules: java.lang.ModuleLayer topLayer> = r11;

        $r21 = virtualinvoke r11.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r0);

        $r22 = staticinvoke <jdk.internal.module.Modules$lambda_loadModule_4__102: java.util.function.Supplier bootstrap$()>();

        $r23 = virtualinvoke $r21.<java.util.Optional: java.lang.Object orElseThrow(java.util.function.Supplier)>($r22);

        $r24 = (java.lang.Module) $r23;

        return $r24;
    }

    public static java.util.Optional findLoadedModule(java.lang.String)
    {
        java.lang.String r0;
        java.util.Optional $r1;
        java.lang.ModuleLayer r2;

        r0 := @parameter0: java.lang.String;

        r2 = <jdk.internal.module.Modules: java.lang.ModuleLayer topLayer>;

        if r2 != null goto label1;

        r2 = staticinvoke <java.lang.ModuleLayer: java.lang.ModuleLayer boot()>();

     label1:
        $r1 = virtualinvoke r2.<java.lang.ModuleLayer: java.util.Optional findModule(java.lang.String)>(r0);

        return $r1;
    }

    public static java.lang.InternalError lambda$loadModule$4()
    {
        java.lang.InternalError $r0;

        $r0 = new java.lang.InternalError;

        specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>("module not loaded");

        return $r0;
    }

    public static void lambda$loadModule$3(java.util.Map, java.lang.Module, java.lang.module.ModuleDescriptor$Opens)
    {
        java.lang.module.ModuleDescriptor$Opens r0;
        java.util.Set $r1;
        java.util.Map r2;
        java.lang.Module r3;
        java.util.function.Consumer $r4;

        r2 := @parameter0: java.util.Map;

        r3 := @parameter1: java.lang.Module;

        r0 := @parameter2: java.lang.module.ModuleDescriptor$Opens;

        $r1 = virtualinvoke r0.<java.lang.module.ModuleDescriptor$Opens: java.util.Set targets()>();

        $r4 = staticinvoke <jdk.internal.module.Modules$lambda_loadModule_2__107: java.util.function.Consumer bootstrap$(java.util.Map,java.lang.Module,java.lang.module.ModuleDescriptor$Opens)>(r2, r3, r0);

        interfaceinvoke $r1.<java.util.Set: void forEach(java.util.function.Consumer)>($r4);

        return;
    }

    public static void lambda$loadModule$2(java.util.Map, java.lang.Module, java.lang.module.ModuleDescriptor$Opens, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1, $r6;
        java.lang.Object $r2;
        java.lang.Module r3, r4;
        java.lang.module.ModuleDescriptor$Opens r5;

        r0 := @parameter0: java.util.Map;

        r4 := @parameter1: java.lang.Module;

        r5 := @parameter2: java.lang.module.ModuleDescriptor$Opens;

        r1 := @parameter3: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.Module) $r2;

        if r3 == null goto label1;

        $r6 = virtualinvoke r5.<java.lang.module.ModuleDescriptor$Opens: java.lang.String source()>();

        staticinvoke <jdk.internal.module.Modules: void addOpens(java.lang.Module,java.lang.String,java.lang.Module)>(r4, $r6, r3);

     label1:
        return;
    }

    public static void lambda$loadModule$1(java.util.Map, java.lang.Module, java.lang.module.ModuleDescriptor$Exports)
    {
        java.lang.module.ModuleDescriptor$Exports r0;
        java.util.Set $r1;
        java.util.Map r2;
        java.lang.Module r3;
        java.util.function.Consumer $r4;

        r2 := @parameter0: java.util.Map;

        r3 := @parameter1: java.lang.Module;

        r0 := @parameter2: java.lang.module.ModuleDescriptor$Exports;

        $r1 = virtualinvoke r0.<java.lang.module.ModuleDescriptor$Exports: java.util.Set targets()>();

        $r4 = staticinvoke <jdk.internal.module.Modules$lambda_loadModule_0__108: java.util.function.Consumer bootstrap$(java.util.Map,java.lang.Module,java.lang.module.ModuleDescriptor$Exports)>(r2, r3, r0);

        interfaceinvoke $r1.<java.util.Set: void forEach(java.util.function.Consumer)>($r4);

        return;
    }

    public static void lambda$loadModule$0(java.util.Map, java.lang.Module, java.lang.module.ModuleDescriptor$Exports, java.lang.String)
    {
        java.util.Map r0;
        java.lang.String r1, $r6;
        java.lang.Object $r2;
        java.lang.Module r3, r4;
        java.lang.module.ModuleDescriptor$Exports r5;

        r0 := @parameter0: java.util.Map;

        r4 := @parameter1: java.lang.Module;

        r5 := @parameter2: java.lang.module.ModuleDescriptor$Exports;

        r1 := @parameter3: java.lang.String;

        $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.lang.Module) $r2;

        if r3 == null goto label1;

        $r6 = virtualinvoke r5.<java.lang.module.ModuleDescriptor$Exports: java.lang.String source()>();

        staticinvoke <jdk.internal.module.Modules: void addExports(java.lang.Module,java.lang.String,java.lang.Module)>(r4, $r6, r3);

     label1:
        return;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;
        jdk.internal.access.JavaLangAccess $r1;
        jdk.internal.access.JavaLangModuleAccess $r2;

        $r0 = class "Ljdk/internal/module/Modules;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <jdk.internal.module.Modules: boolean $assertionsDisabled> = $z1;

        $r1 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangAccess getJavaLangAccess()>();

        <jdk.internal.module.Modules: jdk.internal.access.JavaLangAccess JLA> = $r1;

        $r2 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaLangModuleAccess getJavaLangModuleAccess()>();

        <jdk.internal.module.Modules: jdk.internal.access.JavaLangModuleAccess JLMA> = $r2;

        return;
    }
}
