public class jdk.internal.module.IllegalAccessLogger$Builder extends java.lang.Object
{
    private final jdk.internal.module.IllegalAccessLogger$Mode mode;
    private final java.io.PrintStream warningStream;
    private final java.util.Map moduleToConcealedPackages;
    private final java.util.Map moduleToExportedPackages;
    private boolean complete;

    private void ensureNotComplete()
    {
        jdk.internal.module.IllegalAccessLogger$Builder r0;
        boolean $z0;
        java.lang.IllegalStateException $r1;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Builder;

        $z0 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: boolean complete>;

        if $z0 == 0 goto label1;

        $r1 = new java.lang.IllegalStateException;

        specialinvoke $r1.<java.lang.IllegalStateException: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public void <init>(jdk.internal.module.IllegalAccessLogger$Mode, java.io.PrintStream)
    {
        jdk.internal.module.IllegalAccessLogger$Builder r0;
        jdk.internal.module.IllegalAccessLogger$Mode r1;
        java.io.PrintStream r2;
        java.util.HashMap $r3, $r4;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Builder;

        r1 := @parameter0: jdk.internal.module.IllegalAccessLogger$Mode;

        r2 := @parameter1: java.io.PrintStream;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.module.IllegalAccessLogger$Builder: jdk.internal.module.IllegalAccessLogger$Mode mode> = r1;

        r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.io.PrintStream warningStream> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.util.Map moduleToConcealedPackages> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.util.Map moduleToExportedPackages> = $r4;

        return;
    }

    public jdk.internal.module.IllegalAccessLogger$Builder logAccessToConcealedPackages(java.lang.Module, java.util.Set)
    {
        jdk.internal.module.IllegalAccessLogger$Builder r0;
        java.lang.Module r1;
        java.util.Set r2, $r4;
        java.util.Map $r3;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Builder;

        r1 := @parameter0: java.lang.Module;

        r2 := @parameter1: java.util.Set;

        virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger$Builder: void ensureNotComplete()>();

        $r3 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.util.Map moduleToConcealedPackages>;

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return r0;
    }

    public jdk.internal.module.IllegalAccessLogger$Builder logAccessToExportedPackages(java.lang.Module, java.util.Set)
    {
        jdk.internal.module.IllegalAccessLogger$Builder r0;
        java.lang.Module r1;
        java.util.Set r2, $r4;
        java.util.Map $r3;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Builder;

        r1 := @parameter0: java.lang.Module;

        r2 := @parameter1: java.util.Set;

        virtualinvoke r0.<jdk.internal.module.IllegalAccessLogger$Builder: void ensureNotComplete()>();

        $r3 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.util.Map moduleToExportedPackages>;

        $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return r0;
    }

    public void complete()
    {
        jdk.internal.module.IllegalAccessLogger$Builder r0;
        java.util.Map $r1, r2, $r3, r4;
        jdk.internal.module.IllegalAccessLogger $r5;
        java.io.PrintStream $r6;
        jdk.internal.module.IllegalAccessLogger$Mode $r7;

        r0 := @this: jdk.internal.module.IllegalAccessLogger$Builder;

        $r1 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.util.Map moduleToConcealedPackages>;

        r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r1);

        $r3 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.util.Map moduleToExportedPackages>;

        r4 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3);

        $r5 = new jdk.internal.module.IllegalAccessLogger;

        $r7 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: jdk.internal.module.IllegalAccessLogger$Mode mode>;

        $r6 = r0.<jdk.internal.module.IllegalAccessLogger$Builder: java.io.PrintStream warningStream>;

        specialinvoke $r5.<jdk.internal.module.IllegalAccessLogger: void <init>(jdk.internal.module.IllegalAccessLogger$Mode,java.io.PrintStream,java.util.Map,java.util.Map)>($r7, $r6, r2, r4);

        <jdk.internal.module.IllegalAccessLogger: jdk.internal.module.IllegalAccessLogger logger> = $r5;

        r0.<jdk.internal.module.IllegalAccessLogger$Builder: boolean complete> = 1;

        return;
    }
}
