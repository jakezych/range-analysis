public class jdk.internal.jimage.ImageStringsReader extends java.lang.Object implements jdk.internal.jimage.ImageStrings
{
    public static final int HASH_MULTIPLIER;
    public static final int POSITIVE_MASK;
    private final jdk.internal.jimage.BasicImageReader reader;

    void <init>(jdk.internal.jimage.BasicImageReader)
    {
        jdk.internal.jimage.ImageStringsReader r0;
        jdk.internal.jimage.BasicImageReader r1, $r3;
        java.lang.Object $r2;

        r0 := @this: jdk.internal.jimage.ImageStringsReader;

        r1 := @parameter0: jdk.internal.jimage.BasicImageReader;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (jdk.internal.jimage.BasicImageReader) $r2;

        r0.<jdk.internal.jimage.ImageStringsReader: jdk.internal.jimage.BasicImageReader reader> = $r3;

        return;
    }

    public java.lang.String get(int)
    {
        jdk.internal.jimage.ImageStringsReader r0;
        int i0;
        jdk.internal.jimage.BasicImageReader $r1;
        java.lang.String $r2;

        r0 := @this: jdk.internal.jimage.ImageStringsReader;

        i0 := @parameter0: int;

        $r1 = r0.<jdk.internal.jimage.ImageStringsReader: jdk.internal.jimage.BasicImageReader reader>;

        $r2 = virtualinvoke $r1.<jdk.internal.jimage.BasicImageReader: java.lang.String getString(int)>(i0);

        return $r2;
    }

    public int add(java.lang.String)
    {
        java.lang.InternalError $r0;
        jdk.internal.jimage.ImageStringsReader r1;
        java.lang.String r2;

        r1 := @this: jdk.internal.jimage.ImageStringsReader;

        r2 := @parameter0: java.lang.String;

        $r0 = new java.lang.InternalError;

        specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>("Can not add strings at runtime");

        throw $r0;
    }

    public static int hashCode(java.lang.String)
    {
        java.lang.String r0;
        int $i0;

        r0 := @parameter0: java.lang.String;

        $i0 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int hashCode(java.lang.String,int)>(r0, 16777619);

        return $i0;
    }

    public static int hashCode(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i1, $i2;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        $i1 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int unmaskedHashCode(java.lang.String,int)>(r0, i0);

        $i2 = $i1 & 2147483647;

        return $i2;
    }

    public static int hashCode(java.lang.String, java.lang.String)
    {
        java.lang.String r0, r1;
        int $i0;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        $i0 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int hashCode(java.lang.String,java.lang.String,int)>(r0, r1, 16777619);

        return $i0;
    }

    public static int hashCode(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1;
        int $i0, i1, i2, i3, i4, i5;

        r0 := @parameter0: java.lang.String;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int unmaskedHashCode(java.lang.String,int)>("/", i1);

        i3 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int unmaskedHashCode(java.lang.String,int)>(r0, i2);

        i4 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int unmaskedHashCode(java.lang.String,int)>("/", i3);

        i5 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int unmaskedHashCode(java.lang.String,int)>(r1, i4);

        $i0 = i5 & 2147483647;

        return $i0;
    }

    public static int unmaskedHashCode(java.lang.String, int)
    {
        java.lang.String r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7, $i9, $i11, $i12, i13, i14, i15, i16, i17, $i18, $i19, $i20, $i22, i23;
        char c1;
        byte $b8, $b10, $b21;
        byte[] r1;

        r0 := @parameter0: java.lang.String;

        i13 := @parameter1: int;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        r1 = null;

        i14 = 0;

     label1:
        if i14 >= i0 goto label8;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        i15 = c1 & 65535;

        $i2 = i15 & -128;

        if $i2 == 0 goto label5;

        if r1 != null goto label2;

        r1 = newarray (byte)[8];

     label2:
        i16 = -64;

        i17 = 0;

     label3:
        $i18 = i17;

        i17 = i17 + 1;

        $i19 = i15 & 63;

        $i20 = 128 | $i19;

        $b21 = (byte) $i20;

        r1[$i18] = $b21;

        i15 = i15 >> 6;

        i16 = i16 >> 1;

        $i22 = i15 & i16;

        if $i22 != 0 goto label3;

        $i6 = i16 << 1;

        $i7 = $i6 | i15;

        $b8 = (byte) $i7;

        r1[i17] = $b8;

     label4:
        $i12 = i13 * 16777619;

        $i9 = i17;

        i17 = i17 + -1;

        $b10 = r1[$i9];

        $i11 = $b10 & 255;

        i13 = $i12 ^ $i11;

        if 0 <= i17 goto label4;

        goto label7;

     label5:
        if i15 != 0 goto label6;

        $i4 = i13 * 16777619;

        i23 = $i4 ^ 192;

        $i5 = i23 * 16777619;

        i13 = $i5 ^ 128;

        goto label7;

     label6:
        $i3 = i13 * 16777619;

        i13 = $i3 ^ i15;

     label7:
        i14 = i14 + 1;

        goto label1;

     label8:
        return i13;
    }

    static int charsFromMUTF8Length(byte[], int, int)
    {
        int i0, i1, $i2, $i4, i5, i6;
        byte[] r0;
        byte b3;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = 0;

        i6 = i0;

     label1:
        $i2 = i0 + i1;

        if i6 >= $i2 goto label4;

        b3 = r0[i6];

        if b3 != 0 goto label2;

        goto label4;

     label2:
        $i4 = b3 & 192;

        if $i4 == 128 goto label3;

        i5 = i5 + 1;

     label3:
        i6 = i6 + 1;

        goto label1;

     label4:
        return i5;
    }

    static void charsFromMUTF8(char[], byte[], int, int) throws java.io.UTFDataFormatException
    {
        int i0, i1, $i2, $i3, $i4, $i6, $i7, $i8, $i9, $i10, $i11, $i12, i13, i14, i16, i17;
        byte[] r0;
        char[] r1;
        char $c5;
        java.io.UTFDataFormatException $r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r9, $r10, $r12;
        java.lang.String $r5, $r7, $r11, $r13;
        byte b15, b18;
        boolean $z1;

        r1 := @parameter0: char[];

        r0 := @parameter1: byte[];

        i0 := @parameter2: int;

        i1 := @parameter3: int;

        i13 = 0;

        i14 = i0;

     label1:
        $i2 = i0 + i1;

        if i14 >= $i2 goto label9;

        b15 = r0[i14];

        if b15 != 0 goto label2;

        goto label9;

     label2:
        $i3 = b15 & 128;

        if $i3 == 0 goto label3;

        $z1 = 1;

        goto label4;

     label3:
        $z1 = 0;

     label4:
        i16 = b15 & 127;

        if $z1 == 0 goto label8;

        i17 = 64;

     label5:
        $i6 = i16 & i17;

        if $i6 == 0 goto label7;

        i14 = i14 + 1;

        b18 = r0[i14];

        $i8 = b18 & 192;

        if $i8 == 128 goto label6;

        $r8 = new java.io.UTFDataFormatException;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bad continuation 0x");

        $r11 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(b18);

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r13);

        throw $r8;

     label6:
        $i9 = i17 ^ -1;

        $i10 = i16 & $i9;

        $i12 = $i10 << 6;

        $i11 = b18 & 63;

        i16 = $i12 | $i11;

        i17 = i17 << 5;

        goto label5;

     label7:
        $i7 = i16 & 65535;

        if $i7 == i16 goto label8;

        $r2 = new java.io.UTFDataFormatException;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("character out of range \\u");

        $r5 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i16);

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r2.<java.io.UTFDataFormatException: void <init>(java.lang.String)>($r7);

        throw $r2;

     label8:
        $i4 = i13;

        i13 = i13 + 1;

        $c5 = (char) i16;

        r1[$i4] = $c5;

        i14 = i14 + 1;

        goto label1;

     label9:
        return;
    }

    public static java.lang.String stringFromMUTF8(byte[], int, int)
    {
        byte[] r0;
        int i0, i1, i2;
        char[] r1;
        java.lang.String $r2;
        java.io.UTFDataFormatException $r3;
        java.lang.InternalError $r5;

        r0 := @parameter0: byte[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i2 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int charsFromMUTF8Length(byte[],int,int)>(r0, i0, i1);

        r1 = newarray (char)[i2];

     label1:
        staticinvoke <jdk.internal.jimage.ImageStringsReader: void charsFromMUTF8(char[],byte[],int,int)>(r1, r0, i0, i1);

     label2:
        goto label4;

     label3:
        $r3 := @caughtexception;

        $r5 = new java.lang.InternalError;

        specialinvoke $r5.<java.lang.InternalError: void <init>(java.lang.String,java.lang.Throwable)>("Attempt to convert non modified UTF-8 byte sequence", $r3);

        throw $r5;

     label4:
        $r2 = new java.lang.String;

        specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1);

        return $r2;

        catch java.io.UTFDataFormatException from label1 to label2 with label3;
    }

    public static java.lang.String stringFromMUTF8(byte[])
    {
        byte[] r0;
        int $i0;
        java.lang.String $r1;

        r0 := @parameter0: byte[];

        $i0 = lengthof r0;

        $r1 = staticinvoke <jdk.internal.jimage.ImageStringsReader: java.lang.String stringFromMUTF8(byte[],int,int)>(r0, 0, $i0);

        return $r1;
    }

    static int charsFromByteBufferLength(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0;
        java.lang.InternalError $r1;
        byte b0;
        int $i1, i2;

        r0 := @parameter0: java.nio.ByteBuffer;

        i2 = 0;

     label1:
        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label4;

        b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        if b0 != 0 goto label2;

        return i2;

     label2:
        $i1 = b0 & 192;

        if $i1 == 128 goto label3;

        i2 = i2 + 1;

     label3:
        goto label1;

     label4:
        $r1 = new java.lang.InternalError;

        specialinvoke $r1.<java.lang.InternalError: void <init>(java.lang.String)>("No terminating zero byte for modified UTF-8 byte sequence");

        throw $r1;
    }

    static void charsFromByteBuffer(char[], java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        boolean $z0, $z2;
        java.lang.InternalError $r1, $r3, $r8;
        int $i0, $i1, $i2, $i4, $i5, $i6, $i7, $i8, $i9, i10, i12, i13;
        char[] r2;
        char $c3;
        java.lang.StringBuilder $r4, $r5, $r6, $r9, $r10, $r11;
        java.lang.String $r7, $r12;
        byte b11, b14;

        r2 := @parameter0: char[];

        r0 := @parameter1: java.nio.ByteBuffer;

        i10 = 0;

     label1:
        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label9;

        b11 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        if b11 != 0 goto label2;

        return;

     label2:
        $i0 = b11 & 128;

        if $i0 == 0 goto label3;

        $z2 = 1;

        goto label4;

     label3:
        $z2 = 0;

     label4:
        i12 = b11 & 127;

        if $z2 == 0 goto label7;

        i13 = 64;

     label5:
        $i4 = i12 & i13;

        if $i4 == 0 goto label7;

        b14 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i5 = b14 & 192;

        if $i5 == 128 goto label6;

        $r8 = new java.lang.InternalError;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>()>();

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad continuation in modified UTF-8 byte sequence: ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b14);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>($r12);

        throw $r8;

     label6:
        $i6 = i13 ^ -1;

        $i7 = i12 & $i6;

        $i9 = $i7 << 6;

        $i8 = b14 & 63;

        i12 = $i9 | $i8;

        i13 = i13 << 5;

        goto label5;

     label7:
        $i1 = i12 & 65535;

        if $i1 == i12 goto label8;

        $r3 = new java.lang.InternalError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UTF-32 char in modified UTF-8 byte sequence: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i12);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.InternalError: void <init>(java.lang.String)>($r7);

        throw $r3;

     label8:
        $i2 = i10;

        i10 = i10 + 1;

        $c3 = (char) i12;

        r2[$i2] = $c3;

        goto label1;

     label9:
        $r1 = new java.lang.InternalError;

        specialinvoke $r1.<java.lang.InternalError: void <init>(java.lang.String)>("No terminating zero byte for modified UTF-8 byte sequence");

        throw $r1;
    }

    public static java.lang.String stringFromByteBuffer(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        int i0;
        char[] r2;
        java.lang.String $r3;

        r0 := @parameter0: java.nio.ByteBuffer;

        i0 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int charsFromByteBufferLength(java.nio.ByteBuffer)>(r0);

        virtualinvoke r0.<java.nio.ByteBuffer: java.nio.ByteBuffer rewind()>();

        r2 = newarray (char)[i0];

        staticinvoke <jdk.internal.jimage.ImageStringsReader: void charsFromByteBuffer(char[],java.nio.ByteBuffer)>(r2, r0);

        $r3 = new java.lang.String;

        specialinvoke $r3.<java.lang.String: void <init>(char[])>(r2);

        return $r3;
    }

    static int mutf8FromStringLength(java.lang.String)
    {
        java.lang.String r0;
        int i0, $i2, $i3, $i4, i5, i6, i7, i8, i9;
        char c1;

        r0 := @parameter0: java.lang.String;

        i5 = 0;

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = 0;

     label1:
        if i6 >= i0 goto label6;

        c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        i7 = c1 & 65535;

        $i2 = i7 & -128;

        if $i2 == 0 goto label3;

        i8 = -64;

        i9 = 0;

     label2:
        i9 = i9 + 1;

        i7 = i7 >> 6;

        i8 = i8 >> 1;

        $i3 = i7 & i8;

        if $i3 != 0 goto label2;

        $i4 = i9 + 1;

        i5 = i5 + $i4;

        goto label5;

     label3:
        if i7 != 0 goto label4;

        i5 = i5 + 2;

        goto label5;

     label4:
        i5 = i5 + 1;

     label5:
        i6 = i6 + 1;

        goto label1;

     label6:
        return i5;
    }

    static void mutf8FromString(byte[], int, java.lang.String)
    {
        int i0, i1, $i3, $i4, $i6, $i7, $i9, $i10, i12, i13, i14, i15, i16, $i17, $i18, $i19, $i21, i22;
        java.lang.String r0;
        char c2;
        byte[] r1, r2;
        byte $b5, $b8, $b11, $b20;

        r1 := @parameter0: byte[];

        i0 := @parameter1: int;

        r0 := @parameter2: java.lang.String;

        i12 = i0;

        r2 = null;

        i1 = virtualinvoke r0.<java.lang.String: int length()>();

        i13 = 0;

     label1:
        if i13 >= i1 goto label8;

        c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        i14 = c2 & 65535;

        $i3 = i14 & -128;

        if $i3 == 0 goto label5;

        if r2 != null goto label2;

        r2 = newarray (byte)[8];

     label2:
        i15 = -64;

        i16 = 0;

     label3:
        $i17 = i16;

        i16 = i16 + 1;

        $i18 = i14 & 63;

        $i19 = 128 | $i18;

        $b20 = (byte) $i19;

        r2[$i17] = $b20;

        i14 = i14 >> 6;

        i15 = i15 >> 1;

        $i21 = i14 & i15;

        if $i21 != 0 goto label3;

        $i6 = i15 << 1;

        $i7 = $i6 | i14;

        $b8 = (byte) $i7;

        r2[i16] = $b8;

     label4:
        $i9 = i12;

        i12 = i12 + 1;

        $i10 = i16;

        i16 = i16 + -1;

        $b11 = r2[$i10];

        r1[$i9] = $b11;

        if 0 <= i16 goto label4;

        goto label7;

     label5:
        if i14 != 0 goto label6;

        i22 = i12 + 1;

        r1[i12] = -64;

        i12 = i22 + 1;

        r1[i22] = -128;

        goto label7;

     label6:
        $i4 = i12;

        i12 = i12 + 1;

        $b5 = (byte) i14;

        r1[$i4] = $b5;

     label7:
        i13 = i13 + 1;

        goto label1;

     label8:
        return;
    }

    public static byte[] mutf8FromString(java.lang.String)
    {
        java.lang.String r0;
        int i0;
        byte[] r1;

        r0 := @parameter0: java.lang.String;

        i0 = staticinvoke <jdk.internal.jimage.ImageStringsReader: int mutf8FromStringLength(java.lang.String)>(r0);

        r1 = newarray (byte)[i0];

        staticinvoke <jdk.internal.jimage.ImageStringsReader: void mutf8FromString(byte[],int,java.lang.String)>(r1, 0, r0);

        return r1;
    }

    public static void <clinit>()
    {
        <jdk.internal.jimage.ImageStringsReader: int POSITIVE_MASK> = 2147483647;

        <jdk.internal.jimage.ImageStringsReader: int HASH_MULTIPLIER> = 16777619;

        return;
    }
}
