public class jdk.internal.jimage.ImageLocation extends java.lang.Object
{
    public static final int ATTRIBUTE_END;
    public static final int ATTRIBUTE_MODULE;
    public static final int ATTRIBUTE_PARENT;
    public static final int ATTRIBUTE_BASE;
    public static final int ATTRIBUTE_EXTENSION;
    public static final int ATTRIBUTE_OFFSET;
    public static final int ATTRIBUTE_COMPRESSED;
    public static final int ATTRIBUTE_UNCOMPRESSED;
    public static final int ATTRIBUTE_COUNT;
    protected final long[] attributes;
    protected final jdk.internal.jimage.ImageStrings strings;

    public void <init>(long[], jdk.internal.jimage.ImageStrings)
    {
        jdk.internal.jimage.ImageLocation r0;
        long[] r1, $r3;
        java.lang.Object $r2, $r5;
        jdk.internal.jimage.ImageStrings r4, $r6;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        r1 := @parameter0: long[];

        r4 := @parameter1: jdk.internal.jimage.ImageStrings;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (long[]) $r2;

        r0.<jdk.internal.jimage.ImageLocation: long[] attributes> = $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r6 = (jdk.internal.jimage.ImageStrings) $r5;

        r0.<jdk.internal.jimage.ImageLocation: jdk.internal.jimage.ImageStrings strings> = $r6;

        return;
    }

    jdk.internal.jimage.ImageStrings getStrings()
    {
        jdk.internal.jimage.ImageLocation r0;
        jdk.internal.jimage.ImageStrings $r1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $r1 = r0.<jdk.internal.jimage.ImageLocation: jdk.internal.jimage.ImageStrings strings>;

        return $r1;
    }

    static long[] decompress(java.nio.ByteBuffer)
    {
        java.nio.ByteBuffer r0;
        long[] r2;
        boolean $z0, $z1;
        byte $b0, $b5;
        int i1, i2, $i3, i4, $i6, i9;
        java.lang.InternalError $r3, $r8;
        java.lang.StringBuilder $r4, $r5, $r6;
        java.lang.String $r7;
        long $l7, l8, l10;

        r0 := @parameter0: java.nio.ByteBuffer;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r2 = newarray (long)[8];

        if r0 == null goto label8;

     label1:
        $z0 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z0 == 0 goto label8;

        $b0 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        i1 = $b0 & 255;

        i2 = i1 >>> 3;

        if i2 != 0 goto label2;

        goto label8;

     label2:
        if i2 < 0 goto label3;

        if 8 > i2 goto label4;

     label3:
        $r3 = new java.lang.InternalError;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid jimage attribute kind: ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r3.<java.lang.InternalError: void <init>(java.lang.String)>($r7);

        throw $r3;

     label4:
        $i3 = i1 & 7;

        i4 = $i3 + 1;

        l8 = 0L;

        i9 = 0;

     label5:
        if i9 >= i4 goto label7;

        l10 = l8 << 8;

        $z1 = virtualinvoke r0.<java.nio.ByteBuffer: boolean hasRemaining()>();

        if $z1 != 0 goto label6;

        $r8 = new java.lang.InternalError;

        specialinvoke $r8.<java.lang.InternalError: void <init>(java.lang.String)>("Missing jimage attribute data");

        throw $r8;

     label6:
        $b5 = virtualinvoke r0.<java.nio.ByteBuffer: byte get()>();

        $i6 = $b5 & 255;

        $l7 = (long) $i6;

        l8 = l10 | $l7;

        i9 = i9 + 1;

        goto label5;

     label7:
        r2[i2] = l8;

        goto label1;

     label8:
        return r2;
    }

    public static byte[] compress(long[])
    {
        long[] r0;
        jdk.internal.jimage.ImageStream $r2;
        byte[] $r5;
        long l0, $l8;
        byte $b1;
        int $i2, $i3, i4, $i5, $i6, $i7, $i9, i10, i11;

        r0 := @parameter0: long[];

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        $r2 = new jdk.internal.jimage.ImageStream;

        specialinvoke $r2.<jdk.internal.jimage.ImageStream: void <init>(int)>(16);

        i10 = 1;

     label1:
        if i10 >= 8 goto label4;

        l0 = r0[i10];

        $b1 = l0 cmp 0L;

        if $b1 == 0 goto label3;

        $i2 = staticinvoke <java.lang.Long: int numberOfLeadingZeros(long)>(l0);

        $i3 = 63 - $i2;

        i4 = $i3 >> 3;

        $i5 = i10 << 3;

        $i6 = $i5 | i4;

        virtualinvoke $r2.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream put(int)>($i6);

        i11 = i4;

     label2:
        if i11 < 0 goto label3;

        $i7 = i11 << 3;

        $l8 = l0 >> $i7;

        $i9 = (int) $l8;

        virtualinvoke $r2.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream put(int)>($i9);

        i11 = i11 + -1;

        goto label2;

     label3:
        i10 = i10 + 1;

        goto label1;

     label4:
        virtualinvoke $r2.<jdk.internal.jimage.ImageStream: jdk.internal.jimage.ImageStream put(int)>(0);

        $r5 = virtualinvoke $r2.<jdk.internal.jimage.ImageStream: byte[] toArray()>();

        return $r5;
    }

    public boolean verify(java.lang.String)
    {
        java.lang.String r0;
        jdk.internal.jimage.ImageLocation r1;
        jdk.internal.jimage.ImageStrings $r2;
        long[] $r3;
        boolean $z0;

        r1 := @this: jdk.internal.jimage.ImageLocation;

        r0 := @parameter0: java.lang.String;

        $r3 = r1.<jdk.internal.jimage.ImageLocation: long[] attributes>;

        $r2 = r1.<jdk.internal.jimage.ImageLocation: jdk.internal.jimage.ImageStrings strings>;

        $z0 = staticinvoke <jdk.internal.jimage.ImageLocation: boolean verify(java.lang.String,long[],jdk.internal.jimage.ImageStrings)>(r0, $r3, $r2);

        return $z0;
    }

    static boolean verify(java.lang.String, long[], jdk.internal.jimage.ImageStrings)
    {
        java.lang.String r0, r4;
        int i0, i2, i3, i6, i7;
        long[] r2;
        long $l1;
        jdk.internal.jimage.ImageStrings r3;
        boolean $z0, $z1;
        char $c4, $c5;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: long[];

        r3 := @parameter2: jdk.internal.jimage.ImageStrings;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        i0 = virtualinvoke r0.<java.lang.String: int length()>();

        i6 = 0;

        $l1 = r2[1];

        i2 = (int) $l1;

        if i2 == 0 goto label2;

        r4 = interfaceinvoke r3.<jdk.internal.jimage.ImageStrings: java.lang.String get(int)>(i2);

        i3 = virtualinvoke r4.<java.lang.String: int length()>();

        i7 = i3 + 1;

        if i0 <= i7 goto label1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0);

        if $c4 != 47 goto label1;

        $z1 = virtualinvoke r0.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(1, r4, 0, i3);

        if $z1 == 0 goto label1;

        i6 = i7 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7);

        if $c5 == 47 goto label2;

     label1:
        return 0;

     label2:
        $z0 = staticinvoke <jdk.internal.jimage.ImageLocation: boolean verifyName(java.lang.String,int,int,long[],jdk.internal.jimage.ImageStrings)>(r0, i6, i0, r2, r3);

        return $z0;
    }

    static boolean verify(java.lang.String, java.lang.String, long[], jdk.internal.jimage.ImageStrings)
    {
        java.lang.String r0, r2, $r6;
        long[] r4;
        long $l0;
        int i1, $i2;
        jdk.internal.jimage.ImageStrings r5;
        boolean $z0, $z1;

        r0 := @parameter0: java.lang.String;

        r2 := @parameter1: java.lang.String;

        r4 := @parameter2: long[];

        r5 := @parameter3: jdk.internal.jimage.ImageStrings;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r2);

        $l0 = r4[1];

        i1 = (int) $l0;

        if i1 == 0 goto label1;

        $r6 = interfaceinvoke r5.<jdk.internal.jimage.ImageStrings: java.lang.String get(int)>(i1);

        $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r6);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        $i2 = virtualinvoke r2.<java.lang.String: int length()>();

        $z0 = staticinvoke <jdk.internal.jimage.ImageLocation: boolean verifyName(java.lang.String,int,int,long[],jdk.internal.jimage.ImageStrings)>(r2, 0, $i2, r4, r5);

        return $z0;
    }

    private static boolean verifyName(java.lang.String, int, int, long[], jdk.internal.jimage.ImageStrings)
    {
        long[] r0;
        long $l0, $l2, $l4;
        int i1, $i3, i5, i6, i7, i10, i11, i12, i13, i14, i15;
        jdk.internal.jimage.ImageStrings r1;
        java.lang.String r2, r3, r4, r5;
        boolean $z0, $z1, $z2, $z3;
        char $c8, $c9;

        r2 := @parameter0: java.lang.String;

        i10 := @parameter1: int;

        i6 := @parameter2: int;

        r0 := @parameter3: long[];

        r1 := @parameter4: jdk.internal.jimage.ImageStrings;

        $l0 = r0[2];

        i1 = (int) $l0;

        if i1 == 0 goto label3;

        r4 = interfaceinvoke r1.<jdk.internal.jimage.ImageStrings: java.lang.String get(int)>(i1);

        i11 = virtualinvoke r4.<java.lang.String: int length()>();

        $z2 = virtualinvoke r2.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i10, r4, 0, i11);

        if $z2 != 0 goto label1;

        return 0;

     label1:
        i12 = i10 + i11;

        if i6 <= i12 goto label2;

        i10 = i12 + 1;

        $c9 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i12);

        if $c9 == 47 goto label3;

     label2:
        return 0;

     label3:
        $l2 = r0[3];

        $i3 = (int) $l2;

        r5 = interfaceinvoke r1.<jdk.internal.jimage.ImageStrings: java.lang.String get(int)>($i3);

        i13 = virtualinvoke r5.<java.lang.String: int length()>();

        $z0 = virtualinvoke r2.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i10, r5, 0, i13);

        if $z0 != 0 goto label4;

        return 0;

     label4:
        i14 = i10 + i13;

        $l4 = r0[4];

        i5 = (int) $l4;

        if i5 == 0 goto label7;

        r3 = interfaceinvoke r1.<jdk.internal.jimage.ImageStrings: java.lang.String get(int)>(i5);

        i7 = virtualinvoke r3.<java.lang.String: int length()>();

        if i6 <= i14 goto label5;

        i15 = i14 + 1;

        $c8 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i14);

        if $c8 != 46 goto label5;

        $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(i15, r3, 0, i7);

        if $z1 != 0 goto label6;

     label5:
        return 0;

     label6:
        i14 = i15 + i7;

     label7:
        if i6 != i14 goto label8;

        $z3 = 1;

        goto label9;

     label8:
        $z3 = 0;

     label9:
        return $z3;
    }

    long getAttribute(int)
    {
        int i0;
        java.lang.InternalError $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4;
        jdk.internal.jimage.ImageLocation r5;
        long[] $r6;
        long $l1;

        r5 := @this: jdk.internal.jimage.ImageLocation;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if 8 > i0 goto label2;

     label1:
        $r0 = new java.lang.InternalError;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid jimage attribute kind: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $r6 = r5.<jdk.internal.jimage.ImageLocation: long[] attributes>;

        $l1 = $r6[i0];

        return $l1;
    }

    java.lang.String getAttributeString(int)
    {
        int i0, $i2;
        java.lang.InternalError $r0;
        java.lang.StringBuilder $r1, $r2, $r3;
        java.lang.String $r4, $r8;
        jdk.internal.jimage.ImageLocation r5;
        jdk.internal.jimage.ImageStrings $r6;
        long[] $r7;
        long $l1;

        r5 := @this: jdk.internal.jimage.ImageLocation;

        i0 := @parameter0: int;

        if i0 < 0 goto label1;

        if 8 > i0 goto label2;

     label1:
        $r0 = new java.lang.InternalError;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid jimage attribute kind: ");

        $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.InternalError: void <init>(java.lang.String)>($r4);

        throw $r0;

     label2:
        $r6 = virtualinvoke r5.<jdk.internal.jimage.ImageLocation: jdk.internal.jimage.ImageStrings getStrings()>();

        $r7 = r5.<jdk.internal.jimage.ImageLocation: long[] attributes>;

        $l1 = $r7[i0];

        $i2 = (int) $l1;

        $r8 = interfaceinvoke $r6.<jdk.internal.jimage.ImageStrings: java.lang.String get(int)>($i2);

        return $r8;
    }

    public java.lang.String getModule()
    {
        jdk.internal.jimage.ImageLocation r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: java.lang.String getAttributeString(int)>(1);

        return $r1;
    }

    public int getModuleOffset()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;
        int $i1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(1);

        $i1 = (int) $l0;

        return $i1;
    }

    public java.lang.String getBase()
    {
        jdk.internal.jimage.ImageLocation r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: java.lang.String getAttributeString(int)>(3);

        return $r1;
    }

    public int getBaseOffset()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;
        int $i1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(3);

        $i1 = (int) $l0;

        return $i1;
    }

    public java.lang.String getParent()
    {
        jdk.internal.jimage.ImageLocation r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: java.lang.String getAttributeString(int)>(2);

        return $r1;
    }

    public int getParentOffset()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;
        int $i1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(2);

        $i1 = (int) $l0;

        return $i1;
    }

    public java.lang.String getExtension()
    {
        jdk.internal.jimage.ImageLocation r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: java.lang.String getAttributeString(int)>(4);

        return $r1;
    }

    public int getExtensionOffset()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;
        int $i1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(4);

        $i1 = (int) $l0;

        return $i1;
    }

    public java.lang.String getFullName()
    {
        jdk.internal.jimage.ImageLocation r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: java.lang.String getFullName(boolean)>(0);

        return $r1;
    }

    public java.lang.String getFullName(boolean)
    {
        java.lang.StringBuilder $r0;
        jdk.internal.jimage.ImageLocation r2;
        int $i0, $i1, $i2;
        java.lang.String $r3, $r5, $r7, $r9, $r13;
        boolean z0;

        r2 := @this: jdk.internal.jimage.ImageLocation;

        z0 := @parameter0: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        $i0 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: int getModuleOffset()>();

        if $i0 == 0 goto label2;

        if z0 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/modules");

     label1:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r13 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: java.lang.String getModule()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label2:
        $i2 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: int getParentOffset()>();

        if $i2 == 0 goto label3;

        $r9 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: java.lang.String getParent()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label3:
        $r3 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: java.lang.String getBase()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3);

        $i1 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: int getExtensionOffset()>();

        if $i1 == 0 goto label4;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r7 = virtualinvoke r2.<jdk.internal.jimage.ImageLocation: java.lang.String getExtension()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7);

     label4:
        $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r5;
    }

    java.lang.String buildName(boolean, boolean, boolean)
    {
        java.lang.StringBuilder $r0;
        boolean z0, z1, z2;
        jdk.internal.jimage.ImageLocation r3;
        java.lang.String $r6, $r9, $r12, $r14, $r15;
        int $i0, $i1, $i2;

        r3 := @this: jdk.internal.jimage.ImageLocation;

        z0 := @parameter0: boolean;

        z1 := @parameter1: boolean;

        z2 := @parameter2: boolean;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        if z0 == 0 goto label1;

        $i1 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: int getModuleOffset()>();

        if $i1 == 0 goto label1;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/modules/");

        $r12 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: java.lang.String getModule()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

     label1:
        if z1 == 0 goto label2;

        $i0 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: int getParentOffset()>();

        if $i0 == 0 goto label2;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

        $r9 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: java.lang.String getParent()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

     label2:
        if z2 == 0 goto label5;

        if z0 != 0 goto label3;

        if z1 == 0 goto label4;

     label3:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(47);

     label4:
        $r14 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: java.lang.String getBase()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $i2 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: int getExtensionOffset()>();

        if $i2 == 0 goto label5;

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46);

        $r6 = virtualinvoke r3.<jdk.internal.jimage.ImageLocation: java.lang.String getExtension()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

     label5:
        $r15 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r15;
    }

    public long getContentOffset()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(5);

        return $l0;
    }

    public long getCompressedSize()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(6);

        return $l0;
    }

    public long getUncompressedSize()
    {
        jdk.internal.jimage.ImageLocation r0;
        long $l0;

        r0 := @this: jdk.internal.jimage.ImageLocation;

        $l0 = virtualinvoke r0.<jdk.internal.jimage.ImageLocation: long getAttribute(int)>(7);

        return $l0;
    }

    static jdk.internal.jimage.ImageLocation readFrom(jdk.internal.jimage.BasicImageReader, int)
    {
        jdk.internal.jimage.BasicImageReader r0;
        int i0;
        long[] r2;
        jdk.internal.jimage.ImageStringsReader r3;
        jdk.internal.jimage.ImageLocation $r4;

        r0 := @parameter0: jdk.internal.jimage.BasicImageReader;

        i0 := @parameter1: int;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r2 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: long[] getAttributes(int)>(i0);

        r3 = virtualinvoke r0.<jdk.internal.jimage.BasicImageReader: jdk.internal.jimage.ImageStringsReader getStrings()>();

        $r4 = new jdk.internal.jimage.ImageLocation;

        specialinvoke $r4.<jdk.internal.jimage.ImageLocation: void <init>(long[],jdk.internal.jimage.ImageStrings)>(r2, r3);

        return $r4;
    }

    public static void <clinit>()
    {
        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_COUNT> = 8;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_UNCOMPRESSED> = 7;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_COMPRESSED> = 6;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_OFFSET> = 5;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_EXTENSION> = 4;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_BASE> = 3;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_PARENT> = 2;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_MODULE> = 1;

        <jdk.internal.jimage.ImageLocation: int ATTRIBUTE_END> = 0;

        return;
    }
}
