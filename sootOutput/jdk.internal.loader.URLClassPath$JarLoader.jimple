class jdk.internal.loader.URLClassPath$JarLoader extends jdk.internal.loader.URLClassPath$Loader
{
    private java.util.jar.JarFile jar;
    private final java.net.URL csu;
    private jdk.internal.util.jar.JarIndex index;
    private java.net.URLStreamHandler handler;
    private final java.util.HashMap lmap;
    private final java.security.AccessControlContext acc;
    private boolean closed;
    private static final jdk.internal.access.JavaUtilZipFileAccess zipAccess;

    private void <init>(java.net.URL, java.net.URLStreamHandler, java.util.HashMap, java.security.AccessControlContext) throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.net.URL $r1, r3;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r6;
        java.net.URLStreamHandler r7;
        java.util.HashMap r8;
        java.security.AccessControlContext r9;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r3 := @parameter0: java.net.URL;

        r7 := @parameter1: java.net.URLStreamHandler;

        r8 := @parameter2: java.util.HashMap;

        r9 := @parameter3: java.security.AccessControlContext;

        $r1 = new java.net.URL;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("!/");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r1.<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)>("jar", "", -1, $r6, r7);

        specialinvoke r0.<jdk.internal.loader.URLClassPath$Loader: void <init>(java.net.URL)>($r1);

        r0.<jdk.internal.loader.URLClassPath$JarLoader: boolean closed> = 0;

        r0.<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL csu> = r3;

        r0.<jdk.internal.loader.URLClassPath$JarLoader: java.net.URLStreamHandler handler> = r7;

        r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.HashMap lmap> = r8;

        r0.<jdk.internal.loader.URLClassPath$JarLoader: java.security.AccessControlContext acc> = r9;

        virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: void ensureOpen()>();

        return;
    }

    public void close() throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        boolean $z0;
        java.util.jar.JarFile $r1;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        $z0 = r0.<jdk.internal.loader.URLClassPath$JarLoader: boolean closed>;

        if $z0 != 0 goto label1;

        r0.<jdk.internal.loader.URLClassPath$JarLoader: boolean closed> = 1;

        virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: void ensureOpen()>();

        $r1 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        virtualinvoke $r1.<java.util.jar.JarFile: void close()>();

     label1:
        return;
    }

    java.util.jar.JarFile getJarFile()
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.util.jar.JarFile $r1;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        $r1 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        return $r1;
    }

    private boolean isOptimizable(java.net.URL)
    {
        java.net.URL r0;
        java.lang.String $r1, $r2;
        boolean $z0;
        jdk.internal.loader.URLClassPath$JarLoader r3;

        r3 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r0 := @parameter0: java.net.URL;

        $r1 = "file";

        $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r2);

        return $z0;
    }

    private void ensureOpen() throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.util.jar.JarFile $r1;
        jdk.internal.loader.URLClassPath$JarLoader$1 $r2;
        java.security.AccessControlContext $r3;
        java.security.PrivilegedActionException $r5;
        java.lang.Exception $r7;
        java.io.IOException $r8;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        $r1 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        if $r1 != null goto label4;

     label1:
        $r2 = new jdk.internal.loader.URLClassPath$JarLoader$1;

        specialinvoke $r2.<jdk.internal.loader.URLClassPath$JarLoader$1: void <init>(jdk.internal.loader.URLClassPath$JarLoader)>(r0);

        $r3 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.security.AccessControlContext acc>;

        staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r2, $r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        $r7 = virtualinvoke $r5.<java.security.PrivilegedActionException: java.lang.Exception getException()>();

        $r8 = (java.io.IOException) $r7;

        throw $r8;

     label4:
        return;

        catch java.security.PrivilegedActionException from label1 to label2 with label3;
    }

    static java.util.jar.JarFile checkJar(java.util.jar.JarFile) throws java.io.IOException
    {
        java.lang.SecurityManager $r0;
        java.util.jar.JarFile r1;
        boolean $z0, $z1;
        jdk.internal.access.JavaUtilZipFileAccess $r2;
        java.io.IOException $r3, $r5;

        r1 := @parameter0: java.util.jar.JarFile;

        $r0 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>();

        if $r0 == null goto label5;

        $z0 = <jdk.internal.loader.URLClassPath: boolean DISABLE_JAR_CHECKING>;

        if $z0 != 0 goto label5;

        $r2 = <jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.access.JavaUtilZipFileAccess zipAccess>;

        $z1 = interfaceinvoke $r2.<jdk.internal.access.JavaUtilZipFileAccess: boolean startsWithLocHeader(java.util.zip.ZipFile)>(r1);

        if $z1 != 0 goto label5;

        $r3 = new java.io.IOException;

        specialinvoke $r3.<java.io.IOException: void <init>(java.lang.String)>("Invalid Jar file");

     label1:
        virtualinvoke r1.<java.util.jar.JarFile: void close()>();

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        virtualinvoke $r3.<java.io.IOException: void addSuppressed(java.lang.Throwable)>($r5);

     label4:
        throw $r3;

     label5:
        return r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    private java.util.jar.JarFile getJarFile(java.net.URL) throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.net.URL r1, $r2, $r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r11, $r15;
        java.net.JarURLConnection $r5;
        java.util.jar.JarFile r6, $r7, $r9, $r13;
        jdk.internal.loader.FileURLMapper $r8;
        java.io.File $r10;
        java.lang.Runtime$Version $r12;
        java.io.FileNotFoundException $r14;
        java.net.URLConnection r17;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r1 := @parameter0: java.net.URL;

        $z0 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: boolean isOptimizable(java.net.URL)>(r1);

        if $z0 == 0 goto label2;

        $r8 = new jdk.internal.loader.FileURLMapper;

        specialinvoke $r8.<jdk.internal.loader.FileURLMapper: void <init>(java.net.URL)>(r1);

        $z1 = virtualinvoke $r8.<jdk.internal.loader.FileURLMapper: boolean exists()>();

        if $z1 != 0 goto label1;

        $r14 = new java.io.FileNotFoundException;

        $r15 = virtualinvoke $r8.<jdk.internal.loader.FileURLMapper: java.lang.String getPath()>();

        specialinvoke $r14.<java.io.FileNotFoundException: void <init>(java.lang.String)>($r15);

        throw $r14;

     label1:
        $r9 = new java.util.jar.JarFile;

        $r10 = new java.io.File;

        $r11 = virtualinvoke $r8.<jdk.internal.loader.FileURLMapper: java.lang.String getPath()>();

        specialinvoke $r10.<java.io.File: void <init>(java.lang.String)>($r11);

        $r12 = staticinvoke <java.util.jar.JarFile: java.lang.Runtime$Version runtimeVersion()>();

        specialinvoke $r9.<java.util.jar.JarFile: void <init>(java.io.File,boolean,int,java.lang.Runtime$Version)>($r10, 1, 1, $r12);

        $r13 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>($r9);

        return $r13;

     label2:
        $r2 = new java.net.URL;

        $r3 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL getBaseURL()>();

        specialinvoke $r2.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r3, "#runtime");

        r17 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>();

        $r4 = <jdk.internal.loader.URLClassPath: java.lang.String JAVA_VERSION>;

        virtualinvoke r17.<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>("UA-Java-Version", $r4);

        $r5 = (java.net.JarURLConnection) r17;

        r6 = virtualinvoke $r5.<java.net.JarURLConnection: java.util.jar.JarFile getJarFile()>();

        $r7 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile checkJar(java.util.jar.JarFile)>(r6);

        return $r7;
    }

    jdk.internal.util.jar.JarIndex getIndex()
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        jdk.internal.util.jar.JarIndex $r1;
        java.io.IOException $r2;
        java.lang.InternalError $r4;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

     label1:
        virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: void ensureOpen()>();

     label2:
        goto label4;

     label3:
        $r2 := @caughtexception;

        $r4 = new java.lang.InternalError;

        specialinvoke $r4.<java.lang.InternalError: void <init>(java.lang.Throwable)>($r2);

        throw $r4;

     label4:
        $r1 = r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex index>;

        return $r1;

        catch java.io.IOException from label1 to label2 with label3;
    }

    jdk.internal.loader.Resource checkResource(java.lang.String, boolean, java.util.jar.JarEntry)
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.util.jar.JarFile $r1;
        boolean $z0, z1;
        java.lang.String r2, $r5, r12;
        java.net.URL $r3, $r4;
        jdk.internal.loader.URLClassPath$JarLoader$2 $r7;
        java.util.jar.JarEntry r8;
        java.security.AccessControlException $r9;
        java.io.IOException $r10;
        java.net.MalformedURLException $r11;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r2 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        r8 := @parameter2: java.util.jar.JarEntry;

     label1:
        $r1 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        $z0 = virtualinvoke $r1.<java.util.jar.JarFile: boolean isMultiRelease()>();

        if $z0 == 0 goto label2;

        r12 = virtualinvoke r8.<java.util.jar.JarEntry: java.lang.String getRealName()>();

        goto label3;

     label2:
        r12 = r2;

     label3:
        $r3 = new java.net.URL;

        $r4 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL getBaseURL()>();

        $r5 = staticinvoke <sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>(r12, 0);

        specialinvoke $r3.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r4, $r5);

        if z1 == 0 goto label4;

        staticinvoke <jdk.internal.loader.URLClassPath: void check(java.net.URL)>($r3);

     label4:
        goto label8;

     label5:
        $r11 := @caughtexception;

        return null;

     label6:
        $r10 := @caughtexception;

        return null;

     label7:
        $r9 := @caughtexception;

        return null;

     label8:
        $r7 = new jdk.internal.loader.URLClassPath$JarLoader$2;

        specialinvoke $r7.<jdk.internal.loader.URLClassPath$JarLoader$2: void <init>(jdk.internal.loader.URLClassPath$JarLoader,java.lang.String,java.net.URL,java.util.jar.JarEntry)>(r0, r2, $r3, r8);

        return $r7;

        catch java.net.MalformedURLException from label1 to label4 with label5;
        catch java.io.IOException from label1 to label4 with label6;
        catch java.security.AccessControlException from label1 to label4 with label7;
    }

    boolean validIndex(java.lang.String)
    {
        java.lang.String r0, r6, r7;
        int $i0, $i1;
        jdk.internal.loader.URLClassPath$JarLoader r1;
        java.util.jar.JarFile $r2;
        java.util.Enumeration r3;
        java.lang.Object $r4;
        java.util.zip.ZipEntry r5;
        boolean $z0, $z1;

        r1 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r0 := @parameter0: java.lang.String;

        r6 = r0;

        $i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(int)>(47);

        if $i0 == -1 goto label1;

        r6 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, $i0);

     label1:
        $r2 = r1.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        r3 = virtualinvoke $r2.<java.util.jar.JarFile: java.util.Enumeration entries()>();

     label2:
        $z1 = interfaceinvoke r3.<java.util.Enumeration: boolean hasMoreElements()>();

        if $z1 == 0 goto label4;

        $r4 = interfaceinvoke r3.<java.util.Enumeration: java.lang.Object nextElement()>();

        r5 = (java.util.zip.ZipEntry) $r4;

        r7 = virtualinvoke r5.<java.util.zip.ZipEntry: java.lang.String getName()>();

        $i1 = virtualinvoke r7.<java.lang.String: int lastIndexOf(int)>(47);

        if $i1 == -1 goto label3;

        r7 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

     label3:
        $z0 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>(r6);

        if $z0 == 0 goto label2;

        return 1;

     label4:
        return 0;
    }

    java.net.URL findResource(java.lang.String, boolean)
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.lang.String r1;
        boolean z0;
        jdk.internal.loader.Resource r2;
        java.net.URL $r3;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        r2 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.loader.Resource getResource(java.lang.String,boolean)>(r1, z0);

        if r2 == null goto label1;

        $r3 = virtualinvoke r2.<jdk.internal.loader.Resource: java.net.URL getURL()>();

        return $r3;

     label1:
        return null;
    }

    jdk.internal.loader.Resource getResource(java.lang.String, boolean)
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        java.lang.String r1;
        java.util.jar.JarFile $r2;
        jdk.internal.util.jar.JarIndex $r3;
        java.util.HashSet $r4;
        boolean z0;
        jdk.internal.loader.Resource $r6, $r7;
        java.io.IOException $r8;
        java.lang.InternalError $r9;
        java.util.jar.JarEntry r11;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

     label1:
        virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: void ensureOpen()>();

     label2:
        goto label4;

     label3:
        $r8 := @caughtexception;

        $r9 = new java.lang.InternalError;

        specialinvoke $r9.<java.lang.InternalError: void <init>(java.lang.Throwable)>($r8);

        throw $r9;

     label4:
        $r2 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        r11 = virtualinvoke $r2.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>(r1);

        if r11 == null goto label5;

        $r7 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.loader.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>(r1, z0, r11);

        return $r7;

     label5:
        $r3 = r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex index>;

        if $r3 != null goto label6;

        return null;

     label6:
        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        $r6 = virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.loader.Resource getResource(java.lang.String,boolean,java.util.Set)>(r1, z0, $r4);

        return $r6;

        catch java.io.IOException from label1 to label2 with label3;
    }

    jdk.internal.loader.Resource getResource(java.lang.String, boolean, java.util.Set)
    {
        jdk.internal.loader.URLClassPath$JarLoader r0, $r14, r34;
        java.lang.String r1, r8, $r16, r33, $r36;
        jdk.internal.util.jar.JarIndex $r2, $r7, $r17, $r26, r35;
        java.util.LinkedList $r3, r32;
        int i0, $i1, $i2, i3, $i4, i5;
        java.lang.String[] $r4, r6;
        java.lang.Object[] $r5;
        java.net.URL $r9, $r10;
        java.util.HashMap $r12, $r37;
        java.lang.Object $r13, $r25;
        java.util.Set r15;
        boolean $z0, z1, $z2, $z3, z4;
        jdk.internal.loader.Resource $r18, $r22;
        java.util.jar.JarFile $r20;
        jdk.internal.util.jar.InvalidJarIndexError $r21;
        jdk.internal.loader.URLClassPath$JarLoader$3 $r23;
        java.security.AccessControlContext $r24;
        java.io.IOException $r28;
        java.lang.InternalError $r29;
        java.net.MalformedURLException $r30;
        java.security.PrivilegedActionException $r31;
        java.util.jar.JarEntry r39;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        r1 := @parameter0: java.lang.String;

        z1 := @parameter1: boolean;

        r15 := @parameter2: java.util.Set;

        i5 = 0;

        $r2 = r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex index>;

        $r3 = virtualinvoke $r2.<jdk.internal.util.jar.JarIndex: java.util.LinkedList get(java.lang.String)>(r1);

        r32 = $r3;

        if $r3 != null goto label01;

        return null;

     label01:
        i0 = virtualinvoke r32.<java.util.LinkedList: int size()>();

        $r4 = newarray (java.lang.String)[i0];

        $r5 = virtualinvoke r32.<java.util.LinkedList: java.lang.Object[] toArray(java.lang.Object[])>($r4);

        r6 = (java.lang.String[]) $r5;

     label02:
        if i5 >= i0 goto label21;

        $i2 = i5;

        i5 = i5 + 1;

        r8 = r6[$i2];

     label03:
        $r9 = new java.net.URL;

        $r10 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL csu>;

        specialinvoke $r9.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r10, r8);

        r33 = staticinvoke <sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>($r9);

        $r12 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.HashMap lmap>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r33);

        $r14 = (jdk.internal.loader.URLClassPath$JarLoader) $r13;

        r34 = $r14;

        if $r14 != null goto label07;

        $r23 = new jdk.internal.loader.URLClassPath$JarLoader$3;

        specialinvoke $r23.<jdk.internal.loader.URLClassPath$JarLoader$3: void <init>(jdk.internal.loader.URLClassPath$JarLoader,java.net.URL)>(r0, $r9);

        $r24 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.security.AccessControlContext acc>;

        $r25 = staticinvoke <java.security.AccessController: java.lang.Object doPrivileged(java.security.PrivilegedExceptionAction,java.security.AccessControlContext)>($r23, $r24);

        r34 = (jdk.internal.loader.URLClassPath$JarLoader) $r25;

        r35 = virtualinvoke r34.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex getIndex()>();

        if r35 == null goto label06;

        i3 = virtualinvoke r8.<java.lang.String: int lastIndexOf(int)>(47);

        $r26 = r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex index>;

        if i3 != -1 goto label04;

        $r36 = null;

        goto label05;

     label04:
        $i4 = i3 + 1;

        $r36 = virtualinvoke r8.<java.lang.String: java.lang.String substring(int,int)>(0, $i4);

     label05:
        virtualinvoke r35.<jdk.internal.util.jar.JarIndex: void merge(jdk.internal.util.jar.JarIndex,java.lang.String)>($r26, $r36);

     label06:
        $r37 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.HashMap lmap>;

        virtualinvoke $r37.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r33, r34);

     label07:
        goto label10;

     label08:
        $r31 := @caughtexception;

        goto label02;

     label09:
        $r30 := @caughtexception;

        goto label02;

     label10:
        $r16 = staticinvoke <sun.net.util.URLUtil: java.lang.String urlNoFragString(java.net.URL)>($r9);

        $z0 = interfaceinvoke r15.<java.util.Set: boolean add(java.lang.Object)>($r16);

        if $z0 != 0 goto label11;

        $z3 = 1;

        goto label12;

     label11:
        $z3 = 0;

     label12:
        z4 = $z3;

        if $z3 != 0 goto label18;

     label13:
        virtualinvoke r34.<jdk.internal.loader.URLClassPath$JarLoader: void ensureOpen()>();

     label14:
        goto label16;

     label15:
        $r28 := @caughtexception;

        $r29 = new java.lang.InternalError;

        specialinvoke $r29.<java.lang.InternalError: void <init>(java.lang.Throwable)>($r28);

        throw $r29;

     label16:
        $r20 = r34.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        r39 = virtualinvoke $r20.<java.util.jar.JarFile: java.util.jar.JarEntry getJarEntry(java.lang.String)>(r1);

        if r39 == null goto label17;

        $r22 = virtualinvoke r34.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.loader.Resource checkResource(java.lang.String,boolean,java.util.jar.JarEntry)>(r1, z1, r39);

        return $r22;

     label17:
        $z2 = virtualinvoke r34.<jdk.internal.loader.URLClassPath$JarLoader: boolean validIndex(java.lang.String)>(r1);

        if $z2 != 0 goto label18;

        $r21 = new jdk.internal.util.jar.InvalidJarIndexError;

        specialinvoke $r21.<jdk.internal.util.jar.InvalidJarIndexError: void <init>(java.lang.String)>("Invalid index");

        throw $r21;

     label18:
        if z4 != 0 goto label02;

        if r34 == r0 goto label02;

        $r17 = virtualinvoke r34.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex getIndex()>();

        if $r17 != null goto label19;

        goto label02;

     label19:
        $r18 = virtualinvoke r34.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.loader.Resource getResource(java.lang.String,boolean,java.util.Set)>(r1, z1, r15);

        if $r18 == null goto label20;

        return $r18;

     label20:
        goto label02;

     label21:
        $r7 = r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex index>;

        r32 = virtualinvoke $r7.<jdk.internal.util.jar.JarIndex: java.util.LinkedList get(java.lang.String)>(r1);

        $i1 = virtualinvoke r32.<java.util.LinkedList: int size()>();

        if i5 < $i1 goto label01;

        return null;

        catch java.security.PrivilegedActionException from label03 to label07 with label08;
        catch java.net.MalformedURLException from label03 to label07 with label09;
        catch java.io.IOException from label13 to label14 with label15;
    }

    java.net.URL[] getClassPath() throws java.io.IOException
    {
        jdk.internal.loader.URLClassPath$JarLoader r0;
        jdk.internal.util.jar.JarIndex $r1;
        jdk.internal.access.JavaUtilJarAccess $r2;
        java.util.jar.JarFile $r3, $r4;
        boolean $z0;
        java.util.jar.Manifest r5;
        java.util.jar.Attributes r6;
        java.util.jar.Attributes$Name $r7;
        java.lang.String r8;
        java.net.URL $r9;
        java.net.URL[] $r10;

        r0 := @this: jdk.internal.loader.URLClassPath$JarLoader;

        $r1 = r0.<jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.util.jar.JarIndex index>;

        if $r1 == null goto label1;

        return null;

     label1:
        virtualinvoke r0.<jdk.internal.loader.URLClassPath$JarLoader: void ensureOpen()>();

        $r2 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilJarAccess javaUtilJarAccess()>();

        $r3 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        $z0 = interfaceinvoke $r2.<jdk.internal.access.JavaUtilJarAccess: boolean jarFileHasClassPathAttribute(java.util.jar.JarFile)>($r3);

        if $z0 == 0 goto label2;

        $r4 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.util.jar.JarFile jar>;

        r5 = virtualinvoke $r4.<java.util.jar.JarFile: java.util.jar.Manifest getManifest()>();

        if r5 == null goto label2;

        r6 = virtualinvoke r5.<java.util.jar.Manifest: java.util.jar.Attributes getMainAttributes()>();

        if r6 == null goto label2;

        $r7 = <java.util.jar.Attributes$Name: java.util.jar.Attributes$Name CLASS_PATH>;

        r8 = virtualinvoke r6.<java.util.jar.Attributes: java.lang.String getValue(java.util.jar.Attributes$Name)>($r7);

        if r8 == null goto label2;

        $r9 = r0.<jdk.internal.loader.URLClassPath$JarLoader: java.net.URL csu>;

        $r10 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.net.URL[] parseClassPath(java.net.URL,java.lang.String)>($r9, r8);

        return $r10;

     label2:
        return null;
    }

    private static java.net.URL[] parseClassPath(java.net.URL, java.lang.String) throws java.net.MalformedURLException
    {
        java.util.StringTokenizer $r0;
        java.lang.String r1, r4, $r13;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r3;
        java.net.URL r5, $r15;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12;
        java.io.PrintStream $r8;
        java.net.URL[] r14;

        r5 := @parameter0: java.net.URL;

        r1 := @parameter1: java.lang.String;

        $r0 = new java.util.StringTokenizer;

        specialinvoke $r0.<java.util.StringTokenizer: void <init>(java.lang.String)>(r1);

        $i0 = virtualinvoke $r0.<java.util.StringTokenizer: int countTokens()>();

        r14 = newarray (java.net.URL)[$i0];

        i2 = 0;

     label1:
        $z0 = virtualinvoke $r0.<java.util.StringTokenizer: boolean hasMoreTokens()>();

        if $z0 == 0 goto label6;

        r4 = virtualinvoke $r0.<java.util.StringTokenizer: java.lang.String nextToken()>();

        $z1 = <jdk.internal.loader.URLClassPath: boolean DISABLE_CP_URL_CHECK>;

        if $z1 == 0 goto label2;

        $r15 = new java.net.URL;

        specialinvoke $r15.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r5, r4);

        goto label3;

     label2:
        $r15 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.net.URL tryResolve(java.net.URL,java.lang.String)>(r5, r4);

     label3:
        if $r15 == null goto label4;

        r14[i2] = $r15;

        i2 = i2 + 1;

        goto label5;

     label4:
        $z2 = <jdk.internal.loader.URLClassPath: boolean DEBUG_CP_URL_CHECK>;

        if $z2 == 0 goto label5;

        $r8 = <java.lang.System: java.io.PrintStream err>;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class-Path entry: \"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" ignored in JAR file ");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r13);

     label5:
        goto label1;

     label6:
        if i2 != 0 goto label7;

        r14 = null;

        goto label8;

     label7:
        $i1 = lengthof r14;

        if i2 == $i1 goto label8;

        $r3 = staticinvoke <java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>(r14, i2);

        r14 = (java.net.URL[]) $r3;

     label8:
        return r14;
    }

    static java.net.URL tryResolve(java.net.URL, java.lang.String) throws java.net.MalformedURLException
    {
        java.net.URL r0, $r4, $r5;
        java.lang.String $r1, $r2, r3;
        boolean $z0;

        r0 := @parameter0: java.net.URL;

        r3 := @parameter1: java.lang.String;

        $r1 = "file";

        $r2 = virtualinvoke r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r1.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r2);

        if $z0 == 0 goto label1;

        $r5 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.net.URL tryResolveFile(java.net.URL,java.lang.String)>(r0, r3);

        return $r5;

     label1:
        $r4 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: java.net.URL tryResolveNonFile(java.net.URL,java.lang.String)>(r0, r3);

        return $r4;
    }

    static java.net.URL tryResolveFile(java.net.URL, java.lang.String) throws java.net.MalformedURLException
    {
        java.net.URL $r0, r1;
        java.lang.String r2, $r4, $r5;
        int $i0;
        boolean $z0;

        r1 := @parameter0: java.net.URL;

        r2 := @parameter1: java.lang.String;

        $r0 = new java.net.URL;

        specialinvoke $r0.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r1, r2);

        $i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(58);

        if $i0 < 0 goto label1;

        $r4 = "file";

        $r5 = virtualinvoke $r0.<java.net.URL: java.lang.String getProtocol()>();

        $z0 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5);

        if $z0 != 0 goto label1;

        return null;

     label1:
        return $r0;
    }

    static java.net.URL tryResolveNonFile(java.net.URL, java.lang.String) throws java.net.MalformedURLException
    {
        java.lang.String r0, r1, r5, r6;
        char $c0;
        boolean $z0, $z1;
        java.net.URL $r2, r3;
        int $i1, $i2, $i3, i4;

        r3 := @parameter0: java.net.URL;

        r0 := @parameter1: java.lang.String;

        $c0 = <java.io.File: char separatorChar>;

        r1 = virtualinvoke r0.<java.lang.String: java.lang.String replace(char,char)>($c0, 47);

        $z0 = staticinvoke <jdk.internal.loader.URLClassPath$JarLoader: boolean isRelative(java.lang.String)>(r1);

        if $z0 == 0 goto label2;

        $r2 = new java.net.URL;

        specialinvoke $r2.<java.net.URL: void <init>(java.net.URL,java.lang.String)>(r3, r1);

        r5 = virtualinvoke r3.<java.net.URL: java.lang.String getPath()>();

        r6 = virtualinvoke $r2.<java.net.URL: java.lang.String getPath()>();

        i4 = virtualinvoke r5.<java.lang.String: int lastIndexOf(int)>(47);

        if i4 != -1 goto label1;

        $i3 = virtualinvoke r5.<java.lang.String: int length()>();

        i4 = $i3 - 1;

     label1:
        $i1 = i4 + 1;

        $z1 = virtualinvoke r6.<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>(0, r5, 0, $i1);

        if $z1 == 0 goto label2;

        $i2 = virtualinvoke r6.<java.lang.String: int indexOf(java.lang.String,int)>("..", i4);

        if $i2 != -1 goto label2;

        return $r2;

     label2:
        return null;
    }

    static boolean isRelative(java.lang.String)
    {
        java.lang.String r0;
        java.net.URI $r1;
        boolean $z0, $z1;
        java.lang.IllegalArgumentException $r2;

        r0 := @parameter0: java.lang.String;

     label1:
        $r1 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>(r0);

        $z0 = virtualinvoke $r1.<java.net.URI: boolean isAbsolute()>();

        if $z0 != 0 goto label2;

        $z1 = 1;

        goto label3;

     label2:
        $z1 = 0;

     label3:
        return $z1;

     label4:
        $r2 := @caughtexception;

        return 0;

        catch java.lang.IllegalArgumentException from label1 to label3 with label4;
    }

    static void <clinit>()
    {
        jdk.internal.access.JavaUtilZipFileAccess $r0;

        $r0 = staticinvoke <jdk.internal.access.SharedSecrets: jdk.internal.access.JavaUtilZipFileAccess getJavaUtilZipFileAccess()>();

        <jdk.internal.loader.URLClassPath$JarLoader: jdk.internal.access.JavaUtilZipFileAccess zipAccess> = $r0;

        return;
    }
}
