public abstract class jdk.internal.jimage.ImageReader$Node extends java.lang.Object
{
    private static final int ROOT_DIR;
    private static final int PACKAGES_DIR;
    private static final int MODULES_DIR;
    private int flags;
    private final java.lang.String name;
    private final java.nio.file.attribute.BasicFileAttributes fileAttrs;
    private boolean completed;

    protected void <init>(java.lang.String, java.nio.file.attribute.BasicFileAttributes)
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.lang.String r1, $r3;
        java.lang.Object $r2, $r5;
        java.nio.file.attribute.BasicFileAttributes r4, $r6;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        r1 := @parameter0: java.lang.String;

        r4 := @parameter1: java.nio.file.attribute.BasicFileAttributes;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r1);

        $r3 = (java.lang.String) $r2;

        r0.<jdk.internal.jimage.ImageReader$Node: java.lang.String name> = $r3;

        $r5 = staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r4);

        $r6 = (java.nio.file.attribute.BasicFileAttributes) $r5;

        r0.<jdk.internal.jimage.ImageReader$Node: java.nio.file.attribute.BasicFileAttributes fileAttrs> = $r6;

        return;
    }

    public boolean isCompleted()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        boolean $z0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $z0 = r0.<jdk.internal.jimage.ImageReader$Node: boolean completed>;

        return $z0;
    }

    public void setCompleted(boolean)
    {
        jdk.internal.jimage.ImageReader$Node r0;
        boolean z0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        z0 := @parameter0: boolean;

        r0.<jdk.internal.jimage.ImageReader$Node: boolean completed> = z0;

        return;
    }

    public final void setIsRootDir()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        int $i0, $i1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $i0 = r0.<jdk.internal.jimage.ImageReader$Node: int flags>;

        $i1 = $i0 | 1;

        r0.<jdk.internal.jimage.ImageReader$Node: int flags> = $i1;

        return;
    }

    public final boolean isRootDir()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $i0 = r0.<jdk.internal.jimage.ImageReader$Node: int flags>;

        $i1 = $i0 & 1;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setIsPackagesDir()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        int $i0, $i1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $i0 = r0.<jdk.internal.jimage.ImageReader$Node: int flags>;

        $i1 = $i0 | 2;

        r0.<jdk.internal.jimage.ImageReader$Node: int flags> = $i1;

        return;
    }

    public final boolean isPackagesDir()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $i0 = r0.<jdk.internal.jimage.ImageReader$Node: int flags>;

        $i1 = $i0 & 2;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final void setIsModulesDir()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        int $i0, $i1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $i0 = r0.<jdk.internal.jimage.ImageReader$Node: int flags>;

        $i1 = $i0 | 4;

        r0.<jdk.internal.jimage.ImageReader$Node: int flags> = $i1;

        return;
    }

    public final boolean isModulesDir()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        int $i0, $i1;
        boolean $z0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $i0 = r0.<jdk.internal.jimage.ImageReader$Node: int flags>;

        $i1 = $i0 & 4;

        if $i1 == 0 goto label1;

        $z0 = 1;

        goto label2;

     label1:
        $z0 = 0;

     label2:
        return $z0;
    }

    public final java.lang.String getName()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.lang.String name>;

        return $r1;
    }

    public final java.nio.file.attribute.BasicFileAttributes getFileAttributes()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.nio.file.attribute.BasicFileAttributes $r1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.nio.file.attribute.BasicFileAttributes fileAttrs>;

        return $r1;
    }

    public final jdk.internal.jimage.ImageReader$Node resolveLink()
    {
        jdk.internal.jimage.ImageReader$Node r0, $r1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageReader$Node: jdk.internal.jimage.ImageReader$Node resolveLink(boolean)>(0);

        return $r1;
    }

    public jdk.internal.jimage.ImageReader$Node resolveLink(boolean)
    {
        jdk.internal.jimage.ImageReader$Node r0;
        boolean z0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        z0 := @parameter0: boolean;

        return r0;
    }

    public boolean isLink()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return 0;
    }

    public boolean isDirectory()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return 0;
    }

    public java.util.List getChildren()
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        jdk.internal.jimage.ImageReader$Node r3;
        java.lang.String $r4, $r6;

        r3 := @this: jdk.internal.jimage.ImageReader$Node;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a directory: ");

        $r4 = virtualinvoke r3.<jdk.internal.jimage.ImageReader$Node: java.lang.String getNameString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public boolean isResource()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return 0;
    }

    public jdk.internal.jimage.ImageLocation getLocation()
    {
        java.lang.IllegalArgumentException $r0;
        java.lang.StringBuilder $r1, $r2, $r5;
        jdk.internal.jimage.ImageReader$Node r3;
        java.lang.String $r4, $r6;

        r3 := @this: jdk.internal.jimage.ImageReader$Node;

        $r0 = new java.lang.IllegalArgumentException;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>()>();

        $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not a resource: ");

        $r4 = virtualinvoke r3.<jdk.internal.jimage.ImageReader$Node: java.lang.String getNameString()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6);

        throw $r0;
    }

    public long size()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return 0L;
    }

    public long compressedSize()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return 0L;
    }

    public java.lang.String extension()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return null;
    }

    public long contentOffset()
    {
        jdk.internal.jimage.ImageReader$Node r0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        return 0L;
    }

    public final java.nio.file.attribute.FileTime creationTime()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.nio.file.attribute.BasicFileAttributes $r1;
        java.nio.file.attribute.FileTime $r2;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.nio.file.attribute.BasicFileAttributes fileAttrs>;

        $r2 = interfaceinvoke $r1.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime creationTime()>();

        return $r2;
    }

    public final java.nio.file.attribute.FileTime lastAccessTime()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.nio.file.attribute.BasicFileAttributes $r1;
        java.nio.file.attribute.FileTime $r2;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.nio.file.attribute.BasicFileAttributes fileAttrs>;

        $r2 = interfaceinvoke $r1.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastAccessTime()>();

        return $r2;
    }

    public final java.nio.file.attribute.FileTime lastModifiedTime()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.nio.file.attribute.BasicFileAttributes $r1;
        java.nio.file.attribute.FileTime $r2;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.nio.file.attribute.BasicFileAttributes fileAttrs>;

        $r2 = interfaceinvoke $r1.<java.nio.file.attribute.BasicFileAttributes: java.nio.file.attribute.FileTime lastModifiedTime()>();

        return $r2;
    }

    public final java.lang.String getNameString()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.lang.String name>;

        return $r1;
    }

    public final java.lang.String toString()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = virtualinvoke r0.<jdk.internal.jimage.ImageReader$Node: java.lang.String getNameString()>();

        return $r1;
    }

    public final int hashCode()
    {
        jdk.internal.jimage.ImageReader$Node r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        $r1 = r0.<jdk.internal.jimage.ImageReader$Node: java.lang.String name>;

        $i0 = virtualinvoke $r1.<java.lang.String: int hashCode()>();

        return $i0;
    }

    public final boolean equals(java.lang.Object)
    {
        jdk.internal.jimage.ImageReader$Node r0, $r2;
        java.lang.Object r1;
        boolean $z0, $z1;
        java.lang.String $r3, $r4;

        r0 := @this: jdk.internal.jimage.ImageReader$Node;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label1;

        return 1;

     label1:
        $z0 = r1 instanceof jdk.internal.jimage.ImageReader$Node;

        if $z0 == 0 goto label2;

        $r4 = r0.<jdk.internal.jimage.ImageReader$Node: java.lang.String name>;

        $r2 = (jdk.internal.jimage.ImageReader$Node) r1;

        $r3 = $r2.<jdk.internal.jimage.ImageReader$Node: java.lang.String name>;

        $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3);

        return $z1;

     label2:
        return 0;
    }

    public static void <clinit>()
    {
        <jdk.internal.jimage.ImageReader$Node: int MODULES_DIR> = 4;

        <jdk.internal.jimage.ImageReader$Node: int PACKAGES_DIR> = 2;

        <jdk.internal.jimage.ImageReader$Node: int ROOT_DIR> = 1;

        return;
    }
}
