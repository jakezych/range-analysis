public final class jdk.internal.org.objectweb.asm.Type extends java.lang.Object
{
    public static final int VOID;
    public static final int BOOLEAN;
    public static final int CHAR;
    public static final int BYTE;
    public static final int SHORT;
    public static final int INT;
    public static final int FLOAT;
    public static final int LONG;
    public static final int DOUBLE;
    public static final int ARRAY;
    public static final int OBJECT;
    public static final int METHOD;
    private static final int INTERNAL;
    private static final java.lang.String PRIMITIVE_DESCRIPTORS;
    public static final jdk.internal.org.objectweb.asm.Type VOID_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type BOOLEAN_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type CHAR_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type BYTE_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type SHORT_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type INT_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type FLOAT_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type LONG_TYPE;
    public static final jdk.internal.org.objectweb.asm.Type DOUBLE_TYPE;
    private final int sort;
    private final java.lang.String valueBuffer;
    private final int valueBegin;
    private final int valueEnd;

    private void <init>(int, java.lang.String, int, int)
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int i0, i1, i2;
        java.lang.String r1;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        i0 := @parameter0: int;

        r1 := @parameter1: java.lang.String;

        i1 := @parameter2: int;

        i2 := @parameter3: int;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.org.objectweb.asm.Type: int sort> = i0;

        r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer> = r1;

        r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin> = i1;

        r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd> = i2;

        return;
    }

    public static jdk.internal.org.objectweb.asm.Type getType(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        jdk.internal.org.objectweb.asm.Type $r1;

        r0 := @parameter0: java.lang.String;

        $i0 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getTypeInternal(java.lang.String,int,int)>(r0, 0, $i0);

        return $r1;
    }

    public static jdk.internal.org.objectweb.asm.Type getType(java.lang.Class)
    {
        java.lang.Class r0, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        boolean $z0;
        java.lang.String $r1;
        jdk.internal.org.objectweb.asm.Type $r2, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21;
        java.lang.AssertionError $r12;

        r0 := @parameter0: java.lang.Class;

        $z0 = virtualinvoke r0.<java.lang.Class: boolean isPrimitive()>();

        if $z0 == 0 goto label10;

        $r3 = <java.lang.Integer: java.lang.Class TYPE>;

        if r0 != $r3 goto label01;

        $r21 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type INT_TYPE>;

        return $r21;

     label01:
        $r4 = <java.lang.Void: java.lang.Class TYPE>;

        if r0 != $r4 goto label02;

        $r20 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type VOID_TYPE>;

        return $r20;

     label02:
        $r5 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r0 != $r5 goto label03;

        $r19 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type BOOLEAN_TYPE>;

        return $r19;

     label03:
        $r6 = <java.lang.Byte: java.lang.Class TYPE>;

        if r0 != $r6 goto label04;

        $r18 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type BYTE_TYPE>;

        return $r18;

     label04:
        $r7 = <java.lang.Character: java.lang.Class TYPE>;

        if r0 != $r7 goto label05;

        $r17 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type CHAR_TYPE>;

        return $r17;

     label05:
        $r8 = <java.lang.Short: java.lang.Class TYPE>;

        if r0 != $r8 goto label06;

        $r16 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type SHORT_TYPE>;

        return $r16;

     label06:
        $r9 = <java.lang.Double: java.lang.Class TYPE>;

        if r0 != $r9 goto label07;

        $r15 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type DOUBLE_TYPE>;

        return $r15;

     label07:
        $r10 = <java.lang.Float: java.lang.Class TYPE>;

        if r0 != $r10 goto label08;

        $r14 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type FLOAT_TYPE>;

        return $r14;

     label08:
        $r11 = <java.lang.Long: java.lang.Class TYPE>;

        if r0 != $r11 goto label09;

        $r13 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type LONG_TYPE>;

        return $r13;

     label09:
        $r12 = new java.lang.AssertionError;

        specialinvoke $r12.<java.lang.AssertionError: void <init>()>();

        throw $r12;

     label10:
        $r1 = staticinvoke <jdk.internal.org.objectweb.asm.Type: java.lang.String getDescriptor(java.lang.Class)>(r0);

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public static jdk.internal.org.objectweb.asm.Type getType(java.lang.reflect.Constructor)
    {
        java.lang.reflect.Constructor r0;
        java.lang.String $r1;
        jdk.internal.org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.reflect.Constructor;

        $r1 = staticinvoke <jdk.internal.org.objectweb.asm.Type: java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)>(r0);

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public static jdk.internal.org.objectweb.asm.Type getType(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.String $r1;
        jdk.internal.org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = staticinvoke <jdk.internal.org.objectweb.asm.Type: java.lang.String getMethodDescriptor(java.lang.reflect.Method)>(r0);

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getType(java.lang.String)>($r1);

        return $r2;
    }

    public jdk.internal.org.objectweb.asm.Type getElementType()
    {
        jdk.internal.org.objectweb.asm.Type r0, $r2;
        int i0, $i1, $i2, $i3;
        java.lang.String $r1;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        i0 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: int getDimensions()>();

        $r1 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i3 = $i1 + i0;

        $i2 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getTypeInternal(java.lang.String,int,int)>($r1, $i3, $i2);

        return $r2;
    }

    public static jdk.internal.org.objectweb.asm.Type getObjectType(java.lang.String)
    {
        jdk.internal.org.objectweb.asm.Type $r0;
        java.lang.String r1;
        char $c0;
        int $i1;
        byte $b2;

        r1 := @parameter0: java.lang.String;

        $r0 = new jdk.internal.org.objectweb.asm.Type;

        $c0 = virtualinvoke r1.<java.lang.String: char charAt(int)>(0);

        if $c0 != 91 goto label1;

        $b2 = 9;

        goto label2;

     label1:
        $b2 = 12;

     label2:
        $i1 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r0.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>($b2, r1, 0, $i1);

        return $r0;
    }

    public static jdk.internal.org.objectweb.asm.Type getMethodType(java.lang.String)
    {
        jdk.internal.org.objectweb.asm.Type $r0;
        java.lang.String r1;
        int $i0;

        r1 := @parameter0: java.lang.String;

        $r0 = new jdk.internal.org.objectweb.asm.Type;

        $i0 = virtualinvoke r1.<java.lang.String: int length()>();

        specialinvoke $r0.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(11, r1, 0, $i0);

        return $r0;
    }

    public static transient jdk.internal.org.objectweb.asm.Type getMethodType(jdk.internal.org.objectweb.asm.Type, jdk.internal.org.objectweb.asm.Type[])
    {
        jdk.internal.org.objectweb.asm.Type r0, $r3;
        jdk.internal.org.objectweb.asm.Type[] r1;
        java.lang.String $r2;

        r0 := @parameter0: jdk.internal.org.objectweb.asm.Type;

        r1 := @parameter1: jdk.internal.org.objectweb.asm.Type[];

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: java.lang.String getMethodDescriptor(jdk.internal.org.objectweb.asm.Type,jdk.internal.org.objectweb.asm.Type[])>(r0, r1);

        $r3 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getType(java.lang.String)>($r2);

        return $r3;
    }

    public jdk.internal.org.objectweb.asm.Type[] getArgumentTypes()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        java.lang.String $r1;
        jdk.internal.org.objectweb.asm.Type[] $r2;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)>($r1);

        return $r2;
    }

    public static jdk.internal.org.objectweb.asm.Type[] getArgumentTypes(java.lang.String)
    {
        java.lang.String r0;
        char $c0, $c1, $c3, $c5, $c8, $c10;
        jdk.internal.org.objectweb.asm.Type[] r1;
        int i2, $i4, $i6, $i7, $i9, $i11, i12, i13, i14, i15;
        jdk.internal.org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.String;

        i12 = 0;

        i13 = 1;

     label01:
        $c0 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        if $c0 == 41 goto label05;

     label02:
        $c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i13);

        if $c8 != 91 goto label03;

        i13 = i13 + 1;

        goto label02;

     label03:
        $i9 = i13;

        i13 = i13 + 1;

        $c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9);

        if $c10 != 76 goto label04;

        $i11 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i13);

        i13 = $i11 + 1;

     label04:
        i12 = i12 + 1;

        goto label01;

     label05:
        r1 = newarray (jdk.internal.org.objectweb.asm.Type)[i12];

        i14 = 1;

        i15 = 0;

     label06:
        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        if $c1 == 41 goto label10;

        i2 = i14;

     label07:
        $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14);

        if $c3 != 91 goto label08;

        i14 = i14 + 1;

        goto label07;

     label08:
        $i4 = i14;

        i14 = i14 + 1;

        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i4);

        if $c5 != 76 goto label09;

        $i7 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i14);

        i14 = $i7 + 1;

     label09:
        $i6 = i15;

        i15 = i15 + 1;

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getTypeInternal(java.lang.String,int,int)>(r0, i2, i14);

        r1[$i6] = $r2;

        goto label06;

     label10:
        return r1;
    }

    public static jdk.internal.org.objectweb.asm.Type[] getArgumentTypes(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class[] r1;
        int $i0, $i1, i2;
        jdk.internal.org.objectweb.asm.Type[] r2;
        java.lang.Class $r3;
        jdk.internal.org.objectweb.asm.Type $r4;

        r0 := @parameter0: java.lang.reflect.Method;

        r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        $i0 = lengthof r1;

        r2 = newarray (jdk.internal.org.objectweb.asm.Type)[$i0];

        $i1 = lengthof r1;

        i2 = $i1 - 1;

     label1:
        if i2 < 0 goto label2;

        $r3 = r1[i2];

        $r4 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getType(java.lang.Class)>($r3);

        r2[i2] = $r4;

        i2 = i2 + -1;

        goto label1;

     label2:
        return r2;
    }

    public jdk.internal.org.objectweb.asm.Type getReturnType()
    {
        jdk.internal.org.objectweb.asm.Type r0, $r2;
        java.lang.String $r1;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getReturnType(java.lang.String)>($r1);

        return $r2;
    }

    public static jdk.internal.org.objectweb.asm.Type getReturnType(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, $i3, $i5, i6;
        jdk.internal.org.objectweb.asm.Type $r1;
        char $c2, $c4, $c7;

        r0 := @parameter0: java.lang.String;

        i6 = 1;

     label1:
        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if $c7 == 41 goto label4;

     label2:
        $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i6);

        if $c2 != 91 goto label3;

        i6 = i6 + 1;

        goto label2;

     label3:
        $i3 = i6;

        i6 = i6 + 1;

        $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3);

        if $c4 != 76 goto label1;

        $i5 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i6);

        i6 = $i5 + 1;

        goto label1;

     label4:
        $i0 = i6 + 1;

        $i1 = virtualinvoke r0.<java.lang.String: int length()>();

        $r1 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getTypeInternal(java.lang.String,int,int)>(r0, $i0, $i1);

        return $r1;
    }

    public static jdk.internal.org.objectweb.asm.Type getReturnType(java.lang.reflect.Method)
    {
        java.lang.reflect.Method r0;
        java.lang.Class $r1;
        jdk.internal.org.objectweb.asm.Type $r2;

        r0 := @parameter0: java.lang.reflect.Method;

        $r1 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        $r2 = staticinvoke <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getType(java.lang.Class)>($r1);

        return $r2;
    }

    private static jdk.internal.org.objectweb.asm.Type getTypeInternal(java.lang.String, int, int)
    {
        java.lang.String r0;
        int i0, i2, $i3, $i4;
        char $c1;
        jdk.internal.org.objectweb.asm.Type $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12;
        java.lang.IllegalArgumentException $r13;

        r0 := @parameter0: java.lang.String;

        i0 := @parameter1: int;

        i2 := @parameter2: int;

        $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0);

        lookupswitch($c1)
        {
            case 40: goto label12;
            case 66: goto label04;
            case 67: goto label03;
            case 68: goto label09;
            case 70: goto label07;
            case 73: goto label06;
            case 74: goto label08;
            case 76: goto label11;
            case 83: goto label05;
            case 86: goto label01;
            case 90: goto label02;
            case 91: goto label10;
            default: goto label13;
        };

     label01:
        $r3 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type VOID_TYPE>;

        return $r3;

     label02:
        $r2 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type BOOLEAN_TYPE>;

        return $r2;

     label03:
        $r10 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type CHAR_TYPE>;

        return $r10;

     label04:
        $r11 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type BYTE_TYPE>;

        return $r11;

     label05:
        $r4 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type SHORT_TYPE>;

        return $r4;

     label06:
        $r7 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type INT_TYPE>;

        return $r7;

     label07:
        $r8 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type FLOAT_TYPE>;

        return $r8;

     label08:
        $r6 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type LONG_TYPE>;

        return $r6;

     label09:
        $r9 = <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type DOUBLE_TYPE>;

        return $r9;

     label10:
        $r1 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r1.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(9, r0, i0, i2);

        return $r1;

     label11:
        $r5 = new jdk.internal.org.objectweb.asm.Type;

        $i4 = i0 + 1;

        $i3 = i2 - 1;

        specialinvoke $r5.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(10, r0, $i4, $i3);

        return $r5;

     label12:
        $r12 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r12.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(11, r0, i0, i2);

        return $r12;

     label13:
        $r13 = new java.lang.IllegalArgumentException;

        specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>()>();

        throw $r13;
    }

    public java.lang.String getClassName()
    {
        jdk.internal.org.objectweb.asm.Type r0, $r5;
        int $i0, $i1, $i2, i3;
        java.lang.String $r1, $r2, $r3, $r6, $r8;
        java.lang.StringBuilder $r4;
        java.lang.AssertionError $r10;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        tableswitch($i0)
        {
            case 0: goto label01;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label04;
            case 4: goto label05;
            case 5: goto label06;
            case 6: goto label07;
            case 7: goto label08;
            case 8: goto label09;
            case 9: goto label10;
            case 10: goto label13;
            case 11: goto label14;
            case 12: goto label13;
            default: goto label14;
        };

     label01:
        return "void";

     label02:
        return "boolean";

     label03:
        return "char";

     label04:
        return "byte";

     label05:
        return "short";

     label06:
        return "int";

     label07:
        return "float";

     label08:
        return "long";

     label09:
        return "double";

     label10:
        $r4 = new java.lang.StringBuilder;

        $r5 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type getElementType()>();

        $r6 = virtualinvoke $r5.<jdk.internal.org.objectweb.asm.Type: java.lang.String getClassName()>();

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6);

        i3 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: int getDimensions()>();

     label11:
        if i3 <= 0 goto label12;

        virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[]");

        i3 = i3 + -1;

        goto label11;

     label12:
        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label13:
        $r1 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i2 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i2, $i1);

        $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(char,char)>(47, 46);

        return $r3;

     label14:
        $r10 = new java.lang.AssertionError;

        specialinvoke $r10.<java.lang.AssertionError: void <init>()>();

        throw $r10;
    }

    public java.lang.String getInternalName()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0, $i1;
        java.lang.String $r1, $r2;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $r1 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i1, $i0);

        return $r2;
    }

    public static java.lang.String getInternalName(java.lang.Class)
    {
        java.lang.Class r0;
        java.lang.String $r1, $r2;

        r0 := @parameter0: java.lang.Class;

        $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>();

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String replace(char,char)>(46, 47);

        return $r2;
    }

    public java.lang.String getDescriptor()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.String $r1, $r2, $r5, $r8, $r9, $r10;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i0 != 10 goto label1;

        $r9 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i6 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i9 = $i6 - 1;

        $i7 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $i8 = $i7 + 1;

        $r10 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>($i9, $i8);

        return $r10;

     label1:
        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i1 != 12 goto label2;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>()>();

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r5 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i5 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i4 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r5, $i5, $i4);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;

     label2:
        $r1 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i3 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i2 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2);

        return $r2;
    }

    public static java.lang.String getDescriptor(java.lang.Class)
    {
        java.lang.StringBuilder $r0;
        java.lang.Class r2;
        java.lang.String $r3;

        r2 := @parameter0: java.lang.Class;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        staticinvoke <jdk.internal.org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>(r2, $r0);

        $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r3;
    }

    public static java.lang.String getConstructorDescriptor(java.lang.reflect.Constructor)
    {
        java.lang.StringBuilder $r0, $r6;
        java.lang.reflect.Constructor r3;
        java.lang.Class[] r4;
        int i0, i1;
        java.lang.String $r7;
        java.lang.Class r8;

        r3 := @parameter0: java.lang.reflect.Constructor;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        r4 = virtualinvoke r3.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r8 = r4[i1];

        staticinvoke <jdk.internal.org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>(r8, $r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")V");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static transient java.lang.String getMethodDescriptor(jdk.internal.org.objectweb.asm.Type, jdk.internal.org.objectweb.asm.Type[])
    {
        java.lang.StringBuilder $r0;
        jdk.internal.org.objectweb.asm.Type[] r3;
        int i0, i1;
        jdk.internal.org.objectweb.asm.Type r6, r8;
        java.lang.String $r7;

        r6 := @parameter0: jdk.internal.org.objectweb.asm.Type;

        r3 := @parameter1: jdk.internal.org.objectweb.asm.Type[];

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        i0 = lengthof r3;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r8 = r3[i1];

        virtualinvoke r8.<jdk.internal.org.objectweb.asm.Type: void appendDescriptor(java.lang.StringBuilder)>($r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        virtualinvoke r6.<jdk.internal.org.objectweb.asm.Type: void appendDescriptor(java.lang.StringBuilder)>($r0);

        $r7 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r7;
    }

    public static java.lang.String getMethodDescriptor(java.lang.reflect.Method)
    {
        java.lang.StringBuilder $r0;
        java.lang.reflect.Method r3;
        java.lang.Class[] r4;
        int i0, i1;
        java.lang.Class $r7, r9;
        java.lang.String $r8;

        r3 := @parameter0: java.lang.reflect.Method;

        $r0 = new java.lang.StringBuilder;

        specialinvoke $r0.<java.lang.StringBuilder: void <init>()>();

        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40);

        r4 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>();

        i0 = lengthof r4;

        i1 = 0;

     label1:
        if i1 >= i0 goto label2;

        r9 = r4[i1];

        staticinvoke <jdk.internal.org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>(r9, $r0);

        i1 = i1 + 1;

        goto label1;

     label2:
        virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(41);

        $r7 = virtualinvoke r3.<java.lang.reflect.Method: java.lang.Class getReturnType()>();

        staticinvoke <jdk.internal.org.objectweb.asm.Type: void appendDescriptor(java.lang.Class,java.lang.StringBuilder)>($r7, $r0);

        $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r8;
    }

    private void appendDescriptor(java.lang.StringBuilder)
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9;
        java.lang.StringBuilder r1, $r4, $r6;
        java.lang.String $r2, $r5, $r8;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        r1 := @parameter0: java.lang.StringBuilder;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i0 != 10 goto label1;

        $r8 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i6 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i9 = $i6 - 1;

        $i7 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $i8 = $i7 + 1;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r8, $i9, $i8);

        goto label3;

     label1:
        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i1 != 12 goto label2;

        $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        $r5 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i5 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i4 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r5, $i5, $i4);

        virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

        goto label3;

     label2:
        $r2 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i3 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i2 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>($r2, $i3, $i2);

     label3:
        return;
    }

    private static void appendDescriptor(java.lang.Class, java.lang.StringBuilder)
    {
        java.lang.Class r0, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, r18;
        boolean $z0, $z1;
        java.lang.StringBuilder r1;
        int i0, i3;
        char c1, c2, $c4;
        java.lang.AssertionError $r15;
        java.lang.String r19;

        r0 := @parameter0: java.lang.Class;

        r1 := @parameter1: java.lang.StringBuilder;

        r18 = r0;

     label01:
        $z0 = virtualinvoke r18.<java.lang.Class: boolean isArray()>();

        if $z0 == 0 goto label02;

        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(91);

        r18 = virtualinvoke r18.<java.lang.Class: java.lang.Class getComponentType()>();

        goto label01;

     label02:
        $z1 = virtualinvoke r18.<java.lang.Class: boolean isPrimitive()>();

        if $z1 == 0 goto label13;

        $r6 = <java.lang.Integer: java.lang.Class TYPE>;

        if r18 != $r6 goto label03;

        c2 = 73;

        goto label12;

     label03:
        $r7 = <java.lang.Void: java.lang.Class TYPE>;

        if r18 != $r7 goto label04;

        c2 = 86;

        goto label12;

     label04:
        $r8 = <java.lang.Boolean: java.lang.Class TYPE>;

        if r18 != $r8 goto label05;

        c2 = 90;

        goto label12;

     label05:
        $r9 = <java.lang.Byte: java.lang.Class TYPE>;

        if r18 != $r9 goto label06;

        c2 = 66;

        goto label12;

     label06:
        $r10 = <java.lang.Character: java.lang.Class TYPE>;

        if r18 != $r10 goto label07;

        c2 = 67;

        goto label12;

     label07:
        $r11 = <java.lang.Short: java.lang.Class TYPE>;

        if r18 != $r11 goto label08;

        c2 = 83;

        goto label12;

     label08:
        $r12 = <java.lang.Double: java.lang.Class TYPE>;

        if r18 != $r12 goto label09;

        c2 = 68;

        goto label12;

     label09:
        $r13 = <java.lang.Float: java.lang.Class TYPE>;

        if r18 != $r13 goto label10;

        c2 = 70;

        goto label12;

     label10:
        $r14 = <java.lang.Long: java.lang.Class TYPE>;

        if r18 != $r14 goto label11;

        c2 = 74;

        goto label12;

     label11:
        $r15 = new java.lang.AssertionError;

        specialinvoke $r15.<java.lang.AssertionError: void <init>()>();

        throw $r15;

     label12:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2);

        goto label18;

     label13:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(76);

        r19 = virtualinvoke r18.<java.lang.Class: java.lang.String getName()>();

        i0 = virtualinvoke r19.<java.lang.String: int length()>();

        i3 = 0;

     label14:
        if i3 >= i0 goto label17;

        c1 = virtualinvoke r19.<java.lang.String: char charAt(int)>(i3);

        if c1 != 46 goto label15;

        $c4 = 47;

        goto label16;

     label15:
        $c4 = c1;

     label16:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4);

        i3 = i3 + 1;

        goto label14;

     label17:
        virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(59);

     label18:
        return;
    }

    public int getSort()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0, $i1;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i0 != 12 goto label1;

        $i1 = 10;

        goto label2;

     label1:
        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

     label2:
        return $i1;
    }

    public int getDimensions()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0, $i1, i3;
        java.lang.String $r1;
        char $c2;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        i3 = 1;

     label1:
        $r1 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        $i1 = $i0 + i3;

        $c2 = virtualinvoke $r1.<java.lang.String: char charAt(int)>($i1);

        if $c2 != 91 goto label2;

        i3 = i3 + 1;

        goto label1;

     label2:
        return i3;
    }

    public int getSize()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0;
        java.lang.AssertionError $r1;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        tableswitch($i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            case 2: goto label2;
            case 3: goto label2;
            case 4: goto label2;
            case 5: goto label2;
            case 6: goto label2;
            case 7: goto label3;
            case 8: goto label3;
            case 9: goto label2;
            case 10: goto label2;
            case 11: goto label4;
            case 12: goto label2;
            default: goto label4;
        };

     label1:
        return 0;

     label2:
        return 1;

     label3:
        return 2;

     label4:
        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;
    }

    public int getArgumentsAndReturnSizes()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        java.lang.String $r1;
        int $i0;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        $i0 = staticinvoke <jdk.internal.org.objectweb.asm.Type: int getArgumentsAndReturnSizes(java.lang.String)>($r1);

        return $i0;
    }

    public static int getArgumentsAndReturnSizes(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i2, $i3, $i4, $i6, $i8, i9, i10;
        char $c5, $c7, c11, c12;
        byte $b13;

        r0 := @parameter0: java.lang.String;

        i9 = 1;

        i10 = 1;

        c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>(1);

     label01:
        if c11 == 41 goto label07;

        if c11 == 74 goto label02;

        if c11 != 68 goto label03;

     label02:
        i10 = i10 + 1;

        i9 = i9 + 2;

        goto label06;

     label03:
        $c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        if $c5 != 91 goto label04;

        i10 = i10 + 1;

        goto label03;

     label04:
        $i6 = i10;

        i10 = i10 + 1;

        $c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i6);

        if $c7 != 76 goto label05;

        $i8 = virtualinvoke r0.<java.lang.String: int indexOf(int,int)>(59, i10);

        i10 = $i8 + 1;

     label05:
        i9 = i9 + 1;

     label06:
        c11 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10);

        goto label01;

     label07:
        $i0 = i10 + 1;

        c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i0);

        if c12 != 86 goto label08;

        $i4 = i9 << 2;

        return $i4;

     label08:
        if c12 == 74 goto label09;

        if c12 != 68 goto label10;

     label09:
        $b13 = 2;

        goto label11;

     label10:
        $b13 = 1;

     label11:
        $i2 = i9 << 2;

        $i3 = $i2 | $b13;

        return $i3;
    }

    public int getOpcode(int)
    {
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        jdk.internal.org.objectweb.asm.Type r0;
        java.lang.UnsupportedOperationException $r1, $r3, $r4, $r5;
        java.lang.AssertionError $r2, $r6;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        i0 := @parameter0: int;

        if i0 == 46 goto label01;

        if i0 != 79 goto label12;

     label01:
        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        tableswitch($i1)
        {
            case 0: goto label10;
            case 1: goto label02;
            case 2: goto label03;
            case 3: goto label02;
            case 4: goto label04;
            case 5: goto label05;
            case 6: goto label06;
            case 7: goto label07;
            case 8: goto label08;
            case 9: goto label09;
            case 10: goto label09;
            case 11: goto label10;
            case 12: goto label09;
            default: goto label11;
        };

     label02:
        $i8 = i0 + 5;

        return $i8;

     label03:
        $i7 = i0 + 6;

        return $i7;

     label04:
        $i6 = i0 + 7;

        return $i6;

     label05:
        return i0;

     label06:
        $i5 = i0 + 2;

        return $i5;

     label07:
        $i4 = i0 + 1;

        return $i4;

     label08:
        $i3 = i0 + 3;

        return $i3;

     label09:
        $i2 = i0 + 4;

        return $i2;

     label10:
        $r1 = new java.lang.UnsupportedOperationException;

        specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r1;

     label11:
        $r2 = new java.lang.AssertionError;

        specialinvoke $r2.<java.lang.AssertionError: void <init>()>();

        throw $r2;

     label12:
        $i9 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        tableswitch($i9)
        {
            case 0: goto label13;
            case 1: goto label15;
            case 2: goto label15;
            case 3: goto label15;
            case 4: goto label15;
            case 5: goto label15;
            case 6: goto label16;
            case 7: goto label17;
            case 8: goto label18;
            case 9: goto label19;
            case 10: goto label19;
            case 11: goto label21;
            case 12: goto label19;
            default: goto label22;
        };

     label13:
        if i0 == 172 goto label14;

        $r5 = new java.lang.UnsupportedOperationException;

        specialinvoke $r5.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r5;

     label14:
        return 177;

     label15:
        return i0;

     label16:
        $i12 = i0 + 2;

        return $i12;

     label17:
        $i11 = i0 + 1;

        return $i11;

     label18:
        $i10 = i0 + 3;

        return $i10;

     label19:
        if i0 == 21 goto label20;

        if i0 == 54 goto label20;

        if i0 == 172 goto label20;

        $r4 = new java.lang.UnsupportedOperationException;

        specialinvoke $r4.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r4;

     label20:
        $i13 = i0 + 4;

        return $i13;

     label21:
        $r3 = new java.lang.UnsupportedOperationException;

        specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>()>();

        throw $r3;

     label22:
        $r6 = new java.lang.AssertionError;

        specialinvoke $r6.<java.lang.AssertionError: void <init>()>();

        throw $r6;
    }

    public boolean equals(java.lang.Object)
    {
        jdk.internal.org.objectweb.asm.Type r0, r2;
        java.lang.Object r1;
        boolean $z0;
        int $i0, $i1, i2, i3, i4, i5, $i6, $i7, $i10, $i11, i12, i13;
        java.lang.String $r3, $r4;
        char $c8, $c9;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        r1 := @parameter0: java.lang.Object;

        if r0 != r1 goto label01;

        return 1;

     label01:
        $z0 = r1 instanceof jdk.internal.org.objectweb.asm.Type;

        if $z0 != 0 goto label02;

        return 0;

     label02:
        r2 = (jdk.internal.org.objectweb.asm.Type) r1;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i0 != 12 goto label03;

        $i10 = 10;

        goto label04;

     label03:
        $i10 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

     label04:
        $i1 = r2.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i1 != 12 goto label05;

        $i11 = 10;

        goto label06;

     label05:
        $i11 = r2.<jdk.internal.org.objectweb.asm.Type: int sort>;

     label06:
        if $i10 == $i11 goto label07;

        return 0;

     label07:
        i2 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        i3 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        i4 = r2.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        i5 = r2.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

        $i7 = i3 - i2;

        $i6 = i5 - i4;

        if $i7 == $i6 goto label08;

        return 0;

     label08:
        i12 = i2;

        i13 = i4;

     label09:
        if i12 >= i3 goto label11;

        $r3 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $c8 = virtualinvoke $r3.<java.lang.String: char charAt(int)>(i12);

        $r4 = r2.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $c9 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(i13);

        if $c8 == $c9 goto label10;

        return 0;

     label10:
        i12 = i12 + 1;

        i13 = i13 + 1;

        goto label09;

     label11:
        return 1;
    }

    public int hashCode()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        int $i0, $i1, i2, $i4, $i6, i7, i8;
        java.lang.String $r1;
        char $c3;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $i0 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i0 != 12 goto label1;

        $i6 = 10;

        goto label2;

     label1:
        $i6 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

     label2:
        i7 = 13 * $i6;

        $i1 = r0.<jdk.internal.org.objectweb.asm.Type: int sort>;

        if $i1 < 9 goto label4;

        i8 = r0.<jdk.internal.org.objectweb.asm.Type: int valueBegin>;

        i2 = r0.<jdk.internal.org.objectweb.asm.Type: int valueEnd>;

     label3:
        if i8 >= i2 goto label4;

        $r1 = r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String valueBuffer>;

        $c3 = virtualinvoke $r1.<java.lang.String: char charAt(int)>(i8);

        $i4 = i7 + $c3;

        i7 = 17 * $i4;

        i8 = i8 + 1;

        goto label3;

     label4:
        return i7;
    }

    public java.lang.String toString()
    {
        jdk.internal.org.objectweb.asm.Type r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.org.objectweb.asm.Type;

        $r1 = virtualinvoke r0.<jdk.internal.org.objectweb.asm.Type: java.lang.String getDescriptor()>();

        return $r1;
    }

    static void <clinit>()
    {
        jdk.internal.org.objectweb.asm.Type $r0, $r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8;

        <jdk.internal.org.objectweb.asm.Type: java.lang.String PRIMITIVE_DESCRIPTORS> = "VZCBSIFJD";

        <jdk.internal.org.objectweb.asm.Type: int INTERNAL> = 12;

        <jdk.internal.org.objectweb.asm.Type: int METHOD> = 11;

        <jdk.internal.org.objectweb.asm.Type: int OBJECT> = 10;

        <jdk.internal.org.objectweb.asm.Type: int ARRAY> = 9;

        <jdk.internal.org.objectweb.asm.Type: int DOUBLE> = 8;

        <jdk.internal.org.objectweb.asm.Type: int LONG> = 7;

        <jdk.internal.org.objectweb.asm.Type: int FLOAT> = 6;

        <jdk.internal.org.objectweb.asm.Type: int INT> = 5;

        <jdk.internal.org.objectweb.asm.Type: int SHORT> = 4;

        <jdk.internal.org.objectweb.asm.Type: int BYTE> = 3;

        <jdk.internal.org.objectweb.asm.Type: int CHAR> = 2;

        <jdk.internal.org.objectweb.asm.Type: int BOOLEAN> = 1;

        <jdk.internal.org.objectweb.asm.Type: int VOID> = 0;

        $r0 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r0.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(0, "VZCBSIFJD", 0, 1);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type VOID_TYPE> = $r0;

        $r1 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r1.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(1, "VZCBSIFJD", 1, 2);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type BOOLEAN_TYPE> = $r1;

        $r2 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r2.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(2, "VZCBSIFJD", 2, 3);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type CHAR_TYPE> = $r2;

        $r3 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r3.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(3, "VZCBSIFJD", 3, 4);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type BYTE_TYPE> = $r3;

        $r4 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r4.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(4, "VZCBSIFJD", 4, 5);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type SHORT_TYPE> = $r4;

        $r5 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r5.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(5, "VZCBSIFJD", 5, 6);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type INT_TYPE> = $r5;

        $r6 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r6.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(6, "VZCBSIFJD", 6, 7);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type FLOAT_TYPE> = $r6;

        $r7 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r7.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(7, "VZCBSIFJD", 7, 8);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type LONG_TYPE> = $r7;

        $r8 = new jdk.internal.org.objectweb.asm.Type;

        specialinvoke $r8.<jdk.internal.org.objectweb.asm.Type: void <init>(int,java.lang.String,int,int)>(8, "VZCBSIFJD", 8, 9);

        <jdk.internal.org.objectweb.asm.Type: jdk.internal.org.objectweb.asm.Type DOUBLE_TYPE> = $r8;

        return;
    }
}
