class jdk.internal.module.ModuleBootstrap$SafeModuleFinder extends java.lang.Object implements java.lang.module.ModuleFinder
{
    private final java.util.Set mrefs;
    private volatile java.util.Map nameToModule;

    void <init>(java.lang.module.ModuleFinder)
    {
        jdk.internal.module.ModuleBootstrap$SafeModuleFinder r0;
        java.lang.module.ModuleFinder r1;
        java.util.Set $r2, $r3;

        r0 := @this: jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        r1 := @parameter0: java.lang.module.ModuleFinder;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = interfaceinvoke r1.<java.lang.module.ModuleFinder: java.util.Set findAll()>();

        $r3 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2);

        r0.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: java.util.Set mrefs> = $r3;

        return;
    }

    public java.util.Optional find(java.lang.String)
    {
        java.lang.String r0;
        jdk.internal.module.ModuleBootstrap$SafeModuleFinder r2;
        java.lang.Object $r3, $r11;
        java.lang.module.ModuleReference $r4;
        java.util.Optional $r5;
        java.util.Set $r6;
        java.util.stream.Stream $r7;
        java.util.function.Function $r8, $r9;
        java.util.stream.Collector $r10;
        java.util.Map $r12, r13;

        r2 := @this: jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        r0 := @parameter0: java.lang.String;

        staticinvoke <java.util.Objects: java.lang.Object requireNonNull(java.lang.Object)>(r0);

        r13 = r2.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: java.util.Map nameToModule>;

        if r13 != null goto label1;

        $r6 = r2.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: java.util.Set mrefs>;

        $r7 = interfaceinvoke $r6.<java.util.Set: java.util.stream.Stream stream()>();

        $r8 = staticinvoke <jdk.internal.module.ModuleBootstrap$SafeModuleFinder$lambda_find_0__88: java.util.function.Function bootstrap$()>();

        $r9 = staticinvoke <java.util.function.Function: java.util.function.Function identity()>();

        $r10 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r8, $r9);

        $r11 = interfaceinvoke $r7.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r10);

        $r12 = (java.util.Map) $r11;

        r13 = $r12;

        r2.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: java.util.Map nameToModule> = $r12;

     label1:
        $r3 = interfaceinvoke r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0);

        $r4 = (java.lang.module.ModuleReference) $r3;

        $r5 = staticinvoke <java.util.Optional: java.util.Optional ofNullable(java.lang.Object)>($r4);

        return $r5;
    }

    public java.util.Set findAll()
    {
        jdk.internal.module.ModuleBootstrap$SafeModuleFinder r0;
        java.util.Set $r1;

        r0 := @this: jdk.internal.module.ModuleBootstrap$SafeModuleFinder;

        $r1 = r0.<jdk.internal.module.ModuleBootstrap$SafeModuleFinder: java.util.Set mrefs>;

        return $r1;
    }

    public static java.lang.String lambda$find$0(java.lang.module.ModuleReference)
    {
        java.lang.module.ModuleReference r0;
        java.lang.module.ModuleDescriptor $r1;
        java.lang.String $r2;

        r0 := @parameter0: java.lang.module.ModuleReference;

        $r1 = virtualinvoke r0.<java.lang.module.ModuleReference: java.lang.module.ModuleDescriptor descriptor()>();

        $r2 = virtualinvoke $r1.<java.lang.module.ModuleDescriptor: java.lang.String name()>();

        return $r2;
    }
}
