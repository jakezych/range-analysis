class jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer extends java.lang.Object implements jdk.internal.math.FloatingDecimal$BinaryToASCIIConverter
{
    private final java.lang.String image;
    private boolean isNegative;
    static final boolean $assertionsDisabled;

    public void <init>(java.lang.String, boolean)
    {
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r0;
        java.lang.String r1;
        boolean z0;

        r0 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        r1 := @parameter0: java.lang.String;

        z0 := @parameter1: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: java.lang.String image> = r1;

        r0.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: boolean isNegative> = z0;

        return;
    }

    public java.lang.String toJavaFormatString()
    {
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r0;
        java.lang.String $r1;

        r0 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        $r1 = r0.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: java.lang.String image>;

        return $r1;
    }

    public void appendTo(java.lang.Appendable)
    {
        java.lang.Appendable r0;
        boolean $z0, $z1, $z2;
        java.lang.AssertionError $r1;
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r2;
        java.lang.String $r3, $r6;
        java.lang.StringBuffer $r4;
        java.lang.StringBuilder $r7;

        r2 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        r0 := @parameter0: java.lang.Appendable;

        $z0 = r0 instanceof java.lang.StringBuilder;

        if $z0 == 0 goto label1;

        $r7 = (java.lang.StringBuilder) r0;

        $r6 = r2.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: java.lang.String image>;

        virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6);

        goto label3;

     label1:
        $z1 = r0 instanceof java.lang.StringBuffer;

        if $z1 == 0 goto label2;

        $r4 = (java.lang.StringBuffer) r0;

        $r3 = r2.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: java.lang.String image>;

        virtualinvoke $r4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r3);

        goto label3;

     label2:
        $z2 = <jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: boolean $assertionsDisabled>;

        if $z2 != 0 goto label3;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label3:
        return;
    }

    public int getDecimalExponent()
    {
        java.lang.IllegalArgumentException $r0;
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r1;

        r1 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exceptional value does not have an exponent");

        throw $r0;
    }

    public int getDigits(char[])
    {
        java.lang.IllegalArgumentException $r0;
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r1;
        char[] r2;

        r1 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        r2 := @parameter0: char[];

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exceptional value does not have digits");

        throw $r0;
    }

    public boolean isNegative()
    {
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r0;
        boolean $z0;

        r0 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        $z0 = r0.<jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: boolean isNegative>;

        return $z0;
    }

    public boolean isExceptional()
    {
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r0;

        r0 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        return 1;
    }

    public boolean digitsRoundedUp()
    {
        java.lang.IllegalArgumentException $r0;
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r1;

        r1 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exceptional value is not rounded");

        throw $r0;
    }

    public boolean decimalDigitsExact()
    {
        java.lang.IllegalArgumentException $r0;
        jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer r1;

        r1 := @this: jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer;

        $r0 = new java.lang.IllegalArgumentException;

        specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Exceptional value is not exact");

        throw $r0;
    }

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1;

        $r0 = class "Ljdk/internal/math/FloatingDecimal;";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

        goto label2;

     label1:
        $z1 = 0;

     label2:
        <jdk.internal.math.FloatingDecimal$ExceptionalBinaryToASCIIBuffer: boolean $assertionsDisabled> = $z1;

        return;
    }
}
