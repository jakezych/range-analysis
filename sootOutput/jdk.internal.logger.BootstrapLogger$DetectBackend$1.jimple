class jdk.internal.logger.BootstrapLogger$DetectBackend$1 extends java.lang.Object implements java.security.PrivilegedAction
{

    void <init>()
    {
        jdk.internal.logger.BootstrapLogger$DetectBackend$1 r0;

        r0 := @this: jdk.internal.logger.BootstrapLogger$DetectBackend$1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public jdk.internal.logger.BootstrapLogger$LoggingBackend run()
    {
        java.lang.ClassLoader $r0;
        java.util.ServiceLoader $r1, $r3;
        java.util.Iterator r2, r4;
        boolean $z0, $z1;
        jdk.internal.logger.BootstrapLogger$LoggingBackend $r5, $r8, $r10;
        java.lang.String r6, r7;
        jdk.internal.logger.BootstrapLogger$DetectBackend$1 r9;

        r9 := @this: jdk.internal.logger.BootstrapLogger$DetectBackend$1;

        $r0 = staticinvoke <java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>();

        $r1 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader load(java.lang.Class,java.lang.ClassLoader)>(class "Ljava/lang/System$LoggerFinder;", $r0);

        r2 = virtualinvoke $r1.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 == 0 goto label1;

        $r8 = <jdk.internal.logger.BootstrapLogger$LoggingBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend CUSTOM>;

        return $r8;

     label1:
        $r3 = staticinvoke <java.util.ServiceLoader: java.util.ServiceLoader loadInstalled(java.lang.Class)>(class "Ljdk/internal/logger/DefaultLoggerFinder;");

        r4 = virtualinvoke $r3.<java.util.ServiceLoader: java.util.Iterator iterator()>();

        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 == 0 goto label5;

        r6 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.class");

        r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.util.logging.config.file");

        if r6 != null goto label2;

        if r7 == null goto label3;

     label2:
        $r10 = <jdk.internal.logger.BootstrapLogger$LoggingBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend JUL_WITH_CONFIG>;

        goto label4;

     label3:
        $r10 = <jdk.internal.logger.BootstrapLogger$LoggingBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend JUL_DEFAULT>;

     label4:
        return $r10;

     label5:
        $r5 = <jdk.internal.logger.BootstrapLogger$LoggingBackend: jdk.internal.logger.BootstrapLogger$LoggingBackend NONE>;

        return $r5;
    }

    public volatile java.lang.Object run()
    {
        jdk.internal.logger.BootstrapLogger$DetectBackend$1 r0;
        jdk.internal.logger.BootstrapLogger$LoggingBackend $r1;

        r0 := @this: jdk.internal.logger.BootstrapLogger$DetectBackend$1;

        $r1 = virtualinvoke r0.<jdk.internal.logger.BootstrapLogger$DetectBackend$1: jdk.internal.logger.BootstrapLogger$LoggingBackend run()>();

        return $r1;
    }
}
