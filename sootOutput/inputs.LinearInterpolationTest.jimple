public class inputs.LinearInterpolationTest extends java.lang.Object
{

    public void <init>()
    {
        inputs.LinearInterpolationTest r0;

        r0 := @this: inputs.LinearInterpolationTest;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static double arcLength(int, int)
    {
        int[] r0;
        int i0, i1, i2, i3, i4, i5;
        double $d0, $d1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r0 = newarray (int)[100];

        if i0 <= i1 goto label1;

        $d1 = staticinvoke <inputs.LinearInterpolationTest: double arcLength(int,int)>(i1, i0);

        return $d1;

     label1:
        i2 = 9 * i0;

        i3 = i0 - i2;

        i4 = 9 * i1;

        i5 = i1 - i4;

        $d0 = staticinvoke <inputs.LinearInterpolationTest: double arcLengthRecursive(int,int,int,int)>(i2, i3, i4, i5);

        return $d0;
    }

    private static double arcLengthRecursive(int, int, int, int)
    {
        int i2, i3, $i4, i5, i6, $i7;
        double $d0, $d1, $d2, $d3, $d4, $d5, $d6;

        i3 := @parameter0: int;

        i5 := @parameter1: int;

        i2 := @parameter2: int;

        i6 := @parameter3: int;

        $i4 = i2 - i3;

        lookupswitch($i4)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $d3 = staticinvoke <inputs.LinearInterpolationTest: double arcLengthRecursive(int,int,int)>(i3, i5, i6);

        return $d3;

     label2:
        $d0 = staticinvoke <inputs.LinearInterpolationTest: double arcLengthRecursive(int,int,int)>(i3, i5, 1);

        $d1 = staticinvoke <inputs.LinearInterpolationTest: double arcLengthRecursive(int,int,int)>(i2, 0, i6);

        $d2 = $d0 + $d1;

        return $d2;

     label3:
        $i7 = i2 - 1;

        $d4 = staticinvoke <inputs.LinearInterpolationTest: double arcLengthRecursive(int,int,int,int)>(i3, i5, $i7, 1);

        $d5 = staticinvoke <inputs.LinearInterpolationTest: double arcLengthRecursive(int,int,int)>(i2, 0, i6);

        $d6 = $d4 + $d5;

        return $d6;
    }

    private static double arcLengthRecursive(int, int, int)
    {
        int[] r0;
        int i0, i1, $i2, i3, i4, i5, $i6, $i7, $i8;
        double $d0;

        i0 := @parameter0: int;

        i5 := @parameter1: int;

        i4 := @parameter2: int;

        r0 = newarray (int)[100];

        i1 = r0[i0];

        $i2 = i0 + 1;

        i3 = r0[$i2];

        $i7 = i1 - i3;

        $i6 = i4 - i5;

        $i8 = $i7 * $i6;

        $d0 = (double) $i8;

        return $d0;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;

        r0 := @parameter0: java.lang.String[];

        staticinvoke <inputs.LinearInterpolationTest: double arcLength(int,int)>(4, 8);

        return;
    }
}
